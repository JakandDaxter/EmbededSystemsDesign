
nios_software.elf:     file format elf32-littlenios2
nios_software.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008230

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000049e4 memsz 0x000049e4 flags r-x
    LOAD off    0x00005a04 vaddr 0x0000ca04 paddr 0x0000e084 align 2**12
         filesz 0x00001680 memsz 0x00001680 flags rw-
    LOAD off    0x00007704 vaddr 0x0000f704 paddr 0x0000f704 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000469c  00008230  00008230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  0000c8cc  0000c8cc  000058cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001680  0000ca04  0000e084  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  0000f704  0000f704  00007704  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000f834  0000f834  00007084  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006f0  00000000  00000000  000070a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00009079  00000000  00000000  00007798  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000334f  00000000  00000000  00010811  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000373b  00000000  00000000  00013b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d08  00000000  00000000  0001729c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002111  00000000  00000000  00017fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e98  00000000  00000000  0001a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001ef50  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000940  00000000  00000000  0001ef60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021726  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00021729  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021735  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021736  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021737  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0002173b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0002173f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00021743  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0002174e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00021759  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00021764  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  0002176f  2**0
                  CONTENTS, READONLY
 29 .jdi          000054be  00000000  00000000  00021789  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000689e7  00000000  00000000  00026c47  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008230 l    d  .text	00000000 .text
0000c8cc l    d  .rodata	00000000 .rodata
0000ca04 l    d  .rwdata	00000000 .rwdata
0000f704 l    d  .bss	00000000 .bss
0000f834 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_software_bsp//obj/HAL/src/crt0.o
00008268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Lab_5.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0000a95c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000aac4 l     F .text	00000034 alt_dev_reg
0000ca04 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ada0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000afac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b710 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b844 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b870 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bacc l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bc2c l     F .text	0000003c alt_get_errno
0000bc68 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000dc0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000f724 g     O .bss	00000004 alt_instruction_exception_handler
0000aa48 g     F .text	0000007c alt_main
0000f734 g     O .bss	00000100 alt_irq
0000e084 g       *ABS*	00000000 __flash_rwdata_start
0000f704 g     O .bss	00000004 j
000092b8 g     F .text	000000dc .hidden __gtdf2
0000e040 g     O .rwdata	00000004 HEX1
0000e04c g     O .rwdata	00000004 HEX4
0000c0d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
0000f710 g     O .bss	00000004 edge_capture
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000f730 g     O .bss	00000004 errno
0000f71c g     O .bss	00000004 alt_argv
00016030 g       *ABS*	00000000 _gp
0000da8c g     O .rwdata	00000180 alt_fd_list
0000e030 g     O .rwdata	00000004 KeyPtr
0000c0fc g     F .text	00000090 alt_find_dev
0000c420 g     F .text	00000148 memcpy
0000848c g     F .text	00000138 servo_registor_isr
0000f70c g     O .bss	00000004 KeyValue
0000a57c g     F .text	000000dc .hidden __floatsidf
0000bbb0 g     F .text	0000007c alt_io_redirect
0000c8cc g       *ABS*	00000000 __DTOR_END__
0000ba30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000b1a4 g     F .text	0000021c altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008928 g     F .text	00000064 .hidden __udivsi3
000087bc g     F .text	00000074 .hidden __fixunsdfsi
0000e034 g     O .rwdata	00000004 SwitchPtr
0000e06c g     O .rwdata	00000004 alt_max_fd
00008a0c g     F .text	000008ac .hidden __adddf3
0000e07c g     O .rwdata	00000004 _global_impure_ptr
0000f834 g       *ABS*	00000000 __bss_end
0000a86c g     F .text	000000f0 alt_iic_isr_register
0000bfd0 g     F .text	00000108 alt_tick
0000a820 g     F .text	0000004c alt_ic_irq_enabled
0000bf34 g     F .text	0000009c alt_alarm_stop
0000e048 g     O .rwdata	00000004 HEX3
0000f714 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000da64 g     O .rwdata	00000028 alt_dev_null
0000b824 g     F .text	00000020 alt_dcache_flush_all
0000a4fc g     F .text	00000080 .hidden __fixdfsi
0000e084 g       *ABS*	00000000 __ram_rwdata_end
0000e064 g     O .rwdata	00000008 alt_dev_list
0000ca04 g       *ABS*	00000000 __ram_rodata_end
0000898c g     F .text	00000058 .hidden __umodsi3
0000f834 g       *ABS*	00000000 end
0000ace0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000081d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000c8cc g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000a658 g     F .text	00000064 .hidden __clzsi2
0000e038 g     O .rwdata	00000004 ServoPtr
0000b3c0 g     F .text	00000224 altera_avalon_jtag_uart_write
0000c718 g     F .text	00000180 __call_exitprocs
0000e03c g     O .rwdata	00000004 HEX0
0000826c g     F .text	00000220 pushbutton_isr
00008230 g     F .text	0000003c _start
0000f728 g     O .bss	00000004 _alt_tick_rate
0000f72c g     O .bss	00000004 _alt_nticks
0000ab30 g     F .text	0000004c alt_sys_init
0000c600 g     F .text	00000118 __register_exitproc
0000b04c g     F .text	00000068 altera_avalon_jtag_uart_close
000089e4 g     F .text	00000028 .hidden __mulsi3
0000ca04 g       *ABS*	00000000 __ram_rwdata_start
0000c8cc g       *ABS*	00000000 __ram_rodata_start
0000ab7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c294 g     F .text	000000c4 alt_get_fd
0000c3a4 g     F .text	0000007c memcmp
0000ac3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0000f834 g       *ABS*	00000000 __alt_stack_base
0000ac8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00009394 g     F .text	0000086c .hidden __muldf3
0000c18c g     F .text	00000108 alt_find_file
0000b8ac g     F .text	000000a4 alt_dev_llist_insert
0000f704 g       *ABS*	00000000 __bss_start
000085c4 g     F .text	000001f8 main
0000f720 g     O .bss	00000004 alt_envp
0000abdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000e070 g     O .rwdata	00000004 alt_errno
00008830 g     F .text	00000084 .hidden __divsi3
0000c8cc g       *ABS*	00000000 __CTOR_END__
0000c8cc g       *ABS*	00000000 __flash_rodata_start
0000c8cc g       *ABS*	00000000 __DTOR_LIST__
0000e054 g     O .rwdata	00000001 ServoReg0
0000aaf8 g     F .text	00000038 alt_irq_init
0000beb0 g     F .text	00000084 alt_release_fd
0000c8cc g     O .rodata	00000100 .hidden __clz_tab
0000c358 g     F .text	00000014 atexit
0000e044 g     O .rwdata	00000004 HEX2
0000e050 g     O .rwdata	00000004 HEX5
0000e080 g     O .rwdata	00000004 _impure_ptr
0000f718 g     O .bss	00000004 alt_argc
0000b9b0 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000e05c g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000a6bc g     F .text	00000050 alt_ic_isr_register
0000e084 g       *ABS*	00000000 _edata
0000f834 g       *ABS*	00000000 _end
00008230 g       *ABS*	00000000 __ram_exceptions_end
0000b0b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000a794 g     F .text	0000008c alt_ic_irq_disable
0000c36c g     F .text	00000038 exit
000088b4 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000c898 g     F .text	00000034 _exit
0000b5e4 g     F .text	0000012c alt_alarm_start
0000c568 g     F .text	00000098 strlen
0000bd54 g     F .text	0000015c open
000092b8 g     F .text	000000dc .hidden __gedf2
0000e055 g     O .rwdata	00000001 ServoReg1
0000f708 g     O .bss	00000004 SwitchValue
0000ba10 g     F .text	00000020 alt_icache_flush_all
0000e058 g     O .rwdata	00000004 alt_priority_mask
0000a70c g     F .text	00000088 alt_ic_irq_enable
00009c00 g     F .text	000008fc .hidden __subdf3
0000e074 g     O .rwdata	00000008 alt_alarm_list
0000b950 g     F .text	00000060 _do_ctors
0000b74c g     F .text	000000d8 close
0000a9c4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08608c14 	ori	at,at,33328
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10bdcd04 	addi	r2,r2,-2252
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10bdcd04 	addi	r2,r2,-2252
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff20fc>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff20f0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    81e4:	00bfffc4 	movi	r2,-1
    81e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    81ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    81f0:	d0a5bd17 	ldw	r2,-26892(gp)
    81f4:	10000726 	beq	r2,zero,8214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    81f8:	d0a5bd17 	ldw	r2,-26892(gp)
    81fc:	e0fffd17 	ldw	r3,-12(fp)
    8200:	e1bffe17 	ldw	r6,-8(fp)
    8204:	e17fff17 	ldw	r5,-4(fp)
    8208:	1809883a 	mov	r4,r3
    820c:	103ee83a 	callr	r2
    8210:	00000206 	br	821c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    8218:	0005883a 	mov	r2,zero
}
    821c:	e037883a 	mov	sp,fp
    8220:	dfc00117 	ldw	ra,4(sp)
    8224:	df000017 	ldw	fp,0(sp)
    8228:	dec00204 	addi	sp,sp,8
    822c:	f800283a 	ret

Disassembly of section .text:

00008230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    823c:	d6980c14 	ori	gp,gp,24624
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8244:	10bdc114 	ori	r2,r2,63236

    movhi r3, %hi(__bss_end)
    8248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    824c:	18fe0d14 	ori	r3,r3,63540

    beq r2, r3, 1f
    8250:	10c00326 	beq	r2,r3,8260 <_start+0x30>

0:
    stw zero, (r2)
    8254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    825c:	10fffd36 	bltu	r2,r3,8254 <_gp+0xffff2224>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8260:	000a9c40 	call	a9c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8264:	000aa480 	call	aa48 <alt_main>

00008268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8268:	003fff06 	br	8268 <_gp+0xffff2238>

0000826c <pushbutton_isr>:
//************************************************************************************************************************//
unsigned char ServoReg0 = 45; // *(ServoPtr);
unsigned char ServoReg1 = 135; // *(ServoPtr + 1);

void pushbutton_isr(void *context)
{
    826c:	defff804 	addi	sp,sp,-32
    8270:	dfc00715 	stw	ra,28(sp)
    8274:	df000615 	stw	fp,24(sp)
    8278:	dc400515 	stw	r17,20(sp)
    827c:	dc000415 	stw	r16,16(sp)
    8280:	df000604 	addi	fp,sp,24
    8284:	e13ffd15 	stw	r4,-12(fp)
	char HEX_Array[] = {0x40, 0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x0,0x18};
    8288:	00801004 	movi	r2,64
    828c:	e0bffa05 	stb	r2,-24(fp)
    8290:	00801e44 	movi	r2,121
    8294:	e0bffa45 	stb	r2,-23(fp)
    8298:	00800904 	movi	r2,36
    829c:	e0bffa85 	stb	r2,-22(fp)
    82a0:	00800c04 	movi	r2,48
    82a4:	e0bffac5 	stb	r2,-21(fp)
    82a8:	00800644 	movi	r2,25
    82ac:	e0bffb05 	stb	r2,-20(fp)
    82b0:	00800484 	movi	r2,18
    82b4:	e0bffb45 	stb	r2,-19(fp)
    82b8:	00800084 	movi	r2,2
    82bc:	e0bffb85 	stb	r2,-18(fp)
    82c0:	00801e04 	movi	r2,120
    82c4:	e0bffbc5 	stb	r2,-17(fp)
    82c8:	e03ffc05 	stb	zero,-16(fp)
    82cc:	00800604 	movi	r2,24
    82d0:	e0bffc45 	stb	r2,-15(fp)
    KeyValue = *(KeyPtr + 3); //read key value
    82d4:	d0a00017 	ldw	r2,-32768(gp)
    82d8:	10800317 	ldw	r2,12(r2)
    82dc:	d0a5b715 	stw	r2,-26916(gp)
    *(KeyPtr + 3) = KeyValue;
    82e0:	d0a00017 	ldw	r2,-32768(gp)
    82e4:	10800304 	addi	r2,r2,12
    82e8:	d0e5b717 	ldw	r3,-26916(gp)
    82ec:	10c00015 	stw	r3,0(r2)
    
    SwitchValue = *SwitchPtr;  //reading the value of switches
    82f0:	d0a00117 	ldw	r2,-32764(gp)
    82f4:	10800017 	ldw	r2,0(r2)
    82f8:	d0a5b615 	stw	r2,-26920(gp)
    
	if (KeyValue ==(KeyValue & 0x8)) //ensures key 3 was pressed
    82fc:	d0a5b717 	ldw	r2,-26916(gp)
    8300:	10c0020c 	andi	r3,r2,8
    8304:	d0a5b717 	ldw	r2,-26916(gp)
    8308:	18801f1e 	bne	r3,r2,8388 <pushbutton_isr+0x11c>
	{
        //store min
		ServoReg0 = SwitchValue;
    830c:	d0a5b617 	ldw	r2,-26920(gp)
    8310:	d0a00905 	stb	r2,-32732(gp)
					//for min
			//tens
			*HEX5 = HEX_Array[ServoReg0/10];
    8314:	d4200817 	ldw	r16,-32736(gp)
    8318:	d0a00903 	ldbu	r2,-32732(gp)
    831c:	10803fcc 	andi	r2,r2,255
    8320:	01400284 	movi	r5,10
    8324:	1009883a 	mov	r4,r2
    8328:	00089280 	call	8928 <__udivsi3>
    832c:	10803fcc 	andi	r2,r2,255
    8330:	e0fffa04 	addi	r3,fp,-24
    8334:	1885883a 	add	r2,r3,r2
    8338:	10800003 	ldbu	r2,0(r2)
    833c:	10803fcc 	andi	r2,r2,255
    8340:	1080201c 	xori	r2,r2,128
    8344:	10bfe004 	addi	r2,r2,-128
    8348:	80800015 	stw	r2,0(r16)
			//ones
			*HEX4 = HEX_Array[ServoReg0%10];
    834c:	d4200717 	ldw	r16,-32740(gp)
    8350:	d0a00903 	ldbu	r2,-32732(gp)
    8354:	10803fcc 	andi	r2,r2,255
    8358:	01400284 	movi	r5,10
    835c:	1009883a 	mov	r4,r2
    8360:	000898c0 	call	898c <__umodsi3>
    8364:	10803fcc 	andi	r2,r2,255
    8368:	e0fffa04 	addi	r3,fp,-24
    836c:	1885883a 	add	r2,r3,r2
    8370:	10800003 	ldbu	r2,0(r2)
    8374:	10803fcc 	andi	r2,r2,255
    8378:	1080201c 	xori	r2,r2,128
    837c:	10bfe004 	addi	r2,r2,-128
    8380:	80800015 	stw	r2,0(r16)

						//ones
						*HEX0 = HEX_Array[ServoReg1%10];
								
	}
}
    8384:	00003906 	br	846c <pushbutton_isr+0x200>
			//ones
			*HEX4 = HEX_Array[ServoReg0%10];

	}

	else if (KeyValue ==(KeyValue & 0x4)) //ensures key 2 was pressed
    8388:	d0a5b717 	ldw	r2,-26916(gp)
    838c:	10c0010c 	andi	r3,r2,4
    8390:	d0a5b717 	ldw	r2,-26916(gp)
    8394:	1880351e 	bne	r3,r2,846c <pushbutton_isr+0x200>
	{
        //store max
						ServoReg1 = SwitchValue;
    8398:	d0a5b617 	ldw	r2,-26920(gp)
    839c:	d0a00945 	stb	r2,-32731(gp)

						*HEX2 = HEX_Array[ServoReg1/100];
    83a0:	d4200517 	ldw	r16,-32748(gp)
    83a4:	d0a00943 	ldbu	r2,-32731(gp)
    83a8:	10803fcc 	andi	r2,r2,255
    83ac:	01401904 	movi	r5,100
    83b0:	1009883a 	mov	r4,r2
    83b4:	00089280 	call	8928 <__udivsi3>
    83b8:	10803fcc 	andi	r2,r2,255
    83bc:	e0fffa04 	addi	r3,fp,-24
    83c0:	1885883a 	add	r2,r3,r2
    83c4:	10800003 	ldbu	r2,0(r2)
    83c8:	10803fcc 	andi	r2,r2,255
    83cc:	1080201c 	xori	r2,r2,128
    83d0:	10bfe004 	addi	r2,r2,-128
    83d4:	80800015 	stw	r2,0(r16)
						//tens
						*HEX1 = HEX_Array[(ServoReg1 - ((ServoReg1/100) * 100))/10];
    83d8:	d4200417 	ldw	r16,-32752(gp)
    83dc:	d0a00943 	ldbu	r2,-32731(gp)
    83e0:	14403fcc 	andi	r17,r2,255
    83e4:	d0a00943 	ldbu	r2,-32731(gp)
    83e8:	10803fcc 	andi	r2,r2,255
    83ec:	01401904 	movi	r5,100
    83f0:	1009883a 	mov	r4,r2
    83f4:	00089280 	call	8928 <__udivsi3>
    83f8:	10803fcc 	andi	r2,r2,255
    83fc:	017fe704 	movi	r5,-100
    8400:	1009883a 	mov	r4,r2
    8404:	00089e40 	call	89e4 <__mulsi3>
    8408:	8885883a 	add	r2,r17,r2
    840c:	01400284 	movi	r5,10
    8410:	1009883a 	mov	r4,r2
    8414:	00088300 	call	8830 <__divsi3>
    8418:	e0fffa04 	addi	r3,fp,-24
    841c:	1885883a 	add	r2,r3,r2
    8420:	10800003 	ldbu	r2,0(r2)
    8424:	10803fcc 	andi	r2,r2,255
    8428:	1080201c 	xori	r2,r2,128
    842c:	10bfe004 	addi	r2,r2,-128
    8430:	80800015 	stw	r2,0(r16)

						//ones
						*HEX0 = HEX_Array[ServoReg1%10];
    8434:	d4200317 	ldw	r16,-32756(gp)
    8438:	d0a00943 	ldbu	r2,-32731(gp)
    843c:	10803fcc 	andi	r2,r2,255
    8440:	01400284 	movi	r5,10
    8444:	1009883a 	mov	r4,r2
    8448:	000898c0 	call	898c <__umodsi3>
    844c:	10803fcc 	andi	r2,r2,255
    8450:	e0fffa04 	addi	r3,fp,-24
    8454:	1885883a 	add	r2,r3,r2
    8458:	10800003 	ldbu	r2,0(r2)
    845c:	10803fcc 	andi	r2,r2,255
    8460:	1080201c 	xori	r2,r2,128
    8464:	10bfe004 	addi	r2,r2,-128
    8468:	80800015 	stw	r2,0(r16)
								
	}
}
    846c:	0001883a 	nop
    8470:	e6fffe04 	addi	sp,fp,-8
    8474:	dfc00317 	ldw	ra,12(sp)
    8478:	df000217 	ldw	fp,8(sp)
    847c:	dc400117 	ldw	r17,4(sp)
    8480:	dc000017 	ldw	r16,0(sp)
    8484:	dec00404 	addi	sp,sp,16
    8488:	f800283a 	ret

0000848c <servo_registor_isr>:
    
void servo_registor_isr(void *context)
{
    848c:	defffc04 	addi	sp,sp,-16
    8490:	dfc00315 	stw	ra,12(sp)
    8494:	df000215 	stw	fp,8(sp)
    8498:	dc000115 	stw	r16,4(sp)
    849c:	df000204 	addi	fp,sp,8
    84a0:	e13ffe15 	stw	r4,-8(fp)
	//Remember you will be loading the registers with the number of counts necessary to create 
	//the pulsewidth for the specified angle
	//used linear regression to determine formula
		//Reg0
	*(ServoPtr) = (555.55556 * ServoReg0) + 25000;
    84a4:	d4200217 	ldw	r16,-32760(gp)
    84a8:	d0a00903 	ldbu	r2,-32732(gp)
    84ac:	10803fcc 	andi	r2,r2,255
    84b0:	1009883a 	mov	r4,r2
    84b4:	000a57c0 	call	a57c <__floatsidf>
    84b8:	1011883a 	mov	r8,r2
    84bc:	1813883a 	mov	r9,r3
    84c0:	01b25c74 	movhi	r6,51569
    84c4:	31bdee84 	addi	r6,r6,-2118
    84c8:	01d02074 	movhi	r7,16513
    84cc:	39d71c44 	addi	r7,r7,23665
    84d0:	4009883a 	mov	r4,r8
    84d4:	480b883a 	mov	r5,r9
    84d8:	00093940 	call	9394 <__muldf3>
    84dc:	1009883a 	mov	r4,r2
    84e0:	180b883a 	mov	r5,r3
    84e4:	2005883a 	mov	r2,r4
    84e8:	2807883a 	mov	r3,r5
    84ec:	000d883a 	mov	r6,zero
    84f0:	01d03634 	movhi	r7,16600
    84f4:	39da8004 	addi	r7,r7,27136
    84f8:	1009883a 	mov	r4,r2
    84fc:	180b883a 	mov	r5,r3
    8500:	0008a0c0 	call	8a0c <__adddf3>
    8504:	1009883a 	mov	r4,r2
    8508:	180b883a 	mov	r5,r3
    850c:	2005883a 	mov	r2,r4
    8510:	2807883a 	mov	r3,r5
    8514:	1009883a 	mov	r4,r2
    8518:	180b883a 	mov	r5,r3
    851c:	00087bc0 	call	87bc <__fixunsdfsi>
    8520:	80800015 	stw	r2,0(r16)
		//Reg1
	*(ServoPtr + 1) = (555.55556 * ServoReg1) + 25000;
    8524:	d0a00217 	ldw	r2,-32760(gp)
    8528:	14000104 	addi	r16,r2,4
    852c:	d0a00943 	ldbu	r2,-32731(gp)
    8530:	10803fcc 	andi	r2,r2,255
    8534:	1009883a 	mov	r4,r2
    8538:	000a57c0 	call	a57c <__floatsidf>
    853c:	1011883a 	mov	r8,r2
    8540:	1813883a 	mov	r9,r3
    8544:	01b25c74 	movhi	r6,51569
    8548:	31bdee84 	addi	r6,r6,-2118
    854c:	01d02074 	movhi	r7,16513
    8550:	39d71c44 	addi	r7,r7,23665
    8554:	4009883a 	mov	r4,r8
    8558:	480b883a 	mov	r5,r9
    855c:	00093940 	call	9394 <__muldf3>
    8560:	1009883a 	mov	r4,r2
    8564:	180b883a 	mov	r5,r3
    8568:	2005883a 	mov	r2,r4
    856c:	2807883a 	mov	r3,r5
    8570:	000d883a 	mov	r6,zero
    8574:	01d03634 	movhi	r7,16600
    8578:	39da8004 	addi	r7,r7,27136
    857c:	1009883a 	mov	r4,r2
    8580:	180b883a 	mov	r5,r3
    8584:	0008a0c0 	call	8a0c <__adddf3>
    8588:	1009883a 	mov	r4,r2
    858c:	180b883a 	mov	r5,r3
    8590:	2005883a 	mov	r2,r4
    8594:	2807883a 	mov	r3,r5
    8598:	1009883a 	mov	r4,r2
    859c:	180b883a 	mov	r5,r3
    85a0:	00087bc0 	call	87bc <__fixunsdfsi>
    85a4:	80800015 	stw	r2,0(r16)
 

}
    85a8:	0001883a 	nop
    85ac:	e6ffff04 	addi	sp,fp,-4
    85b0:	dfc00217 	ldw	ra,8(sp)
    85b4:	df000117 	ldw	fp,4(sp)
    85b8:	dc000017 	ldw	r16,0(sp)
    85bc:	dec00304 	addi	sp,sp,12
    85c0:	f800283a 	ret

000085c4 <main>:

int main(void)
{
    85c4:	defff804 	addi	sp,sp,-32
    85c8:	dfc00715 	stw	ra,28(sp)
    85cc:	df000615 	stw	fp,24(sp)
    85d0:	dc400515 	stw	r17,20(sp)
    85d4:	dc000415 	stw	r16,16(sp)
    85d8:	df000604 	addi	fp,sp,24
	char HEX_Array[] = {0x40, 0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x0,0x18};
    85dc:	00801004 	movi	r2,64
    85e0:	e0bffb05 	stb	r2,-20(fp)
    85e4:	00801e44 	movi	r2,121
    85e8:	e0bffb45 	stb	r2,-19(fp)
    85ec:	00800904 	movi	r2,36
    85f0:	e0bffb85 	stb	r2,-18(fp)
    85f4:	00800c04 	movi	r2,48
    85f8:	e0bffbc5 	stb	r2,-17(fp)
    85fc:	00800644 	movi	r2,25
    8600:	e0bffc05 	stb	r2,-16(fp)
    8604:	00800484 	movi	r2,18
    8608:	e0bffc45 	stb	r2,-15(fp)
    860c:	00800084 	movi	r2,2
    8610:	e0bffc85 	stb	r2,-14(fp)
    8614:	00801e04 	movi	r2,120
    8618:	e0bffcc5 	stb	r2,-13(fp)
    861c:	e03ffd05 	stb	zero,-12(fp)
    8620:	00800604 	movi	r2,24
    8624:	e0bffd45 	stb	r2,-11(fp)
	//initial write to servo
    
    *HEX3 = 0x3F;
    8628:	d0a00617 	ldw	r2,-32744(gp)
    862c:	00c00fc4 	movi	r3,63
    8630:	10c00015 	stw	r3,0(r2)
	
alt_ic_isr_register(PUSHBUTTONS_IRQ_INTERRUPT_CONTROLLER_ID,
    8634:	d8000015 	stw	zero,0(sp)
    8638:	000f883a 	mov	r7,zero
    863c:	01800074 	movhi	r6,1
    8640:	31a09b04 	addi	r6,r6,-32148
    8644:	01400044 	movi	r5,1
    8648:	0009883a 	mov	r4,zero
    864c:	000a6bc0 	call	a6bc <alt_ic_isr_register>
                                    PUSHBUTTONS_IRQ,
                                    pushbutton_isr,
                                        0,
                                        0);

*(KeyPtr + 2) = 0xF;//write to the pushbutton interrupt mask register, and set 3 mask bits to 1 (bit 0 is Nios II reset) */
    8650:	d0a00017 	ldw	r2,-32768(gp)
    8654:	10800204 	addi	r2,r2,8
    8658:	00c003c4 	movi	r3,15
    865c:	10c00015 	stw	r3,0(r2)
 
//registers servo isr
alt_ic_isr_register(SERVO_CONTROLLER_0_IRQ_INTERRUPT_CONTROLLER_ID,
    8660:	d8000015 	stw	zero,0(sp)
    8664:	000f883a 	mov	r7,zero
    8668:	01800074 	movhi	r6,1
    866c:	31a12304 	addi	r6,r6,-31604
    8670:	000b883a 	mov	r5,zero
    8674:	0009883a 	mov	r4,zero
    8678:	000a6bc0 	call	a6bc <alt_ic_isr_register>
						SERVO_CONTROLLER_0_IRQ,
                                servo_registor_isr,
                                0,
                                0);
       *HEX5 = HEX_Array[ServoReg0/10];
    867c:	d4200817 	ldw	r16,-32736(gp)
    8680:	d0a00903 	ldbu	r2,-32732(gp)
    8684:	10803fcc 	andi	r2,r2,255
    8688:	01400284 	movi	r5,10
    868c:	1009883a 	mov	r4,r2
    8690:	00089280 	call	8928 <__udivsi3>
    8694:	10803fcc 	andi	r2,r2,255
    8698:	e0fffb04 	addi	r3,fp,-20
    869c:	1885883a 	add	r2,r3,r2
    86a0:	10800003 	ldbu	r2,0(r2)
    86a4:	10803fcc 	andi	r2,r2,255
    86a8:	1080201c 	xori	r2,r2,128
    86ac:	10bfe004 	addi	r2,r2,-128
    86b0:	80800015 	stw	r2,0(r16)
       *HEX4 = HEX_Array[ServoReg0%10];
    86b4:	d4200717 	ldw	r16,-32740(gp)
    86b8:	d0a00903 	ldbu	r2,-32732(gp)
    86bc:	10803fcc 	andi	r2,r2,255
    86c0:	01400284 	movi	r5,10
    86c4:	1009883a 	mov	r4,r2
    86c8:	000898c0 	call	898c <__umodsi3>
    86cc:	10803fcc 	andi	r2,r2,255
    86d0:	e0fffb04 	addi	r3,fp,-20
    86d4:	1885883a 	add	r2,r3,r2
    86d8:	10800003 	ldbu	r2,0(r2)
    86dc:	10803fcc 	andi	r2,r2,255
    86e0:	1080201c 	xori	r2,r2,128
    86e4:	10bfe004 	addi	r2,r2,-128
    86e8:	80800015 	stw	r2,0(r16)
       *HEX2 = HEX_Array[ServoReg1/100];
    86ec:	d4200517 	ldw	r16,-32748(gp)
    86f0:	d0a00943 	ldbu	r2,-32731(gp)
    86f4:	10803fcc 	andi	r2,r2,255
    86f8:	01401904 	movi	r5,100
    86fc:	1009883a 	mov	r4,r2
    8700:	00089280 	call	8928 <__udivsi3>
    8704:	10803fcc 	andi	r2,r2,255
    8708:	e0fffb04 	addi	r3,fp,-20
    870c:	1885883a 	add	r2,r3,r2
    8710:	10800003 	ldbu	r2,0(r2)
    8714:	10803fcc 	andi	r2,r2,255
    8718:	1080201c 	xori	r2,r2,128
    871c:	10bfe004 	addi	r2,r2,-128
    8720:	80800015 	stw	r2,0(r16)
       *HEX1 = HEX_Array[(ServoReg1 - ((ServoReg1/100) * 100))/10];
    8724:	d4200417 	ldw	r16,-32752(gp)
    8728:	d0a00943 	ldbu	r2,-32731(gp)
    872c:	14403fcc 	andi	r17,r2,255
    8730:	d0a00943 	ldbu	r2,-32731(gp)
    8734:	10803fcc 	andi	r2,r2,255
    8738:	01401904 	movi	r5,100
    873c:	1009883a 	mov	r4,r2
    8740:	00089280 	call	8928 <__udivsi3>
    8744:	10803fcc 	andi	r2,r2,255
    8748:	017fe704 	movi	r5,-100
    874c:	1009883a 	mov	r4,r2
    8750:	00089e40 	call	89e4 <__mulsi3>
    8754:	8885883a 	add	r2,r17,r2
    8758:	01400284 	movi	r5,10
    875c:	1009883a 	mov	r4,r2
    8760:	00088300 	call	8830 <__divsi3>
    8764:	e0fffb04 	addi	r3,fp,-20
    8768:	1885883a 	add	r2,r3,r2
    876c:	10800003 	ldbu	r2,0(r2)
    8770:	10803fcc 	andi	r2,r2,255
    8774:	1080201c 	xori	r2,r2,128
    8778:	10bfe004 	addi	r2,r2,-128
    877c:	80800015 	stw	r2,0(r16)
       *HEX0 = HEX_Array[ServoReg1%10];
    8780:	d4200317 	ldw	r16,-32756(gp)
    8784:	d0a00943 	ldbu	r2,-32731(gp)
    8788:	10803fcc 	andi	r2,r2,255
    878c:	01400284 	movi	r5,10
    8790:	1009883a 	mov	r4,r2
    8794:	000898c0 	call	898c <__umodsi3>
    8798:	10803fcc 	andi	r2,r2,255
    879c:	e0fffb04 	addi	r3,fp,-20
    87a0:	1885883a 	add	r2,r3,r2
    87a4:	10800003 	ldbu	r2,0(r2)
    87a8:	10803fcc 	andi	r2,r2,255
    87ac:	1080201c 	xori	r2,r2,128
    87b0:	10bfe004 	addi	r2,r2,-128
    87b4:	80800015 	stw	r2,0(r16)

//double dabble C edition
		while(1);
    87b8:	003fff06 	br	87b8 <_gp+0xffff2788>

000087bc <__fixunsdfsi>:
    87bc:	defffd04 	addi	sp,sp,-12
    87c0:	000d883a 	mov	r6,zero
    87c4:	01d07834 	movhi	r7,16864
    87c8:	dc400115 	stw	r17,4(sp)
    87cc:	dc000015 	stw	r16,0(sp)
    87d0:	dfc00215 	stw	ra,8(sp)
    87d4:	2023883a 	mov	r17,r4
    87d8:	2821883a 	mov	r16,r5
    87dc:	00092b80 	call	92b8 <__gedf2>
    87e0:	1000080e 	bge	r2,zero,8804 <__fixunsdfsi+0x48>
    87e4:	8809883a 	mov	r4,r17
    87e8:	800b883a 	mov	r5,r16
    87ec:	000a4fc0 	call	a4fc <__fixdfsi>
    87f0:	dfc00217 	ldw	ra,8(sp)
    87f4:	dc400117 	ldw	r17,4(sp)
    87f8:	dc000017 	ldw	r16,0(sp)
    87fc:	dec00304 	addi	sp,sp,12
    8800:	f800283a 	ret
    8804:	000d883a 	mov	r6,zero
    8808:	01d07834 	movhi	r7,16864
    880c:	8809883a 	mov	r4,r17
    8810:	800b883a 	mov	r5,r16
    8814:	0009c000 	call	9c00 <__subdf3>
    8818:	180b883a 	mov	r5,r3
    881c:	1009883a 	mov	r4,r2
    8820:	000a4fc0 	call	a4fc <__fixdfsi>
    8824:	00e00034 	movhi	r3,32768
    8828:	10c5883a 	add	r2,r2,r3
    882c:	003ff006 	br	87f0 <_gp+0xffff27c0>

00008830 <__divsi3>:
    8830:	20001b16 	blt	r4,zero,88a0 <__divsi3+0x70>
    8834:	000f883a 	mov	r7,zero
    8838:	28001616 	blt	r5,zero,8894 <__divsi3+0x64>
    883c:	200d883a 	mov	r6,r4
    8840:	29001a2e 	bgeu	r5,r4,88ac <__divsi3+0x7c>
    8844:	00800804 	movi	r2,32
    8848:	00c00044 	movi	r3,1
    884c:	00000106 	br	8854 <__divsi3+0x24>
    8850:	10000d26 	beq	r2,zero,8888 <__divsi3+0x58>
    8854:	294b883a 	add	r5,r5,r5
    8858:	10bfffc4 	addi	r2,r2,-1
    885c:	18c7883a 	add	r3,r3,r3
    8860:	293ffb36 	bltu	r5,r4,8850 <_gp+0xffff2820>
    8864:	0005883a 	mov	r2,zero
    8868:	18000726 	beq	r3,zero,8888 <__divsi3+0x58>
    886c:	0005883a 	mov	r2,zero
    8870:	31400236 	bltu	r6,r5,887c <__divsi3+0x4c>
    8874:	314dc83a 	sub	r6,r6,r5
    8878:	10c4b03a 	or	r2,r2,r3
    887c:	1806d07a 	srli	r3,r3,1
    8880:	280ad07a 	srli	r5,r5,1
    8884:	183ffa1e 	bne	r3,zero,8870 <_gp+0xffff2840>
    8888:	38000126 	beq	r7,zero,8890 <__divsi3+0x60>
    888c:	0085c83a 	sub	r2,zero,r2
    8890:	f800283a 	ret
    8894:	014bc83a 	sub	r5,zero,r5
    8898:	39c0005c 	xori	r7,r7,1
    889c:	003fe706 	br	883c <_gp+0xffff280c>
    88a0:	0109c83a 	sub	r4,zero,r4
    88a4:	01c00044 	movi	r7,1
    88a8:	003fe306 	br	8838 <_gp+0xffff2808>
    88ac:	00c00044 	movi	r3,1
    88b0:	003fee06 	br	886c <_gp+0xffff283c>

000088b4 <__modsi3>:
    88b4:	20001716 	blt	r4,zero,8914 <__modsi3+0x60>
    88b8:	000f883a 	mov	r7,zero
    88bc:	2005883a 	mov	r2,r4
    88c0:	28001216 	blt	r5,zero,890c <__modsi3+0x58>
    88c4:	2900162e 	bgeu	r5,r4,8920 <__modsi3+0x6c>
    88c8:	01800804 	movi	r6,32
    88cc:	00c00044 	movi	r3,1
    88d0:	00000106 	br	88d8 <__modsi3+0x24>
    88d4:	30000a26 	beq	r6,zero,8900 <__modsi3+0x4c>
    88d8:	294b883a 	add	r5,r5,r5
    88dc:	31bfffc4 	addi	r6,r6,-1
    88e0:	18c7883a 	add	r3,r3,r3
    88e4:	293ffb36 	bltu	r5,r4,88d4 <_gp+0xffff28a4>
    88e8:	18000526 	beq	r3,zero,8900 <__modsi3+0x4c>
    88ec:	1806d07a 	srli	r3,r3,1
    88f0:	11400136 	bltu	r2,r5,88f8 <__modsi3+0x44>
    88f4:	1145c83a 	sub	r2,r2,r5
    88f8:	280ad07a 	srli	r5,r5,1
    88fc:	183ffb1e 	bne	r3,zero,88ec <_gp+0xffff28bc>
    8900:	38000126 	beq	r7,zero,8908 <__modsi3+0x54>
    8904:	0085c83a 	sub	r2,zero,r2
    8908:	f800283a 	ret
    890c:	014bc83a 	sub	r5,zero,r5
    8910:	003fec06 	br	88c4 <_gp+0xffff2894>
    8914:	0109c83a 	sub	r4,zero,r4
    8918:	01c00044 	movi	r7,1
    891c:	003fe706 	br	88bc <_gp+0xffff288c>
    8920:	00c00044 	movi	r3,1
    8924:	003ff106 	br	88ec <_gp+0xffff28bc>

00008928 <__udivsi3>:
    8928:	200d883a 	mov	r6,r4
    892c:	2900152e 	bgeu	r5,r4,8984 <__udivsi3+0x5c>
    8930:	28001416 	blt	r5,zero,8984 <__udivsi3+0x5c>
    8934:	00800804 	movi	r2,32
    8938:	00c00044 	movi	r3,1
    893c:	00000206 	br	8948 <__udivsi3+0x20>
    8940:	10000e26 	beq	r2,zero,897c <__udivsi3+0x54>
    8944:	28000516 	blt	r5,zero,895c <__udivsi3+0x34>
    8948:	294b883a 	add	r5,r5,r5
    894c:	10bfffc4 	addi	r2,r2,-1
    8950:	18c7883a 	add	r3,r3,r3
    8954:	293ffa36 	bltu	r5,r4,8940 <_gp+0xffff2910>
    8958:	18000826 	beq	r3,zero,897c <__udivsi3+0x54>
    895c:	0005883a 	mov	r2,zero
    8960:	31400236 	bltu	r6,r5,896c <__udivsi3+0x44>
    8964:	314dc83a 	sub	r6,r6,r5
    8968:	10c4b03a 	or	r2,r2,r3
    896c:	1806d07a 	srli	r3,r3,1
    8970:	280ad07a 	srli	r5,r5,1
    8974:	183ffa1e 	bne	r3,zero,8960 <_gp+0xffff2930>
    8978:	f800283a 	ret
    897c:	0005883a 	mov	r2,zero
    8980:	f800283a 	ret
    8984:	00c00044 	movi	r3,1
    8988:	003ff406 	br	895c <_gp+0xffff292c>

0000898c <__umodsi3>:
    898c:	2005883a 	mov	r2,r4
    8990:	2900122e 	bgeu	r5,r4,89dc <__umodsi3+0x50>
    8994:	28001116 	blt	r5,zero,89dc <__umodsi3+0x50>
    8998:	01800804 	movi	r6,32
    899c:	00c00044 	movi	r3,1
    89a0:	00000206 	br	89ac <__umodsi3+0x20>
    89a4:	30000c26 	beq	r6,zero,89d8 <__umodsi3+0x4c>
    89a8:	28000516 	blt	r5,zero,89c0 <__umodsi3+0x34>
    89ac:	294b883a 	add	r5,r5,r5
    89b0:	31bfffc4 	addi	r6,r6,-1
    89b4:	18c7883a 	add	r3,r3,r3
    89b8:	293ffa36 	bltu	r5,r4,89a4 <_gp+0xffff2974>
    89bc:	18000626 	beq	r3,zero,89d8 <__umodsi3+0x4c>
    89c0:	1806d07a 	srli	r3,r3,1
    89c4:	11400136 	bltu	r2,r5,89cc <__umodsi3+0x40>
    89c8:	1145c83a 	sub	r2,r2,r5
    89cc:	280ad07a 	srli	r5,r5,1
    89d0:	183ffb1e 	bne	r3,zero,89c0 <_gp+0xffff2990>
    89d4:	f800283a 	ret
    89d8:	f800283a 	ret
    89dc:	00c00044 	movi	r3,1
    89e0:	003ff706 	br	89c0 <_gp+0xffff2990>

000089e4 <__mulsi3>:
    89e4:	0005883a 	mov	r2,zero
    89e8:	20000726 	beq	r4,zero,8a08 <__mulsi3+0x24>
    89ec:	20c0004c 	andi	r3,r4,1
    89f0:	2008d07a 	srli	r4,r4,1
    89f4:	18000126 	beq	r3,zero,89fc <__mulsi3+0x18>
    89f8:	1145883a 	add	r2,r2,r5
    89fc:	294b883a 	add	r5,r5,r5
    8a00:	203ffa1e 	bne	r4,zero,89ec <_gp+0xffff29bc>
    8a04:	f800283a 	ret
    8a08:	f800283a 	ret

00008a0c <__adddf3>:
    8a0c:	02c00434 	movhi	r11,16
    8a10:	5affffc4 	addi	r11,r11,-1
    8a14:	2806d7fa 	srli	r3,r5,31
    8a18:	2ad4703a 	and	r10,r5,r11
    8a1c:	3ad2703a 	and	r9,r7,r11
    8a20:	3804d53a 	srli	r2,r7,20
    8a24:	3018d77a 	srli	r12,r6,29
    8a28:	280ad53a 	srli	r5,r5,20
    8a2c:	501490fa 	slli	r10,r10,3
    8a30:	2010d77a 	srli	r8,r4,29
    8a34:	481290fa 	slli	r9,r9,3
    8a38:	380ed7fa 	srli	r7,r7,31
    8a3c:	defffb04 	addi	sp,sp,-20
    8a40:	dc800215 	stw	r18,8(sp)
    8a44:	dc400115 	stw	r17,4(sp)
    8a48:	dc000015 	stw	r16,0(sp)
    8a4c:	dfc00415 	stw	ra,16(sp)
    8a50:	dcc00315 	stw	r19,12(sp)
    8a54:	1c803fcc 	andi	r18,r3,255
    8a58:	2c01ffcc 	andi	r16,r5,2047
    8a5c:	5210b03a 	or	r8,r10,r8
    8a60:	202290fa 	slli	r17,r4,3
    8a64:	1081ffcc 	andi	r2,r2,2047
    8a68:	4b12b03a 	or	r9,r9,r12
    8a6c:	300c90fa 	slli	r6,r6,3
    8a70:	91c07526 	beq	r18,r7,8c48 <__adddf3+0x23c>
    8a74:	8087c83a 	sub	r3,r16,r2
    8a78:	00c0ab0e 	bge	zero,r3,8d28 <__adddf3+0x31c>
    8a7c:	10002a1e 	bne	r2,zero,8b28 <__adddf3+0x11c>
    8a80:	4984b03a 	or	r2,r9,r6
    8a84:	1000961e 	bne	r2,zero,8ce0 <__adddf3+0x2d4>
    8a88:	888001cc 	andi	r2,r17,7
    8a8c:	10000726 	beq	r2,zero,8aac <__adddf3+0xa0>
    8a90:	888003cc 	andi	r2,r17,15
    8a94:	00c00104 	movi	r3,4
    8a98:	10c00426 	beq	r2,r3,8aac <__adddf3+0xa0>
    8a9c:	88c7883a 	add	r3,r17,r3
    8aa0:	1c63803a 	cmpltu	r17,r3,r17
    8aa4:	4451883a 	add	r8,r8,r17
    8aa8:	1823883a 	mov	r17,r3
    8aac:	4080202c 	andhi	r2,r8,128
    8ab0:	10005926 	beq	r2,zero,8c18 <__adddf3+0x20c>
    8ab4:	84000044 	addi	r16,r16,1
    8ab8:	0081ffc4 	movi	r2,2047
    8abc:	8080ba26 	beq	r16,r2,8da8 <__adddf3+0x39c>
    8ac0:	00bfe034 	movhi	r2,65408
    8ac4:	10bfffc4 	addi	r2,r2,-1
    8ac8:	4090703a 	and	r8,r8,r2
    8acc:	4004977a 	slli	r2,r8,29
    8ad0:	4010927a 	slli	r8,r8,9
    8ad4:	8822d0fa 	srli	r17,r17,3
    8ad8:	8401ffcc 	andi	r16,r16,2047
    8adc:	4010d33a 	srli	r8,r8,12
    8ae0:	9007883a 	mov	r3,r18
    8ae4:	1444b03a 	or	r2,r2,r17
    8ae8:	8401ffcc 	andi	r16,r16,2047
    8aec:	8020953a 	slli	r16,r16,20
    8af0:	18c03fcc 	andi	r3,r3,255
    8af4:	01000434 	movhi	r4,16
    8af8:	213fffc4 	addi	r4,r4,-1
    8afc:	180697fa 	slli	r3,r3,31
    8b00:	4110703a 	and	r8,r8,r4
    8b04:	4410b03a 	or	r8,r8,r16
    8b08:	40c6b03a 	or	r3,r8,r3
    8b0c:	dfc00417 	ldw	ra,16(sp)
    8b10:	dcc00317 	ldw	r19,12(sp)
    8b14:	dc800217 	ldw	r18,8(sp)
    8b18:	dc400117 	ldw	r17,4(sp)
    8b1c:	dc000017 	ldw	r16,0(sp)
    8b20:	dec00504 	addi	sp,sp,20
    8b24:	f800283a 	ret
    8b28:	0081ffc4 	movi	r2,2047
    8b2c:	80bfd626 	beq	r16,r2,8a88 <_gp+0xffff2a58>
    8b30:	4a402034 	orhi	r9,r9,128
    8b34:	00800e04 	movi	r2,56
    8b38:	10c09f16 	blt	r2,r3,8db8 <__adddf3+0x3ac>
    8b3c:	008007c4 	movi	r2,31
    8b40:	10c0c216 	blt	r2,r3,8e4c <__adddf3+0x440>
    8b44:	00800804 	movi	r2,32
    8b48:	10c5c83a 	sub	r2,r2,r3
    8b4c:	488a983a 	sll	r5,r9,r2
    8b50:	30c8d83a 	srl	r4,r6,r3
    8b54:	3084983a 	sll	r2,r6,r2
    8b58:	48c6d83a 	srl	r3,r9,r3
    8b5c:	290cb03a 	or	r6,r5,r4
    8b60:	1004c03a 	cmpne	r2,r2,zero
    8b64:	308cb03a 	or	r6,r6,r2
    8b68:	898dc83a 	sub	r6,r17,r6
    8b6c:	89a3803a 	cmpltu	r17,r17,r6
    8b70:	40d1c83a 	sub	r8,r8,r3
    8b74:	4451c83a 	sub	r8,r8,r17
    8b78:	3023883a 	mov	r17,r6
    8b7c:	4080202c 	andhi	r2,r8,128
    8b80:	10002326 	beq	r2,zero,8c10 <__adddf3+0x204>
    8b84:	04c02034 	movhi	r19,128
    8b88:	9cffffc4 	addi	r19,r19,-1
    8b8c:	44e6703a 	and	r19,r8,r19
    8b90:	98007626 	beq	r19,zero,8d6c <__adddf3+0x360>
    8b94:	9809883a 	mov	r4,r19
    8b98:	000a6580 	call	a658 <__clzsi2>
    8b9c:	10fffe04 	addi	r3,r2,-8
    8ba0:	010007c4 	movi	r4,31
    8ba4:	20c07716 	blt	r4,r3,8d84 <__adddf3+0x378>
    8ba8:	00800804 	movi	r2,32
    8bac:	10c5c83a 	sub	r2,r2,r3
    8bb0:	8884d83a 	srl	r2,r17,r2
    8bb4:	98d0983a 	sll	r8,r19,r3
    8bb8:	88e2983a 	sll	r17,r17,r3
    8bbc:	1204b03a 	or	r2,r2,r8
    8bc0:	1c007416 	blt	r3,r16,8d94 <__adddf3+0x388>
    8bc4:	1c21c83a 	sub	r16,r3,r16
    8bc8:	82000044 	addi	r8,r16,1
    8bcc:	00c007c4 	movi	r3,31
    8bd0:	1a009116 	blt	r3,r8,8e18 <__adddf3+0x40c>
    8bd4:	00c00804 	movi	r3,32
    8bd8:	1a07c83a 	sub	r3,r3,r8
    8bdc:	8a08d83a 	srl	r4,r17,r8
    8be0:	88e2983a 	sll	r17,r17,r3
    8be4:	10c6983a 	sll	r3,r2,r3
    8be8:	1210d83a 	srl	r8,r2,r8
    8bec:	8804c03a 	cmpne	r2,r17,zero
    8bf0:	1906b03a 	or	r3,r3,r4
    8bf4:	18a2b03a 	or	r17,r3,r2
    8bf8:	0021883a 	mov	r16,zero
    8bfc:	003fa206 	br	8a88 <_gp+0xffff2a58>
    8c00:	1890b03a 	or	r8,r3,r2
    8c04:	40017d26 	beq	r8,zero,91fc <__adddf3+0x7f0>
    8c08:	1011883a 	mov	r8,r2
    8c0c:	1823883a 	mov	r17,r3
    8c10:	888001cc 	andi	r2,r17,7
    8c14:	103f9e1e 	bne	r2,zero,8a90 <_gp+0xffff2a60>
    8c18:	4004977a 	slli	r2,r8,29
    8c1c:	8822d0fa 	srli	r17,r17,3
    8c20:	4010d0fa 	srli	r8,r8,3
    8c24:	9007883a 	mov	r3,r18
    8c28:	1444b03a 	or	r2,r2,r17
    8c2c:	0101ffc4 	movi	r4,2047
    8c30:	81002426 	beq	r16,r4,8cc4 <__adddf3+0x2b8>
    8c34:	8120703a 	and	r16,r16,r4
    8c38:	01000434 	movhi	r4,16
    8c3c:	213fffc4 	addi	r4,r4,-1
    8c40:	4110703a 	and	r8,r8,r4
    8c44:	003fa806 	br	8ae8 <_gp+0xffff2ab8>
    8c48:	8089c83a 	sub	r4,r16,r2
    8c4c:	01005e0e 	bge	zero,r4,8dc8 <__adddf3+0x3bc>
    8c50:	10002b26 	beq	r2,zero,8d00 <__adddf3+0x2f4>
    8c54:	0081ffc4 	movi	r2,2047
    8c58:	80bf8b26 	beq	r16,r2,8a88 <_gp+0xffff2a58>
    8c5c:	4a402034 	orhi	r9,r9,128
    8c60:	00800e04 	movi	r2,56
    8c64:	1100a40e 	bge	r2,r4,8ef8 <__adddf3+0x4ec>
    8c68:	498cb03a 	or	r6,r9,r6
    8c6c:	300ac03a 	cmpne	r5,r6,zero
    8c70:	0013883a 	mov	r9,zero
    8c74:	2c4b883a 	add	r5,r5,r17
    8c78:	2c63803a 	cmpltu	r17,r5,r17
    8c7c:	4a11883a 	add	r8,r9,r8
    8c80:	8a11883a 	add	r8,r17,r8
    8c84:	2823883a 	mov	r17,r5
    8c88:	4080202c 	andhi	r2,r8,128
    8c8c:	103fe026 	beq	r2,zero,8c10 <_gp+0xffff2be0>
    8c90:	84000044 	addi	r16,r16,1
    8c94:	0081ffc4 	movi	r2,2047
    8c98:	8080d226 	beq	r16,r2,8fe4 <__adddf3+0x5d8>
    8c9c:	00bfe034 	movhi	r2,65408
    8ca0:	10bfffc4 	addi	r2,r2,-1
    8ca4:	4090703a 	and	r8,r8,r2
    8ca8:	880ad07a 	srli	r5,r17,1
    8cac:	400897fa 	slli	r4,r8,31
    8cb0:	88c0004c 	andi	r3,r17,1
    8cb4:	28e2b03a 	or	r17,r5,r3
    8cb8:	4010d07a 	srli	r8,r8,1
    8cbc:	2462b03a 	or	r17,r4,r17
    8cc0:	003f7106 	br	8a88 <_gp+0xffff2a58>
    8cc4:	4088b03a 	or	r4,r8,r2
    8cc8:	20014526 	beq	r4,zero,91e0 <__adddf3+0x7d4>
    8ccc:	01000434 	movhi	r4,16
    8cd0:	42000234 	orhi	r8,r8,8
    8cd4:	213fffc4 	addi	r4,r4,-1
    8cd8:	4110703a 	and	r8,r8,r4
    8cdc:	003f8206 	br	8ae8 <_gp+0xffff2ab8>
    8ce0:	18ffffc4 	addi	r3,r3,-1
    8ce4:	1800491e 	bne	r3,zero,8e0c <__adddf3+0x400>
    8ce8:	898bc83a 	sub	r5,r17,r6
    8cec:	8963803a 	cmpltu	r17,r17,r5
    8cf0:	4251c83a 	sub	r8,r8,r9
    8cf4:	4451c83a 	sub	r8,r8,r17
    8cf8:	2823883a 	mov	r17,r5
    8cfc:	003f9f06 	br	8b7c <_gp+0xffff2b4c>
    8d00:	4984b03a 	or	r2,r9,r6
    8d04:	103f6026 	beq	r2,zero,8a88 <_gp+0xffff2a58>
    8d08:	213fffc4 	addi	r4,r4,-1
    8d0c:	2000931e 	bne	r4,zero,8f5c <__adddf3+0x550>
    8d10:	898d883a 	add	r6,r17,r6
    8d14:	3463803a 	cmpltu	r17,r6,r17
    8d18:	4251883a 	add	r8,r8,r9
    8d1c:	8a11883a 	add	r8,r17,r8
    8d20:	3023883a 	mov	r17,r6
    8d24:	003fd806 	br	8c88 <_gp+0xffff2c58>
    8d28:	1800541e 	bne	r3,zero,8e7c <__adddf3+0x470>
    8d2c:	80800044 	addi	r2,r16,1
    8d30:	1081ffcc 	andi	r2,r2,2047
    8d34:	00c00044 	movi	r3,1
    8d38:	1880a00e 	bge	r3,r2,8fbc <__adddf3+0x5b0>
    8d3c:	8989c83a 	sub	r4,r17,r6
    8d40:	8905803a 	cmpltu	r2,r17,r4
    8d44:	4267c83a 	sub	r19,r8,r9
    8d48:	98a7c83a 	sub	r19,r19,r2
    8d4c:	9880202c 	andhi	r2,r19,128
    8d50:	10006326 	beq	r2,zero,8ee0 <__adddf3+0x4d4>
    8d54:	3463c83a 	sub	r17,r6,r17
    8d58:	4a07c83a 	sub	r3,r9,r8
    8d5c:	344d803a 	cmpltu	r6,r6,r17
    8d60:	19a7c83a 	sub	r19,r3,r6
    8d64:	3825883a 	mov	r18,r7
    8d68:	983f8a1e 	bne	r19,zero,8b94 <_gp+0xffff2b64>
    8d6c:	8809883a 	mov	r4,r17
    8d70:	000a6580 	call	a658 <__clzsi2>
    8d74:	10800804 	addi	r2,r2,32
    8d78:	10fffe04 	addi	r3,r2,-8
    8d7c:	010007c4 	movi	r4,31
    8d80:	20ff890e 	bge	r4,r3,8ba8 <_gp+0xffff2b78>
    8d84:	10bff604 	addi	r2,r2,-40
    8d88:	8884983a 	sll	r2,r17,r2
    8d8c:	0023883a 	mov	r17,zero
    8d90:	1c3f8c0e 	bge	r3,r16,8bc4 <_gp+0xffff2b94>
    8d94:	023fe034 	movhi	r8,65408
    8d98:	423fffc4 	addi	r8,r8,-1
    8d9c:	80e1c83a 	sub	r16,r16,r3
    8da0:	1210703a 	and	r8,r2,r8
    8da4:	003f3806 	br	8a88 <_gp+0xffff2a58>
    8da8:	9007883a 	mov	r3,r18
    8dac:	0011883a 	mov	r8,zero
    8db0:	0005883a 	mov	r2,zero
    8db4:	003f4c06 	br	8ae8 <_gp+0xffff2ab8>
    8db8:	498cb03a 	or	r6,r9,r6
    8dbc:	300cc03a 	cmpne	r6,r6,zero
    8dc0:	0007883a 	mov	r3,zero
    8dc4:	003f6806 	br	8b68 <_gp+0xffff2b38>
    8dc8:	20009c1e 	bne	r4,zero,903c <__adddf3+0x630>
    8dcc:	80800044 	addi	r2,r16,1
    8dd0:	1141ffcc 	andi	r5,r2,2047
    8dd4:	01000044 	movi	r4,1
    8dd8:	2140670e 	bge	r4,r5,8f78 <__adddf3+0x56c>
    8ddc:	0101ffc4 	movi	r4,2047
    8de0:	11007f26 	beq	r2,r4,8fe0 <__adddf3+0x5d4>
    8de4:	898d883a 	add	r6,r17,r6
    8de8:	4247883a 	add	r3,r8,r9
    8dec:	3451803a 	cmpltu	r8,r6,r17
    8df0:	40d1883a 	add	r8,r8,r3
    8df4:	402297fa 	slli	r17,r8,31
    8df8:	300cd07a 	srli	r6,r6,1
    8dfc:	4010d07a 	srli	r8,r8,1
    8e00:	1021883a 	mov	r16,r2
    8e04:	89a2b03a 	or	r17,r17,r6
    8e08:	003f1f06 	br	8a88 <_gp+0xffff2a58>
    8e0c:	0081ffc4 	movi	r2,2047
    8e10:	80bf481e 	bne	r16,r2,8b34 <_gp+0xffff2b04>
    8e14:	003f1c06 	br	8a88 <_gp+0xffff2a58>
    8e18:	843ff844 	addi	r16,r16,-31
    8e1c:	01000804 	movi	r4,32
    8e20:	1406d83a 	srl	r3,r2,r16
    8e24:	41005026 	beq	r8,r4,8f68 <__adddf3+0x55c>
    8e28:	01001004 	movi	r4,64
    8e2c:	2211c83a 	sub	r8,r4,r8
    8e30:	1204983a 	sll	r2,r2,r8
    8e34:	88a2b03a 	or	r17,r17,r2
    8e38:	8822c03a 	cmpne	r17,r17,zero
    8e3c:	1c62b03a 	or	r17,r3,r17
    8e40:	0011883a 	mov	r8,zero
    8e44:	0021883a 	mov	r16,zero
    8e48:	003f7106 	br	8c10 <_gp+0xffff2be0>
    8e4c:	193ff804 	addi	r4,r3,-32
    8e50:	00800804 	movi	r2,32
    8e54:	4908d83a 	srl	r4,r9,r4
    8e58:	18804526 	beq	r3,r2,8f70 <__adddf3+0x564>
    8e5c:	00801004 	movi	r2,64
    8e60:	10c5c83a 	sub	r2,r2,r3
    8e64:	4886983a 	sll	r3,r9,r2
    8e68:	198cb03a 	or	r6,r3,r6
    8e6c:	300cc03a 	cmpne	r6,r6,zero
    8e70:	218cb03a 	or	r6,r4,r6
    8e74:	0007883a 	mov	r3,zero
    8e78:	003f3b06 	br	8b68 <_gp+0xffff2b38>
    8e7c:	80002a26 	beq	r16,zero,8f28 <__adddf3+0x51c>
    8e80:	0101ffc4 	movi	r4,2047
    8e84:	11006826 	beq	r2,r4,9028 <__adddf3+0x61c>
    8e88:	00c7c83a 	sub	r3,zero,r3
    8e8c:	42002034 	orhi	r8,r8,128
    8e90:	01000e04 	movi	r4,56
    8e94:	20c07c16 	blt	r4,r3,9088 <__adddf3+0x67c>
    8e98:	010007c4 	movi	r4,31
    8e9c:	20c0da16 	blt	r4,r3,9208 <__adddf3+0x7fc>
    8ea0:	01000804 	movi	r4,32
    8ea4:	20c9c83a 	sub	r4,r4,r3
    8ea8:	4114983a 	sll	r10,r8,r4
    8eac:	88cad83a 	srl	r5,r17,r3
    8eb0:	8908983a 	sll	r4,r17,r4
    8eb4:	40c6d83a 	srl	r3,r8,r3
    8eb8:	5162b03a 	or	r17,r10,r5
    8ebc:	2008c03a 	cmpne	r4,r4,zero
    8ec0:	8922b03a 	or	r17,r17,r4
    8ec4:	3463c83a 	sub	r17,r6,r17
    8ec8:	48c7c83a 	sub	r3,r9,r3
    8ecc:	344d803a 	cmpltu	r6,r6,r17
    8ed0:	1991c83a 	sub	r8,r3,r6
    8ed4:	1021883a 	mov	r16,r2
    8ed8:	3825883a 	mov	r18,r7
    8edc:	003f2706 	br	8b7c <_gp+0xffff2b4c>
    8ee0:	24d0b03a 	or	r8,r4,r19
    8ee4:	40001b1e 	bne	r8,zero,8f54 <__adddf3+0x548>
    8ee8:	0005883a 	mov	r2,zero
    8eec:	0007883a 	mov	r3,zero
    8ef0:	0021883a 	mov	r16,zero
    8ef4:	003f4d06 	br	8c2c <_gp+0xffff2bfc>
    8ef8:	008007c4 	movi	r2,31
    8efc:	11003c16 	blt	r2,r4,8ff0 <__adddf3+0x5e4>
    8f00:	00800804 	movi	r2,32
    8f04:	1105c83a 	sub	r2,r2,r4
    8f08:	488e983a 	sll	r7,r9,r2
    8f0c:	310ad83a 	srl	r5,r6,r4
    8f10:	3084983a 	sll	r2,r6,r2
    8f14:	4912d83a 	srl	r9,r9,r4
    8f18:	394ab03a 	or	r5,r7,r5
    8f1c:	1004c03a 	cmpne	r2,r2,zero
    8f20:	288ab03a 	or	r5,r5,r2
    8f24:	003f5306 	br	8c74 <_gp+0xffff2c44>
    8f28:	4448b03a 	or	r4,r8,r17
    8f2c:	20003e26 	beq	r4,zero,9028 <__adddf3+0x61c>
    8f30:	00c6303a 	nor	r3,zero,r3
    8f34:	18003a1e 	bne	r3,zero,9020 <__adddf3+0x614>
    8f38:	3463c83a 	sub	r17,r6,r17
    8f3c:	4a07c83a 	sub	r3,r9,r8
    8f40:	344d803a 	cmpltu	r6,r6,r17
    8f44:	1991c83a 	sub	r8,r3,r6
    8f48:	1021883a 	mov	r16,r2
    8f4c:	3825883a 	mov	r18,r7
    8f50:	003f0a06 	br	8b7c <_gp+0xffff2b4c>
    8f54:	2023883a 	mov	r17,r4
    8f58:	003f0d06 	br	8b90 <_gp+0xffff2b60>
    8f5c:	0081ffc4 	movi	r2,2047
    8f60:	80bf3f1e 	bne	r16,r2,8c60 <_gp+0xffff2c30>
    8f64:	003ec806 	br	8a88 <_gp+0xffff2a58>
    8f68:	0005883a 	mov	r2,zero
    8f6c:	003fb106 	br	8e34 <_gp+0xffff2e04>
    8f70:	0007883a 	mov	r3,zero
    8f74:	003fbc06 	br	8e68 <_gp+0xffff2e38>
    8f78:	4444b03a 	or	r2,r8,r17
    8f7c:	8000871e 	bne	r16,zero,919c <__adddf3+0x790>
    8f80:	1000ba26 	beq	r2,zero,926c <__adddf3+0x860>
    8f84:	4984b03a 	or	r2,r9,r6
    8f88:	103ebf26 	beq	r2,zero,8a88 <_gp+0xffff2a58>
    8f8c:	8985883a 	add	r2,r17,r6
    8f90:	4247883a 	add	r3,r8,r9
    8f94:	1451803a 	cmpltu	r8,r2,r17
    8f98:	40d1883a 	add	r8,r8,r3
    8f9c:	40c0202c 	andhi	r3,r8,128
    8fa0:	1023883a 	mov	r17,r2
    8fa4:	183f1a26 	beq	r3,zero,8c10 <_gp+0xffff2be0>
    8fa8:	00bfe034 	movhi	r2,65408
    8fac:	10bfffc4 	addi	r2,r2,-1
    8fb0:	2021883a 	mov	r16,r4
    8fb4:	4090703a 	and	r8,r8,r2
    8fb8:	003eb306 	br	8a88 <_gp+0xffff2a58>
    8fbc:	4444b03a 	or	r2,r8,r17
    8fc0:	8000291e 	bne	r16,zero,9068 <__adddf3+0x65c>
    8fc4:	10004b1e 	bne	r2,zero,90f4 <__adddf3+0x6e8>
    8fc8:	4990b03a 	or	r8,r9,r6
    8fcc:	40008b26 	beq	r8,zero,91fc <__adddf3+0x7f0>
    8fd0:	4811883a 	mov	r8,r9
    8fd4:	3023883a 	mov	r17,r6
    8fd8:	3825883a 	mov	r18,r7
    8fdc:	003eaa06 	br	8a88 <_gp+0xffff2a58>
    8fe0:	1021883a 	mov	r16,r2
    8fe4:	0011883a 	mov	r8,zero
    8fe8:	0005883a 	mov	r2,zero
    8fec:	003f0f06 	br	8c2c <_gp+0xffff2bfc>
    8ff0:	217ff804 	addi	r5,r4,-32
    8ff4:	00800804 	movi	r2,32
    8ff8:	494ad83a 	srl	r5,r9,r5
    8ffc:	20807d26 	beq	r4,r2,91f4 <__adddf3+0x7e8>
    9000:	00801004 	movi	r2,64
    9004:	1109c83a 	sub	r4,r2,r4
    9008:	4912983a 	sll	r9,r9,r4
    900c:	498cb03a 	or	r6,r9,r6
    9010:	300cc03a 	cmpne	r6,r6,zero
    9014:	298ab03a 	or	r5,r5,r6
    9018:	0013883a 	mov	r9,zero
    901c:	003f1506 	br	8c74 <_gp+0xffff2c44>
    9020:	0101ffc4 	movi	r4,2047
    9024:	113f9a1e 	bne	r2,r4,8e90 <_gp+0xffff2e60>
    9028:	4811883a 	mov	r8,r9
    902c:	3023883a 	mov	r17,r6
    9030:	1021883a 	mov	r16,r2
    9034:	3825883a 	mov	r18,r7
    9038:	003e9306 	br	8a88 <_gp+0xffff2a58>
    903c:	8000161e 	bne	r16,zero,9098 <__adddf3+0x68c>
    9040:	444ab03a 	or	r5,r8,r17
    9044:	28005126 	beq	r5,zero,918c <__adddf3+0x780>
    9048:	0108303a 	nor	r4,zero,r4
    904c:	20004d1e 	bne	r4,zero,9184 <__adddf3+0x778>
    9050:	89a3883a 	add	r17,r17,r6
    9054:	4253883a 	add	r9,r8,r9
    9058:	898d803a 	cmpltu	r6,r17,r6
    905c:	3251883a 	add	r8,r6,r9
    9060:	1021883a 	mov	r16,r2
    9064:	003f0806 	br	8c88 <_gp+0xffff2c58>
    9068:	1000301e 	bne	r2,zero,912c <__adddf3+0x720>
    906c:	4984b03a 	or	r2,r9,r6
    9070:	10007126 	beq	r2,zero,9238 <__adddf3+0x82c>
    9074:	4811883a 	mov	r8,r9
    9078:	3023883a 	mov	r17,r6
    907c:	3825883a 	mov	r18,r7
    9080:	0401ffc4 	movi	r16,2047
    9084:	003e8006 	br	8a88 <_gp+0xffff2a58>
    9088:	4462b03a 	or	r17,r8,r17
    908c:	8822c03a 	cmpne	r17,r17,zero
    9090:	0007883a 	mov	r3,zero
    9094:	003f8b06 	br	8ec4 <_gp+0xffff2e94>
    9098:	0141ffc4 	movi	r5,2047
    909c:	11403b26 	beq	r2,r5,918c <__adddf3+0x780>
    90a0:	0109c83a 	sub	r4,zero,r4
    90a4:	42002034 	orhi	r8,r8,128
    90a8:	01400e04 	movi	r5,56
    90ac:	29006716 	blt	r5,r4,924c <__adddf3+0x840>
    90b0:	014007c4 	movi	r5,31
    90b4:	29007016 	blt	r5,r4,9278 <__adddf3+0x86c>
    90b8:	01400804 	movi	r5,32
    90bc:	290bc83a 	sub	r5,r5,r4
    90c0:	4154983a 	sll	r10,r8,r5
    90c4:	890ed83a 	srl	r7,r17,r4
    90c8:	894a983a 	sll	r5,r17,r5
    90cc:	4108d83a 	srl	r4,r8,r4
    90d0:	51e2b03a 	or	r17,r10,r7
    90d4:	280ac03a 	cmpne	r5,r5,zero
    90d8:	8962b03a 	or	r17,r17,r5
    90dc:	89a3883a 	add	r17,r17,r6
    90e0:	2253883a 	add	r9,r4,r9
    90e4:	898d803a 	cmpltu	r6,r17,r6
    90e8:	3251883a 	add	r8,r6,r9
    90ec:	1021883a 	mov	r16,r2
    90f0:	003ee506 	br	8c88 <_gp+0xffff2c58>
    90f4:	4984b03a 	or	r2,r9,r6
    90f8:	103e6326 	beq	r2,zero,8a88 <_gp+0xffff2a58>
    90fc:	8987c83a 	sub	r3,r17,r6
    9100:	88c9803a 	cmpltu	r4,r17,r3
    9104:	4245c83a 	sub	r2,r8,r9
    9108:	1105c83a 	sub	r2,r2,r4
    910c:	1100202c 	andhi	r4,r2,128
    9110:	203ebb26 	beq	r4,zero,8c00 <_gp+0xffff2bd0>
    9114:	3463c83a 	sub	r17,r6,r17
    9118:	4a07c83a 	sub	r3,r9,r8
    911c:	344d803a 	cmpltu	r6,r6,r17
    9120:	1991c83a 	sub	r8,r3,r6
    9124:	3825883a 	mov	r18,r7
    9128:	003e5706 	br	8a88 <_gp+0xffff2a58>
    912c:	4984b03a 	or	r2,r9,r6
    9130:	10002e26 	beq	r2,zero,91ec <__adddf3+0x7e0>
    9134:	4004d0fa 	srli	r2,r8,3
    9138:	8822d0fa 	srli	r17,r17,3
    913c:	4010977a 	slli	r8,r8,29
    9140:	10c0022c 	andhi	r3,r2,8
    9144:	4462b03a 	or	r17,r8,r17
    9148:	18000826 	beq	r3,zero,916c <__adddf3+0x760>
    914c:	4808d0fa 	srli	r4,r9,3
    9150:	20c0022c 	andhi	r3,r4,8
    9154:	1800051e 	bne	r3,zero,916c <__adddf3+0x760>
    9158:	300cd0fa 	srli	r6,r6,3
    915c:	4806977a 	slli	r3,r9,29
    9160:	2005883a 	mov	r2,r4
    9164:	3825883a 	mov	r18,r7
    9168:	19a2b03a 	or	r17,r3,r6
    916c:	8810d77a 	srli	r8,r17,29
    9170:	100490fa 	slli	r2,r2,3
    9174:	882290fa 	slli	r17,r17,3
    9178:	0401ffc4 	movi	r16,2047
    917c:	4090b03a 	or	r8,r8,r2
    9180:	003e4106 	br	8a88 <_gp+0xffff2a58>
    9184:	0141ffc4 	movi	r5,2047
    9188:	117fc71e 	bne	r2,r5,90a8 <_gp+0xffff3078>
    918c:	4811883a 	mov	r8,r9
    9190:	3023883a 	mov	r17,r6
    9194:	1021883a 	mov	r16,r2
    9198:	003e3b06 	br	8a88 <_gp+0xffff2a58>
    919c:	10002f26 	beq	r2,zero,925c <__adddf3+0x850>
    91a0:	4984b03a 	or	r2,r9,r6
    91a4:	10001126 	beq	r2,zero,91ec <__adddf3+0x7e0>
    91a8:	4004d0fa 	srli	r2,r8,3
    91ac:	8822d0fa 	srli	r17,r17,3
    91b0:	4010977a 	slli	r8,r8,29
    91b4:	10c0022c 	andhi	r3,r2,8
    91b8:	4462b03a 	or	r17,r8,r17
    91bc:	183feb26 	beq	r3,zero,916c <_gp+0xffff313c>
    91c0:	4808d0fa 	srli	r4,r9,3
    91c4:	20c0022c 	andhi	r3,r4,8
    91c8:	183fe81e 	bne	r3,zero,916c <_gp+0xffff313c>
    91cc:	300cd0fa 	srli	r6,r6,3
    91d0:	4806977a 	slli	r3,r9,29
    91d4:	2005883a 	mov	r2,r4
    91d8:	19a2b03a 	or	r17,r3,r6
    91dc:	003fe306 	br	916c <_gp+0xffff313c>
    91e0:	0011883a 	mov	r8,zero
    91e4:	0005883a 	mov	r2,zero
    91e8:	003e3f06 	br	8ae8 <_gp+0xffff2ab8>
    91ec:	0401ffc4 	movi	r16,2047
    91f0:	003e2506 	br	8a88 <_gp+0xffff2a58>
    91f4:	0013883a 	mov	r9,zero
    91f8:	003f8406 	br	900c <_gp+0xffff2fdc>
    91fc:	0005883a 	mov	r2,zero
    9200:	0007883a 	mov	r3,zero
    9204:	003e8906 	br	8c2c <_gp+0xffff2bfc>
    9208:	197ff804 	addi	r5,r3,-32
    920c:	01000804 	movi	r4,32
    9210:	414ad83a 	srl	r5,r8,r5
    9214:	19002426 	beq	r3,r4,92a8 <__adddf3+0x89c>
    9218:	01001004 	movi	r4,64
    921c:	20c7c83a 	sub	r3,r4,r3
    9220:	40c6983a 	sll	r3,r8,r3
    9224:	1c46b03a 	or	r3,r3,r17
    9228:	1806c03a 	cmpne	r3,r3,zero
    922c:	28e2b03a 	or	r17,r5,r3
    9230:	0007883a 	mov	r3,zero
    9234:	003f2306 	br	8ec4 <_gp+0xffff2e94>
    9238:	0007883a 	mov	r3,zero
    923c:	5811883a 	mov	r8,r11
    9240:	00bfffc4 	movi	r2,-1
    9244:	0401ffc4 	movi	r16,2047
    9248:	003e7806 	br	8c2c <_gp+0xffff2bfc>
    924c:	4462b03a 	or	r17,r8,r17
    9250:	8822c03a 	cmpne	r17,r17,zero
    9254:	0009883a 	mov	r4,zero
    9258:	003fa006 	br	90dc <_gp+0xffff30ac>
    925c:	4811883a 	mov	r8,r9
    9260:	3023883a 	mov	r17,r6
    9264:	0401ffc4 	movi	r16,2047
    9268:	003e0706 	br	8a88 <_gp+0xffff2a58>
    926c:	4811883a 	mov	r8,r9
    9270:	3023883a 	mov	r17,r6
    9274:	003e0406 	br	8a88 <_gp+0xffff2a58>
    9278:	21fff804 	addi	r7,r4,-32
    927c:	01400804 	movi	r5,32
    9280:	41ced83a 	srl	r7,r8,r7
    9284:	21400a26 	beq	r4,r5,92b0 <__adddf3+0x8a4>
    9288:	01401004 	movi	r5,64
    928c:	2909c83a 	sub	r4,r5,r4
    9290:	4108983a 	sll	r4,r8,r4
    9294:	2448b03a 	or	r4,r4,r17
    9298:	2008c03a 	cmpne	r4,r4,zero
    929c:	3922b03a 	or	r17,r7,r4
    92a0:	0009883a 	mov	r4,zero
    92a4:	003f8d06 	br	90dc <_gp+0xffff30ac>
    92a8:	0007883a 	mov	r3,zero
    92ac:	003fdd06 	br	9224 <_gp+0xffff31f4>
    92b0:	0009883a 	mov	r4,zero
    92b4:	003ff706 	br	9294 <_gp+0xffff3264>

000092b8 <__gedf2>:
    92b8:	2804d53a 	srli	r2,r5,20
    92bc:	3806d53a 	srli	r3,r7,20
    92c0:	02000434 	movhi	r8,16
    92c4:	423fffc4 	addi	r8,r8,-1
    92c8:	1081ffcc 	andi	r2,r2,2047
    92cc:	0241ffc4 	movi	r9,2047
    92d0:	2a14703a 	and	r10,r5,r8
    92d4:	18c1ffcc 	andi	r3,r3,2047
    92d8:	3a10703a 	and	r8,r7,r8
    92dc:	280ad7fa 	srli	r5,r5,31
    92e0:	380ed7fa 	srli	r7,r7,31
    92e4:	12401d26 	beq	r2,r9,935c <__gedf2+0xa4>
    92e8:	0241ffc4 	movi	r9,2047
    92ec:	1a401226 	beq	r3,r9,9338 <__gedf2+0x80>
    92f0:	1000081e 	bne	r2,zero,9314 <__gedf2+0x5c>
    92f4:	2296b03a 	or	r11,r4,r10
    92f8:	5813003a 	cmpeq	r9,r11,zero
    92fc:	1800091e 	bne	r3,zero,9324 <__gedf2+0x6c>
    9300:	3218b03a 	or	r12,r6,r8
    9304:	6000071e 	bne	r12,zero,9324 <__gedf2+0x6c>
    9308:	0005883a 	mov	r2,zero
    930c:	5800101e 	bne	r11,zero,9350 <__gedf2+0x98>
    9310:	f800283a 	ret
    9314:	18000c1e 	bne	r3,zero,9348 <__gedf2+0x90>
    9318:	3212b03a 	or	r9,r6,r8
    931c:	48000c26 	beq	r9,zero,9350 <__gedf2+0x98>
    9320:	0013883a 	mov	r9,zero
    9324:	39c03fcc 	andi	r7,r7,255
    9328:	48000826 	beq	r9,zero,934c <__gedf2+0x94>
    932c:	38000926 	beq	r7,zero,9354 <__gedf2+0x9c>
    9330:	00800044 	movi	r2,1
    9334:	f800283a 	ret
    9338:	3212b03a 	or	r9,r6,r8
    933c:	483fec26 	beq	r9,zero,92f0 <_gp+0xffff32c0>
    9340:	00bfff84 	movi	r2,-2
    9344:	f800283a 	ret
    9348:	39c03fcc 	andi	r7,r7,255
    934c:	29c00626 	beq	r5,r7,9368 <__gedf2+0xb0>
    9350:	283ff726 	beq	r5,zero,9330 <_gp+0xffff3300>
    9354:	00bfffc4 	movi	r2,-1
    9358:	f800283a 	ret
    935c:	2292b03a 	or	r9,r4,r10
    9360:	483fe126 	beq	r9,zero,92e8 <_gp+0xffff32b8>
    9364:	003ff606 	br	9340 <_gp+0xffff3310>
    9368:	18bff916 	blt	r3,r2,9350 <_gp+0xffff3320>
    936c:	10c00316 	blt	r2,r3,937c <__gedf2+0xc4>
    9370:	42bff736 	bltu	r8,r10,9350 <_gp+0xffff3320>
    9374:	52000326 	beq	r10,r8,9384 <__gedf2+0xcc>
    9378:	5200042e 	bgeu	r10,r8,938c <__gedf2+0xd4>
    937c:	283fec1e 	bne	r5,zero,9330 <_gp+0xffff3300>
    9380:	003ff406 	br	9354 <_gp+0xffff3324>
    9384:	313ff236 	bltu	r6,r4,9350 <_gp+0xffff3320>
    9388:	21bffc36 	bltu	r4,r6,937c <_gp+0xffff334c>
    938c:	0005883a 	mov	r2,zero
    9390:	f800283a 	ret

00009394 <__muldf3>:
    9394:	deffee04 	addi	sp,sp,-72
    9398:	dd000c15 	stw	r20,48(sp)
    939c:	2828d53a 	srli	r20,r5,20
    93a0:	ddc00f15 	stw	r23,60(sp)
    93a4:	282ed7fa 	srli	r23,r5,31
    93a8:	dc000815 	stw	r16,32(sp)
    93ac:	04000434 	movhi	r16,16
    93b0:	dcc00b15 	stw	r19,44(sp)
    93b4:	843fffc4 	addi	r16,r16,-1
    93b8:	dfc01115 	stw	ra,68(sp)
    93bc:	df001015 	stw	fp,64(sp)
    93c0:	dd800e15 	stw	r22,56(sp)
    93c4:	dd400d15 	stw	r21,52(sp)
    93c8:	dc800a15 	stw	r18,40(sp)
    93cc:	dc400915 	stw	r17,36(sp)
    93d0:	a501ffcc 	andi	r20,r20,2047
    93d4:	2c20703a 	and	r16,r5,r16
    93d8:	b827883a 	mov	r19,r23
    93dc:	ba403fcc 	andi	r9,r23,255
    93e0:	a0006026 	beq	r20,zero,9564 <__muldf3+0x1d0>
    93e4:	0081ffc4 	movi	r2,2047
    93e8:	202d883a 	mov	r22,r4
    93ec:	a0803626 	beq	r20,r2,94c8 <__muldf3+0x134>
    93f0:	84000434 	orhi	r16,r16,16
    93f4:	200ad77a 	srli	r5,r4,29
    93f8:	800490fa 	slli	r2,r16,3
    93fc:	202c90fa 	slli	r22,r4,3
    9400:	a53f0044 	addi	r20,r20,-1023
    9404:	28a0b03a 	or	r16,r5,r2
    9408:	002b883a 	mov	r21,zero
    940c:	000b883a 	mov	r5,zero
    9410:	3804d53a 	srli	r2,r7,20
    9414:	3838d7fa 	srli	fp,r7,31
    9418:	04400434 	movhi	r17,16
    941c:	8c7fffc4 	addi	r17,r17,-1
    9420:	1081ffcc 	andi	r2,r2,2047
    9424:	3025883a 	mov	r18,r6
    9428:	3c62703a 	and	r17,r7,r17
    942c:	e2803fcc 	andi	r10,fp,255
    9430:	10006d26 	beq	r2,zero,95e8 <__muldf3+0x254>
    9434:	00c1ffc4 	movi	r3,2047
    9438:	10c06526 	beq	r2,r3,95d0 <__muldf3+0x23c>
    943c:	8c400434 	orhi	r17,r17,16
    9440:	300ed77a 	srli	r7,r6,29
    9444:	880690fa 	slli	r3,r17,3
    9448:	302490fa 	slli	r18,r6,3
    944c:	10bf0044 	addi	r2,r2,-1023
    9450:	38e2b03a 	or	r17,r7,r3
    9454:	000f883a 	mov	r7,zero
    9458:	a087883a 	add	r3,r20,r2
    945c:	010003c4 	movi	r4,15
    9460:	3d44b03a 	or	r2,r7,r21
    9464:	e5ccf03a 	xor	r6,fp,r23
    9468:	1a000044 	addi	r8,r3,1
    946c:	20809b36 	bltu	r4,r2,96dc <__muldf3+0x348>
    9470:	100490ba 	slli	r2,r2,2
    9474:	01000074 	movhi	r4,1
    9478:	21252204 	addi	r4,r4,-27512
    947c:	1105883a 	add	r2,r2,r4
    9480:	10800017 	ldw	r2,0(r2)
    9484:	1000683a 	jmp	r2
    9488:	000096dc 	xori	zero,zero,603
    948c:	000094e8 	cmpgeui	zero,zero,595
    9490:	000094e8 	cmpgeui	zero,zero,595
    9494:	000094e4 	muli	zero,zero,595
    9498:	000096b8 	rdprs	zero,zero,602
    949c:	000096b8 	rdprs	zero,zero,602
    94a0:	000096a0 	cmpeqi	zero,zero,602
    94a4:	000094e4 	muli	zero,zero,595
    94a8:	000096b8 	rdprs	zero,zero,602
    94ac:	000096a0 	cmpeqi	zero,zero,602
    94b0:	000096b8 	rdprs	zero,zero,602
    94b4:	000094e4 	muli	zero,zero,595
    94b8:	000096c8 	cmpgei	zero,zero,603
    94bc:	000096c8 	cmpgei	zero,zero,603
    94c0:	000096c8 	cmpgei	zero,zero,603
    94c4:	00009a28 	cmpgeui	zero,zero,616
    94c8:	2404b03a 	or	r2,r4,r16
    94cc:	1000711e 	bne	r2,zero,9694 <__muldf3+0x300>
    94d0:	05400204 	movi	r21,8
    94d4:	0021883a 	mov	r16,zero
    94d8:	002d883a 	mov	r22,zero
    94dc:	01400084 	movi	r5,2
    94e0:	003fcb06 	br	9410 <_gp+0xffff33e0>
    94e4:	500d883a 	mov	r6,r10
    94e8:	00800084 	movi	r2,2
    94ec:	38805926 	beq	r7,r2,9654 <__muldf3+0x2c0>
    94f0:	008000c4 	movi	r2,3
    94f4:	3881bb26 	beq	r7,r2,9be4 <__muldf3+0x850>
    94f8:	00800044 	movi	r2,1
    94fc:	3881961e 	bne	r7,r2,9b58 <__muldf3+0x7c4>
    9500:	3027883a 	mov	r19,r6
    9504:	0005883a 	mov	r2,zero
    9508:	0021883a 	mov	r16,zero
    950c:	002d883a 	mov	r22,zero
    9510:	1004953a 	slli	r2,r2,20
    9514:	98c03fcc 	andi	r3,r19,255
    9518:	04400434 	movhi	r17,16
    951c:	8c7fffc4 	addi	r17,r17,-1
    9520:	180697fa 	slli	r3,r3,31
    9524:	8460703a 	and	r16,r16,r17
    9528:	80a0b03a 	or	r16,r16,r2
    952c:	80c6b03a 	or	r3,r16,r3
    9530:	b005883a 	mov	r2,r22
    9534:	dfc01117 	ldw	ra,68(sp)
    9538:	df001017 	ldw	fp,64(sp)
    953c:	ddc00f17 	ldw	r23,60(sp)
    9540:	dd800e17 	ldw	r22,56(sp)
    9544:	dd400d17 	ldw	r21,52(sp)
    9548:	dd000c17 	ldw	r20,48(sp)
    954c:	dcc00b17 	ldw	r19,44(sp)
    9550:	dc800a17 	ldw	r18,40(sp)
    9554:	dc400917 	ldw	r17,36(sp)
    9558:	dc000817 	ldw	r16,32(sp)
    955c:	dec01204 	addi	sp,sp,72
    9560:	f800283a 	ret
    9564:	2404b03a 	or	r2,r4,r16
    9568:	202b883a 	mov	r21,r4
    956c:	10004426 	beq	r2,zero,9680 <__muldf3+0x2ec>
    9570:	80015126 	beq	r16,zero,9ab8 <__muldf3+0x724>
    9574:	8009883a 	mov	r4,r16
    9578:	d9800715 	stw	r6,28(sp)
    957c:	d9c00215 	stw	r7,8(sp)
    9580:	da400415 	stw	r9,16(sp)
    9584:	000a6580 	call	a658 <__clzsi2>
    9588:	d9800717 	ldw	r6,28(sp)
    958c:	d9c00217 	ldw	r7,8(sp)
    9590:	da400417 	ldw	r9,16(sp)
    9594:	113ffd44 	addi	r4,r2,-11
    9598:	00c00704 	movi	r3,28
    959c:	19014216 	blt	r3,r4,9aa8 <__muldf3+0x714>
    95a0:	00c00744 	movi	r3,29
    95a4:	15bffe04 	addi	r22,r2,-8
    95a8:	1907c83a 	sub	r3,r3,r4
    95ac:	85a0983a 	sll	r16,r16,r22
    95b0:	a8c6d83a 	srl	r3,r21,r3
    95b4:	adac983a 	sll	r22,r21,r22
    95b8:	1c20b03a 	or	r16,r3,r16
    95bc:	1080fcc4 	addi	r2,r2,1011
    95c0:	00a9c83a 	sub	r20,zero,r2
    95c4:	002b883a 	mov	r21,zero
    95c8:	000b883a 	mov	r5,zero
    95cc:	003f9006 	br	9410 <_gp+0xffff33e0>
    95d0:	3446b03a 	or	r3,r6,r17
    95d4:	1800281e 	bne	r3,zero,9678 <__muldf3+0x2e4>
    95d8:	0023883a 	mov	r17,zero
    95dc:	0025883a 	mov	r18,zero
    95e0:	01c00084 	movi	r7,2
    95e4:	003f9c06 	br	9458 <_gp+0xffff3428>
    95e8:	3446b03a 	or	r3,r6,r17
    95ec:	18001e26 	beq	r3,zero,9668 <__muldf3+0x2d4>
    95f0:	88012126 	beq	r17,zero,9a78 <__muldf3+0x6e4>
    95f4:	8809883a 	mov	r4,r17
    95f8:	d9400215 	stw	r5,8(sp)
    95fc:	d9800715 	stw	r6,28(sp)
    9600:	da400415 	stw	r9,16(sp)
    9604:	da800315 	stw	r10,12(sp)
    9608:	000a6580 	call	a658 <__clzsi2>
    960c:	d9400217 	ldw	r5,8(sp)
    9610:	d9800717 	ldw	r6,28(sp)
    9614:	da400417 	ldw	r9,16(sp)
    9618:	da800317 	ldw	r10,12(sp)
    961c:	113ffd44 	addi	r4,r2,-11
    9620:	00c00704 	movi	r3,28
    9624:	19011016 	blt	r3,r4,9a68 <__muldf3+0x6d4>
    9628:	00c00744 	movi	r3,29
    962c:	14bffe04 	addi	r18,r2,-8
    9630:	1907c83a 	sub	r3,r3,r4
    9634:	8ca2983a 	sll	r17,r17,r18
    9638:	30c6d83a 	srl	r3,r6,r3
    963c:	34a4983a 	sll	r18,r6,r18
    9640:	1c62b03a 	or	r17,r3,r17
    9644:	1080fcc4 	addi	r2,r2,1011
    9648:	0085c83a 	sub	r2,zero,r2
    964c:	000f883a 	mov	r7,zero
    9650:	003f8106 	br	9458 <_gp+0xffff3428>
    9654:	3027883a 	mov	r19,r6
    9658:	0081ffc4 	movi	r2,2047
    965c:	0021883a 	mov	r16,zero
    9660:	002d883a 	mov	r22,zero
    9664:	003faa06 	br	9510 <_gp+0xffff34e0>
    9668:	0023883a 	mov	r17,zero
    966c:	0025883a 	mov	r18,zero
    9670:	01c00044 	movi	r7,1
    9674:	003f7806 	br	9458 <_gp+0xffff3428>
    9678:	01c000c4 	movi	r7,3
    967c:	003f7606 	br	9458 <_gp+0xffff3428>
    9680:	05400104 	movi	r21,4
    9684:	0021883a 	mov	r16,zero
    9688:	002d883a 	mov	r22,zero
    968c:	01400044 	movi	r5,1
    9690:	003f5f06 	br	9410 <_gp+0xffff33e0>
    9694:	05400304 	movi	r21,12
    9698:	014000c4 	movi	r5,3
    969c:	003f5c06 	br	9410 <_gp+0xffff33e0>
    96a0:	04000434 	movhi	r16,16
    96a4:	0027883a 	mov	r19,zero
    96a8:	843fffc4 	addi	r16,r16,-1
    96ac:	05bfffc4 	movi	r22,-1
    96b0:	0081ffc4 	movi	r2,2047
    96b4:	003f9606 	br	9510 <_gp+0xffff34e0>
    96b8:	8023883a 	mov	r17,r16
    96bc:	b025883a 	mov	r18,r22
    96c0:	280f883a 	mov	r7,r5
    96c4:	003f8806 	br	94e8 <_gp+0xffff34b8>
    96c8:	8023883a 	mov	r17,r16
    96cc:	b025883a 	mov	r18,r22
    96d0:	480d883a 	mov	r6,r9
    96d4:	280f883a 	mov	r7,r5
    96d8:	003f8306 	br	94e8 <_gp+0xffff34b8>
    96dc:	b026d43a 	srli	r19,r22,16
    96e0:	902ed43a 	srli	r23,r18,16
    96e4:	b5bfffcc 	andi	r22,r22,65535
    96e8:	94bfffcc 	andi	r18,r18,65535
    96ec:	b00b883a 	mov	r5,r22
    96f0:	9009883a 	mov	r4,r18
    96f4:	d8c00515 	stw	r3,20(sp)
    96f8:	d9800715 	stw	r6,28(sp)
    96fc:	da000615 	stw	r8,24(sp)
    9700:	00089e40 	call	89e4 <__mulsi3>
    9704:	980b883a 	mov	r5,r19
    9708:	9009883a 	mov	r4,r18
    970c:	1029883a 	mov	r20,r2
    9710:	00089e40 	call	89e4 <__mulsi3>
    9714:	b80b883a 	mov	r5,r23
    9718:	9809883a 	mov	r4,r19
    971c:	102b883a 	mov	r21,r2
    9720:	00089e40 	call	89e4 <__mulsi3>
    9724:	b809883a 	mov	r4,r23
    9728:	b00b883a 	mov	r5,r22
    972c:	1039883a 	mov	fp,r2
    9730:	00089e40 	call	89e4 <__mulsi3>
    9734:	a008d43a 	srli	r4,r20,16
    9738:	1545883a 	add	r2,r2,r21
    973c:	d8c00517 	ldw	r3,20(sp)
    9740:	2085883a 	add	r2,r4,r2
    9744:	d9800717 	ldw	r6,28(sp)
    9748:	da000617 	ldw	r8,24(sp)
    974c:	1540022e 	bgeu	r2,r21,9758 <__muldf3+0x3c4>
    9750:	01000074 	movhi	r4,1
    9754:	e139883a 	add	fp,fp,r4
    9758:	100e943a 	slli	r7,r2,16
    975c:	1004d43a 	srli	r2,r2,16
    9760:	882ad43a 	srli	r21,r17,16
    9764:	a53fffcc 	andi	r20,r20,65535
    9768:	8c7fffcc 	andi	r17,r17,65535
    976c:	3d29883a 	add	r20,r7,r20
    9770:	b00b883a 	mov	r5,r22
    9774:	8809883a 	mov	r4,r17
    9778:	d8c00515 	stw	r3,20(sp)
    977c:	d9800715 	stw	r6,28(sp)
    9780:	da000615 	stw	r8,24(sp)
    9784:	dd000115 	stw	r20,4(sp)
    9788:	d8800015 	stw	r2,0(sp)
    978c:	00089e40 	call	89e4 <__mulsi3>
    9790:	980b883a 	mov	r5,r19
    9794:	8809883a 	mov	r4,r17
    9798:	d8800215 	stw	r2,8(sp)
    979c:	00089e40 	call	89e4 <__mulsi3>
    97a0:	9809883a 	mov	r4,r19
    97a4:	a80b883a 	mov	r5,r21
    97a8:	1029883a 	mov	r20,r2
    97ac:	00089e40 	call	89e4 <__mulsi3>
    97b0:	b00b883a 	mov	r5,r22
    97b4:	a809883a 	mov	r4,r21
    97b8:	d8800415 	stw	r2,16(sp)
    97bc:	00089e40 	call	89e4 <__mulsi3>
    97c0:	d9c00217 	ldw	r7,8(sp)
    97c4:	1505883a 	add	r2,r2,r20
    97c8:	d8c00517 	ldw	r3,20(sp)
    97cc:	3826d43a 	srli	r19,r7,16
    97d0:	d9800717 	ldw	r6,28(sp)
    97d4:	da000617 	ldw	r8,24(sp)
    97d8:	9885883a 	add	r2,r19,r2
    97dc:	da400417 	ldw	r9,16(sp)
    97e0:	1500022e 	bgeu	r2,r20,97ec <__muldf3+0x458>
    97e4:	01000074 	movhi	r4,1
    97e8:	4913883a 	add	r9,r9,r4
    97ec:	1028d43a 	srli	r20,r2,16
    97f0:	1004943a 	slli	r2,r2,16
    97f4:	802cd43a 	srli	r22,r16,16
    97f8:	843fffcc 	andi	r16,r16,65535
    97fc:	3cffffcc 	andi	r19,r7,65535
    9800:	9009883a 	mov	r4,r18
    9804:	800b883a 	mov	r5,r16
    9808:	a269883a 	add	r20,r20,r9
    980c:	d8c00515 	stw	r3,20(sp)
    9810:	d9800715 	stw	r6,28(sp)
    9814:	da000615 	stw	r8,24(sp)
    9818:	14e7883a 	add	r19,r2,r19
    981c:	00089e40 	call	89e4 <__mulsi3>
    9820:	9009883a 	mov	r4,r18
    9824:	b00b883a 	mov	r5,r22
    9828:	d8800315 	stw	r2,12(sp)
    982c:	00089e40 	call	89e4 <__mulsi3>
    9830:	b809883a 	mov	r4,r23
    9834:	b00b883a 	mov	r5,r22
    9838:	d8800215 	stw	r2,8(sp)
    983c:	00089e40 	call	89e4 <__mulsi3>
    9840:	b80b883a 	mov	r5,r23
    9844:	8009883a 	mov	r4,r16
    9848:	d8800415 	stw	r2,16(sp)
    984c:	00089e40 	call	89e4 <__mulsi3>
    9850:	da800317 	ldw	r10,12(sp)
    9854:	d9c00217 	ldw	r7,8(sp)
    9858:	d9000017 	ldw	r4,0(sp)
    985c:	502ed43a 	srli	r23,r10,16
    9860:	11c5883a 	add	r2,r2,r7
    9864:	24e5883a 	add	r18,r4,r19
    9868:	b885883a 	add	r2,r23,r2
    986c:	d8c00517 	ldw	r3,20(sp)
    9870:	d9800717 	ldw	r6,28(sp)
    9874:	da000617 	ldw	r8,24(sp)
    9878:	da400417 	ldw	r9,16(sp)
    987c:	11c0022e 	bgeu	r2,r7,9888 <__muldf3+0x4f4>
    9880:	01000074 	movhi	r4,1
    9884:	4913883a 	add	r9,r9,r4
    9888:	100ed43a 	srli	r7,r2,16
    988c:	1004943a 	slli	r2,r2,16
    9890:	55ffffcc 	andi	r23,r10,65535
    9894:	3a53883a 	add	r9,r7,r9
    9898:	8809883a 	mov	r4,r17
    989c:	800b883a 	mov	r5,r16
    98a0:	d8c00515 	stw	r3,20(sp)
    98a4:	d9800715 	stw	r6,28(sp)
    98a8:	da000615 	stw	r8,24(sp)
    98ac:	da400415 	stw	r9,16(sp)
    98b0:	15ef883a 	add	r23,r2,r23
    98b4:	00089e40 	call	89e4 <__mulsi3>
    98b8:	8809883a 	mov	r4,r17
    98bc:	b00b883a 	mov	r5,r22
    98c0:	d8800215 	stw	r2,8(sp)
    98c4:	00089e40 	call	89e4 <__mulsi3>
    98c8:	b00b883a 	mov	r5,r22
    98cc:	a809883a 	mov	r4,r21
    98d0:	d8800315 	stw	r2,12(sp)
    98d4:	00089e40 	call	89e4 <__mulsi3>
    98d8:	8009883a 	mov	r4,r16
    98dc:	a80b883a 	mov	r5,r21
    98e0:	1023883a 	mov	r17,r2
    98e4:	00089e40 	call	89e4 <__mulsi3>
    98e8:	d9c00217 	ldw	r7,8(sp)
    98ec:	da800317 	ldw	r10,12(sp)
    98f0:	d8c00517 	ldw	r3,20(sp)
    98f4:	3808d43a 	srli	r4,r7,16
    98f8:	1285883a 	add	r2,r2,r10
    98fc:	d9800717 	ldw	r6,28(sp)
    9900:	2085883a 	add	r2,r4,r2
    9904:	da000617 	ldw	r8,24(sp)
    9908:	da400417 	ldw	r9,16(sp)
    990c:	1280022e 	bgeu	r2,r10,9918 <__muldf3+0x584>
    9910:	01000074 	movhi	r4,1
    9914:	8923883a 	add	r17,r17,r4
    9918:	1008943a 	slli	r4,r2,16
    991c:	39ffffcc 	andi	r7,r7,65535
    9920:	e4b9883a 	add	fp,fp,r18
    9924:	21cf883a 	add	r7,r4,r7
    9928:	e4e7803a 	cmpltu	r19,fp,r19
    992c:	3d0f883a 	add	r7,r7,r20
    9930:	bf39883a 	add	fp,r23,fp
    9934:	99c9883a 	add	r4,r19,r7
    9938:	e5ef803a 	cmpltu	r23,fp,r23
    993c:	490b883a 	add	r5,r9,r4
    9940:	1004d43a 	srli	r2,r2,16
    9944:	b965883a 	add	r18,r23,r5
    9948:	24c9803a 	cmpltu	r4,r4,r19
    994c:	3d29803a 	cmpltu	r20,r7,r20
    9950:	a128b03a 	or	r20,r20,r4
    9954:	95ef803a 	cmpltu	r23,r18,r23
    9958:	2a53803a 	cmpltu	r9,r5,r9
    995c:	a0a9883a 	add	r20,r20,r2
    9960:	4deeb03a 	or	r23,r9,r23
    9964:	a5ef883a 	add	r23,r20,r23
    9968:	bc63883a 	add	r17,r23,r17
    996c:	e004927a 	slli	r2,fp,9
    9970:	d9000117 	ldw	r4,4(sp)
    9974:	882e927a 	slli	r23,r17,9
    9978:	9022d5fa 	srli	r17,r18,23
    997c:	e038d5fa 	srli	fp,fp,23
    9980:	1104b03a 	or	r2,r2,r4
    9984:	9024927a 	slli	r18,r18,9
    9988:	1004c03a 	cmpne	r2,r2,zero
    998c:	bc62b03a 	or	r17,r23,r17
    9990:	1738b03a 	or	fp,r2,fp
    9994:	8880402c 	andhi	r2,r17,256
    9998:	e4a4b03a 	or	r18,fp,r18
    999c:	10000726 	beq	r2,zero,99bc <__muldf3+0x628>
    99a0:	9006d07a 	srli	r3,r18,1
    99a4:	880497fa 	slli	r2,r17,31
    99a8:	9480004c 	andi	r18,r18,1
    99ac:	8822d07a 	srli	r17,r17,1
    99b0:	1ca4b03a 	or	r18,r3,r18
    99b4:	14a4b03a 	or	r18,r2,r18
    99b8:	4007883a 	mov	r3,r8
    99bc:	1880ffc4 	addi	r2,r3,1023
    99c0:	0080460e 	bge	zero,r2,9adc <__muldf3+0x748>
    99c4:	910001cc 	andi	r4,r18,7
    99c8:	20000726 	beq	r4,zero,99e8 <__muldf3+0x654>
    99cc:	910003cc 	andi	r4,r18,15
    99d0:	01400104 	movi	r5,4
    99d4:	21400426 	beq	r4,r5,99e8 <__muldf3+0x654>
    99d8:	9149883a 	add	r4,r18,r5
    99dc:	24a5803a 	cmpltu	r18,r4,r18
    99e0:	8ca3883a 	add	r17,r17,r18
    99e4:	2025883a 	mov	r18,r4
    99e8:	8900402c 	andhi	r4,r17,256
    99ec:	20000426 	beq	r4,zero,9a00 <__muldf3+0x66c>
    99f0:	18810004 	addi	r2,r3,1024
    99f4:	00ffc034 	movhi	r3,65280
    99f8:	18ffffc4 	addi	r3,r3,-1
    99fc:	88e2703a 	and	r17,r17,r3
    9a00:	00c1ff84 	movi	r3,2046
    9a04:	18bf1316 	blt	r3,r2,9654 <_gp+0xffff3624>
    9a08:	882c977a 	slli	r22,r17,29
    9a0c:	9024d0fa 	srli	r18,r18,3
    9a10:	8822927a 	slli	r17,r17,9
    9a14:	1081ffcc 	andi	r2,r2,2047
    9a18:	b4acb03a 	or	r22,r22,r18
    9a1c:	8820d33a 	srli	r16,r17,12
    9a20:	3027883a 	mov	r19,r6
    9a24:	003eba06 	br	9510 <_gp+0xffff34e0>
    9a28:	8080022c 	andhi	r2,r16,8
    9a2c:	10000926 	beq	r2,zero,9a54 <__muldf3+0x6c0>
    9a30:	8880022c 	andhi	r2,r17,8
    9a34:	1000071e 	bne	r2,zero,9a54 <__muldf3+0x6c0>
    9a38:	00800434 	movhi	r2,16
    9a3c:	8c000234 	orhi	r16,r17,8
    9a40:	10bfffc4 	addi	r2,r2,-1
    9a44:	e027883a 	mov	r19,fp
    9a48:	80a0703a 	and	r16,r16,r2
    9a4c:	902d883a 	mov	r22,r18
    9a50:	003f1706 	br	96b0 <_gp+0xffff3680>
    9a54:	00800434 	movhi	r2,16
    9a58:	84000234 	orhi	r16,r16,8
    9a5c:	10bfffc4 	addi	r2,r2,-1
    9a60:	80a0703a 	and	r16,r16,r2
    9a64:	003f1206 	br	96b0 <_gp+0xffff3680>
    9a68:	147ff604 	addi	r17,r2,-40
    9a6c:	3462983a 	sll	r17,r6,r17
    9a70:	0025883a 	mov	r18,zero
    9a74:	003ef306 	br	9644 <_gp+0xffff3614>
    9a78:	3009883a 	mov	r4,r6
    9a7c:	d9400215 	stw	r5,8(sp)
    9a80:	d9800715 	stw	r6,28(sp)
    9a84:	da400415 	stw	r9,16(sp)
    9a88:	da800315 	stw	r10,12(sp)
    9a8c:	000a6580 	call	a658 <__clzsi2>
    9a90:	10800804 	addi	r2,r2,32
    9a94:	da800317 	ldw	r10,12(sp)
    9a98:	da400417 	ldw	r9,16(sp)
    9a9c:	d9800717 	ldw	r6,28(sp)
    9aa0:	d9400217 	ldw	r5,8(sp)
    9aa4:	003edd06 	br	961c <_gp+0xffff35ec>
    9aa8:	143ff604 	addi	r16,r2,-40
    9aac:	ac20983a 	sll	r16,r21,r16
    9ab0:	002d883a 	mov	r22,zero
    9ab4:	003ec106 	br	95bc <_gp+0xffff358c>
    9ab8:	d9800715 	stw	r6,28(sp)
    9abc:	d9c00215 	stw	r7,8(sp)
    9ac0:	da400415 	stw	r9,16(sp)
    9ac4:	000a6580 	call	a658 <__clzsi2>
    9ac8:	10800804 	addi	r2,r2,32
    9acc:	da400417 	ldw	r9,16(sp)
    9ad0:	d9c00217 	ldw	r7,8(sp)
    9ad4:	d9800717 	ldw	r6,28(sp)
    9ad8:	003eae06 	br	9594 <_gp+0xffff3564>
    9adc:	00c00044 	movi	r3,1
    9ae0:	1887c83a 	sub	r3,r3,r2
    9ae4:	01000e04 	movi	r4,56
    9ae8:	20fe8516 	blt	r4,r3,9500 <_gp+0xffff34d0>
    9aec:	010007c4 	movi	r4,31
    9af0:	20c01b16 	blt	r4,r3,9b60 <__muldf3+0x7cc>
    9af4:	00800804 	movi	r2,32
    9af8:	10c5c83a 	sub	r2,r2,r3
    9afc:	888a983a 	sll	r5,r17,r2
    9b00:	90c8d83a 	srl	r4,r18,r3
    9b04:	9084983a 	sll	r2,r18,r2
    9b08:	88e2d83a 	srl	r17,r17,r3
    9b0c:	2906b03a 	or	r3,r5,r4
    9b10:	1004c03a 	cmpne	r2,r2,zero
    9b14:	1886b03a 	or	r3,r3,r2
    9b18:	188001cc 	andi	r2,r3,7
    9b1c:	10000726 	beq	r2,zero,9b3c <__muldf3+0x7a8>
    9b20:	188003cc 	andi	r2,r3,15
    9b24:	01000104 	movi	r4,4
    9b28:	11000426 	beq	r2,r4,9b3c <__muldf3+0x7a8>
    9b2c:	1805883a 	mov	r2,r3
    9b30:	10c00104 	addi	r3,r2,4
    9b34:	1885803a 	cmpltu	r2,r3,r2
    9b38:	88a3883a 	add	r17,r17,r2
    9b3c:	8880202c 	andhi	r2,r17,128
    9b40:	10001c26 	beq	r2,zero,9bb4 <__muldf3+0x820>
    9b44:	3027883a 	mov	r19,r6
    9b48:	00800044 	movi	r2,1
    9b4c:	0021883a 	mov	r16,zero
    9b50:	002d883a 	mov	r22,zero
    9b54:	003e6e06 	br	9510 <_gp+0xffff34e0>
    9b58:	4007883a 	mov	r3,r8
    9b5c:	003f9706 	br	99bc <_gp+0xffff398c>
    9b60:	017ff844 	movi	r5,-31
    9b64:	2885c83a 	sub	r2,r5,r2
    9b68:	888ad83a 	srl	r5,r17,r2
    9b6c:	00800804 	movi	r2,32
    9b70:	18801a26 	beq	r3,r2,9bdc <__muldf3+0x848>
    9b74:	01001004 	movi	r4,64
    9b78:	20c7c83a 	sub	r3,r4,r3
    9b7c:	88e2983a 	sll	r17,r17,r3
    9b80:	8ca4b03a 	or	r18,r17,r18
    9b84:	9004c03a 	cmpne	r2,r18,zero
    9b88:	2884b03a 	or	r2,r5,r2
    9b8c:	144001cc 	andi	r17,r2,7
    9b90:	88000d1e 	bne	r17,zero,9bc8 <__muldf3+0x834>
    9b94:	0021883a 	mov	r16,zero
    9b98:	102cd0fa 	srli	r22,r2,3
    9b9c:	3027883a 	mov	r19,r6
    9ba0:	0005883a 	mov	r2,zero
    9ba4:	b46cb03a 	or	r22,r22,r17
    9ba8:	003e5906 	br	9510 <_gp+0xffff34e0>
    9bac:	1007883a 	mov	r3,r2
    9bb0:	0023883a 	mov	r17,zero
    9bb4:	8820927a 	slli	r16,r17,9
    9bb8:	1805883a 	mov	r2,r3
    9bbc:	8822977a 	slli	r17,r17,29
    9bc0:	8020d33a 	srli	r16,r16,12
    9bc4:	003ff406 	br	9b98 <_gp+0xffff3b68>
    9bc8:	10c003cc 	andi	r3,r2,15
    9bcc:	01000104 	movi	r4,4
    9bd0:	193ff626 	beq	r3,r4,9bac <_gp+0xffff3b7c>
    9bd4:	0023883a 	mov	r17,zero
    9bd8:	003fd506 	br	9b30 <_gp+0xffff3b00>
    9bdc:	0023883a 	mov	r17,zero
    9be0:	003fe706 	br	9b80 <_gp+0xffff3b50>
    9be4:	00800434 	movhi	r2,16
    9be8:	8c000234 	orhi	r16,r17,8
    9bec:	10bfffc4 	addi	r2,r2,-1
    9bf0:	3027883a 	mov	r19,r6
    9bf4:	80a0703a 	and	r16,r16,r2
    9bf8:	902d883a 	mov	r22,r18
    9bfc:	003eac06 	br	96b0 <_gp+0xffff3680>

00009c00 <__subdf3>:
    9c00:	02000434 	movhi	r8,16
    9c04:	423fffc4 	addi	r8,r8,-1
    9c08:	defffb04 	addi	sp,sp,-20
    9c0c:	2a14703a 	and	r10,r5,r8
    9c10:	3812d53a 	srli	r9,r7,20
    9c14:	3a10703a 	and	r8,r7,r8
    9c18:	2006d77a 	srli	r3,r4,29
    9c1c:	3004d77a 	srli	r2,r6,29
    9c20:	dc000015 	stw	r16,0(sp)
    9c24:	501490fa 	slli	r10,r10,3
    9c28:	2820d53a 	srli	r16,r5,20
    9c2c:	401090fa 	slli	r8,r8,3
    9c30:	dc800215 	stw	r18,8(sp)
    9c34:	dc400115 	stw	r17,4(sp)
    9c38:	dfc00415 	stw	ra,16(sp)
    9c3c:	202290fa 	slli	r17,r4,3
    9c40:	dcc00315 	stw	r19,12(sp)
    9c44:	4a41ffcc 	andi	r9,r9,2047
    9c48:	0101ffc4 	movi	r4,2047
    9c4c:	2824d7fa 	srli	r18,r5,31
    9c50:	8401ffcc 	andi	r16,r16,2047
    9c54:	50c6b03a 	or	r3,r10,r3
    9c58:	380ed7fa 	srli	r7,r7,31
    9c5c:	408ab03a 	or	r5,r8,r2
    9c60:	300c90fa 	slli	r6,r6,3
    9c64:	49009626 	beq	r9,r4,9ec0 <__subdf3+0x2c0>
    9c68:	39c0005c 	xori	r7,r7,1
    9c6c:	8245c83a 	sub	r2,r16,r9
    9c70:	3c807426 	beq	r7,r18,9e44 <__subdf3+0x244>
    9c74:	0080af0e 	bge	zero,r2,9f34 <__subdf3+0x334>
    9c78:	48002a1e 	bne	r9,zero,9d24 <__subdf3+0x124>
    9c7c:	2988b03a 	or	r4,r5,r6
    9c80:	20009a1e 	bne	r4,zero,9eec <__subdf3+0x2ec>
    9c84:	888001cc 	andi	r2,r17,7
    9c88:	10000726 	beq	r2,zero,9ca8 <__subdf3+0xa8>
    9c8c:	888003cc 	andi	r2,r17,15
    9c90:	01000104 	movi	r4,4
    9c94:	11000426 	beq	r2,r4,9ca8 <__subdf3+0xa8>
    9c98:	890b883a 	add	r5,r17,r4
    9c9c:	2c63803a 	cmpltu	r17,r5,r17
    9ca0:	1c47883a 	add	r3,r3,r17
    9ca4:	2823883a 	mov	r17,r5
    9ca8:	1880202c 	andhi	r2,r3,128
    9cac:	10005926 	beq	r2,zero,9e14 <__subdf3+0x214>
    9cb0:	84000044 	addi	r16,r16,1
    9cb4:	0081ffc4 	movi	r2,2047
    9cb8:	8080be26 	beq	r16,r2,9fb4 <__subdf3+0x3b4>
    9cbc:	017fe034 	movhi	r5,65408
    9cc0:	297fffc4 	addi	r5,r5,-1
    9cc4:	1946703a 	and	r3,r3,r5
    9cc8:	1804977a 	slli	r2,r3,29
    9ccc:	1806927a 	slli	r3,r3,9
    9cd0:	8822d0fa 	srli	r17,r17,3
    9cd4:	8401ffcc 	andi	r16,r16,2047
    9cd8:	180ad33a 	srli	r5,r3,12
    9cdc:	9100004c 	andi	r4,r18,1
    9ce0:	1444b03a 	or	r2,r2,r17
    9ce4:	80c1ffcc 	andi	r3,r16,2047
    9ce8:	1820953a 	slli	r16,r3,20
    9cec:	20c03fcc 	andi	r3,r4,255
    9cf0:	180897fa 	slli	r4,r3,31
    9cf4:	00c00434 	movhi	r3,16
    9cf8:	18ffffc4 	addi	r3,r3,-1
    9cfc:	28c6703a 	and	r3,r5,r3
    9d00:	1c06b03a 	or	r3,r3,r16
    9d04:	1906b03a 	or	r3,r3,r4
    9d08:	dfc00417 	ldw	ra,16(sp)
    9d0c:	dcc00317 	ldw	r19,12(sp)
    9d10:	dc800217 	ldw	r18,8(sp)
    9d14:	dc400117 	ldw	r17,4(sp)
    9d18:	dc000017 	ldw	r16,0(sp)
    9d1c:	dec00504 	addi	sp,sp,20
    9d20:	f800283a 	ret
    9d24:	0101ffc4 	movi	r4,2047
    9d28:	813fd626 	beq	r16,r4,9c84 <_gp+0xffff3c54>
    9d2c:	29402034 	orhi	r5,r5,128
    9d30:	01000e04 	movi	r4,56
    9d34:	2080a316 	blt	r4,r2,9fc4 <__subdf3+0x3c4>
    9d38:	010007c4 	movi	r4,31
    9d3c:	2080c616 	blt	r4,r2,a058 <__subdf3+0x458>
    9d40:	01000804 	movi	r4,32
    9d44:	2089c83a 	sub	r4,r4,r2
    9d48:	2910983a 	sll	r8,r5,r4
    9d4c:	308ed83a 	srl	r7,r6,r2
    9d50:	3108983a 	sll	r4,r6,r4
    9d54:	2884d83a 	srl	r2,r5,r2
    9d58:	41ccb03a 	or	r6,r8,r7
    9d5c:	2008c03a 	cmpne	r4,r4,zero
    9d60:	310cb03a 	or	r6,r6,r4
    9d64:	898dc83a 	sub	r6,r17,r6
    9d68:	89a3803a 	cmpltu	r17,r17,r6
    9d6c:	1887c83a 	sub	r3,r3,r2
    9d70:	1c47c83a 	sub	r3,r3,r17
    9d74:	3023883a 	mov	r17,r6
    9d78:	1880202c 	andhi	r2,r3,128
    9d7c:	10002326 	beq	r2,zero,9e0c <__subdf3+0x20c>
    9d80:	04c02034 	movhi	r19,128
    9d84:	9cffffc4 	addi	r19,r19,-1
    9d88:	1ce6703a 	and	r19,r3,r19
    9d8c:	98007a26 	beq	r19,zero,9f78 <__subdf3+0x378>
    9d90:	9809883a 	mov	r4,r19
    9d94:	000a6580 	call	a658 <__clzsi2>
    9d98:	113ffe04 	addi	r4,r2,-8
    9d9c:	00c007c4 	movi	r3,31
    9da0:	19007b16 	blt	r3,r4,9f90 <__subdf3+0x390>
    9da4:	00800804 	movi	r2,32
    9da8:	1105c83a 	sub	r2,r2,r4
    9dac:	8884d83a 	srl	r2,r17,r2
    9db0:	9906983a 	sll	r3,r19,r4
    9db4:	8922983a 	sll	r17,r17,r4
    9db8:	10c4b03a 	or	r2,r2,r3
    9dbc:	24007816 	blt	r4,r16,9fa0 <__subdf3+0x3a0>
    9dc0:	2421c83a 	sub	r16,r4,r16
    9dc4:	80c00044 	addi	r3,r16,1
    9dc8:	010007c4 	movi	r4,31
    9dcc:	20c09516 	blt	r4,r3,a024 <__subdf3+0x424>
    9dd0:	01400804 	movi	r5,32
    9dd4:	28cbc83a 	sub	r5,r5,r3
    9dd8:	88c8d83a 	srl	r4,r17,r3
    9ddc:	8962983a 	sll	r17,r17,r5
    9de0:	114a983a 	sll	r5,r2,r5
    9de4:	10c6d83a 	srl	r3,r2,r3
    9de8:	8804c03a 	cmpne	r2,r17,zero
    9dec:	290ab03a 	or	r5,r5,r4
    9df0:	28a2b03a 	or	r17,r5,r2
    9df4:	0021883a 	mov	r16,zero
    9df8:	003fa206 	br	9c84 <_gp+0xffff3c54>
    9dfc:	2090b03a 	or	r8,r4,r2
    9e00:	40018e26 	beq	r8,zero,a43c <__subdf3+0x83c>
    9e04:	1007883a 	mov	r3,r2
    9e08:	2023883a 	mov	r17,r4
    9e0c:	888001cc 	andi	r2,r17,7
    9e10:	103f9e1e 	bne	r2,zero,9c8c <_gp+0xffff3c5c>
    9e14:	1804977a 	slli	r2,r3,29
    9e18:	8822d0fa 	srli	r17,r17,3
    9e1c:	1810d0fa 	srli	r8,r3,3
    9e20:	9100004c 	andi	r4,r18,1
    9e24:	1444b03a 	or	r2,r2,r17
    9e28:	00c1ffc4 	movi	r3,2047
    9e2c:	80c02826 	beq	r16,r3,9ed0 <__subdf3+0x2d0>
    9e30:	01400434 	movhi	r5,16
    9e34:	297fffc4 	addi	r5,r5,-1
    9e38:	80e0703a 	and	r16,r16,r3
    9e3c:	414a703a 	and	r5,r8,r5
    9e40:	003fa806 	br	9ce4 <_gp+0xffff3cb4>
    9e44:	0080630e 	bge	zero,r2,9fd4 <__subdf3+0x3d4>
    9e48:	48003026 	beq	r9,zero,9f0c <__subdf3+0x30c>
    9e4c:	0101ffc4 	movi	r4,2047
    9e50:	813f8c26 	beq	r16,r4,9c84 <_gp+0xffff3c54>
    9e54:	29402034 	orhi	r5,r5,128
    9e58:	01000e04 	movi	r4,56
    9e5c:	2080a90e 	bge	r4,r2,a104 <__subdf3+0x504>
    9e60:	298cb03a 	or	r6,r5,r6
    9e64:	3012c03a 	cmpne	r9,r6,zero
    9e68:	0005883a 	mov	r2,zero
    9e6c:	4c53883a 	add	r9,r9,r17
    9e70:	4c63803a 	cmpltu	r17,r9,r17
    9e74:	10c7883a 	add	r3,r2,r3
    9e78:	88c7883a 	add	r3,r17,r3
    9e7c:	4823883a 	mov	r17,r9
    9e80:	1880202c 	andhi	r2,r3,128
    9e84:	1000d026 	beq	r2,zero,a1c8 <__subdf3+0x5c8>
    9e88:	84000044 	addi	r16,r16,1
    9e8c:	0081ffc4 	movi	r2,2047
    9e90:	8080fe26 	beq	r16,r2,a28c <__subdf3+0x68c>
    9e94:	00bfe034 	movhi	r2,65408
    9e98:	10bfffc4 	addi	r2,r2,-1
    9e9c:	1886703a 	and	r3,r3,r2
    9ea0:	880ad07a 	srli	r5,r17,1
    9ea4:	180497fa 	slli	r2,r3,31
    9ea8:	8900004c 	andi	r4,r17,1
    9eac:	2922b03a 	or	r17,r5,r4
    9eb0:	1806d07a 	srli	r3,r3,1
    9eb4:	1462b03a 	or	r17,r2,r17
    9eb8:	3825883a 	mov	r18,r7
    9ebc:	003f7106 	br	9c84 <_gp+0xffff3c54>
    9ec0:	2984b03a 	or	r2,r5,r6
    9ec4:	103f6826 	beq	r2,zero,9c68 <_gp+0xffff3c38>
    9ec8:	39c03fcc 	andi	r7,r7,255
    9ecc:	003f6706 	br	9c6c <_gp+0xffff3c3c>
    9ed0:	4086b03a 	or	r3,r8,r2
    9ed4:	18015226 	beq	r3,zero,a420 <__subdf3+0x820>
    9ed8:	00c00434 	movhi	r3,16
    9edc:	41400234 	orhi	r5,r8,8
    9ee0:	18ffffc4 	addi	r3,r3,-1
    9ee4:	28ca703a 	and	r5,r5,r3
    9ee8:	003f7e06 	br	9ce4 <_gp+0xffff3cb4>
    9eec:	10bfffc4 	addi	r2,r2,-1
    9ef0:	1000491e 	bne	r2,zero,a018 <__subdf3+0x418>
    9ef4:	898fc83a 	sub	r7,r17,r6
    9ef8:	89e3803a 	cmpltu	r17,r17,r7
    9efc:	1947c83a 	sub	r3,r3,r5
    9f00:	1c47c83a 	sub	r3,r3,r17
    9f04:	3823883a 	mov	r17,r7
    9f08:	003f9b06 	br	9d78 <_gp+0xffff3d48>
    9f0c:	2988b03a 	or	r4,r5,r6
    9f10:	203f5c26 	beq	r4,zero,9c84 <_gp+0xffff3c54>
    9f14:	10bfffc4 	addi	r2,r2,-1
    9f18:	1000931e 	bne	r2,zero,a168 <__subdf3+0x568>
    9f1c:	898d883a 	add	r6,r17,r6
    9f20:	3463803a 	cmpltu	r17,r6,r17
    9f24:	1947883a 	add	r3,r3,r5
    9f28:	88c7883a 	add	r3,r17,r3
    9f2c:	3023883a 	mov	r17,r6
    9f30:	003fd306 	br	9e80 <_gp+0xffff3e50>
    9f34:	1000541e 	bne	r2,zero,a088 <__subdf3+0x488>
    9f38:	80800044 	addi	r2,r16,1
    9f3c:	1081ffcc 	andi	r2,r2,2047
    9f40:	01000044 	movi	r4,1
    9f44:	2080a20e 	bge	r4,r2,a1d0 <__subdf3+0x5d0>
    9f48:	8989c83a 	sub	r4,r17,r6
    9f4c:	8905803a 	cmpltu	r2,r17,r4
    9f50:	1967c83a 	sub	r19,r3,r5
    9f54:	98a7c83a 	sub	r19,r19,r2
    9f58:	9880202c 	andhi	r2,r19,128
    9f5c:	10006326 	beq	r2,zero,a0ec <__subdf3+0x4ec>
    9f60:	3463c83a 	sub	r17,r6,r17
    9f64:	28c7c83a 	sub	r3,r5,r3
    9f68:	344d803a 	cmpltu	r6,r6,r17
    9f6c:	19a7c83a 	sub	r19,r3,r6
    9f70:	3825883a 	mov	r18,r7
    9f74:	983f861e 	bne	r19,zero,9d90 <_gp+0xffff3d60>
    9f78:	8809883a 	mov	r4,r17
    9f7c:	000a6580 	call	a658 <__clzsi2>
    9f80:	10800804 	addi	r2,r2,32
    9f84:	113ffe04 	addi	r4,r2,-8
    9f88:	00c007c4 	movi	r3,31
    9f8c:	193f850e 	bge	r3,r4,9da4 <_gp+0xffff3d74>
    9f90:	10bff604 	addi	r2,r2,-40
    9f94:	8884983a 	sll	r2,r17,r2
    9f98:	0023883a 	mov	r17,zero
    9f9c:	243f880e 	bge	r4,r16,9dc0 <_gp+0xffff3d90>
    9fa0:	00ffe034 	movhi	r3,65408
    9fa4:	18ffffc4 	addi	r3,r3,-1
    9fa8:	8121c83a 	sub	r16,r16,r4
    9fac:	10c6703a 	and	r3,r2,r3
    9fb0:	003f3406 	br	9c84 <_gp+0xffff3c54>
    9fb4:	9100004c 	andi	r4,r18,1
    9fb8:	000b883a 	mov	r5,zero
    9fbc:	0005883a 	mov	r2,zero
    9fc0:	003f4806 	br	9ce4 <_gp+0xffff3cb4>
    9fc4:	298cb03a 	or	r6,r5,r6
    9fc8:	300cc03a 	cmpne	r6,r6,zero
    9fcc:	0005883a 	mov	r2,zero
    9fd0:	003f6406 	br	9d64 <_gp+0xffff3d34>
    9fd4:	10009a1e 	bne	r2,zero,a240 <__subdf3+0x640>
    9fd8:	82400044 	addi	r9,r16,1
    9fdc:	4881ffcc 	andi	r2,r9,2047
    9fe0:	02800044 	movi	r10,1
    9fe4:	5080670e 	bge	r10,r2,a184 <__subdf3+0x584>
    9fe8:	0081ffc4 	movi	r2,2047
    9fec:	4880af26 	beq	r9,r2,a2ac <__subdf3+0x6ac>
    9ff0:	898d883a 	add	r6,r17,r6
    9ff4:	1945883a 	add	r2,r3,r5
    9ff8:	3447803a 	cmpltu	r3,r6,r17
    9ffc:	1887883a 	add	r3,r3,r2
    a000:	182297fa 	slli	r17,r3,31
    a004:	300cd07a 	srli	r6,r6,1
    a008:	1806d07a 	srli	r3,r3,1
    a00c:	4821883a 	mov	r16,r9
    a010:	89a2b03a 	or	r17,r17,r6
    a014:	003f1b06 	br	9c84 <_gp+0xffff3c54>
    a018:	0101ffc4 	movi	r4,2047
    a01c:	813f441e 	bne	r16,r4,9d30 <_gp+0xffff3d00>
    a020:	003f1806 	br	9c84 <_gp+0xffff3c54>
    a024:	843ff844 	addi	r16,r16,-31
    a028:	01400804 	movi	r5,32
    a02c:	1408d83a 	srl	r4,r2,r16
    a030:	19405026 	beq	r3,r5,a174 <__subdf3+0x574>
    a034:	01401004 	movi	r5,64
    a038:	28c7c83a 	sub	r3,r5,r3
    a03c:	10c4983a 	sll	r2,r2,r3
    a040:	88a2b03a 	or	r17,r17,r2
    a044:	8822c03a 	cmpne	r17,r17,zero
    a048:	2462b03a 	or	r17,r4,r17
    a04c:	0007883a 	mov	r3,zero
    a050:	0021883a 	mov	r16,zero
    a054:	003f6d06 	br	9e0c <_gp+0xffff3ddc>
    a058:	11fff804 	addi	r7,r2,-32
    a05c:	01000804 	movi	r4,32
    a060:	29ced83a 	srl	r7,r5,r7
    a064:	11004526 	beq	r2,r4,a17c <__subdf3+0x57c>
    a068:	01001004 	movi	r4,64
    a06c:	2089c83a 	sub	r4,r4,r2
    a070:	2904983a 	sll	r2,r5,r4
    a074:	118cb03a 	or	r6,r2,r6
    a078:	300cc03a 	cmpne	r6,r6,zero
    a07c:	398cb03a 	or	r6,r7,r6
    a080:	0005883a 	mov	r2,zero
    a084:	003f3706 	br	9d64 <_gp+0xffff3d34>
    a088:	80002a26 	beq	r16,zero,a134 <__subdf3+0x534>
    a08c:	0101ffc4 	movi	r4,2047
    a090:	49006626 	beq	r9,r4,a22c <__subdf3+0x62c>
    a094:	0085c83a 	sub	r2,zero,r2
    a098:	18c02034 	orhi	r3,r3,128
    a09c:	01000e04 	movi	r4,56
    a0a0:	20807e16 	blt	r4,r2,a29c <__subdf3+0x69c>
    a0a4:	010007c4 	movi	r4,31
    a0a8:	2080e716 	blt	r4,r2,a448 <__subdf3+0x848>
    a0ac:	01000804 	movi	r4,32
    a0b0:	2089c83a 	sub	r4,r4,r2
    a0b4:	1914983a 	sll	r10,r3,r4
    a0b8:	8890d83a 	srl	r8,r17,r2
    a0bc:	8908983a 	sll	r4,r17,r4
    a0c0:	1884d83a 	srl	r2,r3,r2
    a0c4:	5222b03a 	or	r17,r10,r8
    a0c8:	2006c03a 	cmpne	r3,r4,zero
    a0cc:	88e2b03a 	or	r17,r17,r3
    a0d0:	3463c83a 	sub	r17,r6,r17
    a0d4:	2885c83a 	sub	r2,r5,r2
    a0d8:	344d803a 	cmpltu	r6,r6,r17
    a0dc:	1187c83a 	sub	r3,r2,r6
    a0e0:	4821883a 	mov	r16,r9
    a0e4:	3825883a 	mov	r18,r7
    a0e8:	003f2306 	br	9d78 <_gp+0xffff3d48>
    a0ec:	24d0b03a 	or	r8,r4,r19
    a0f0:	40001b1e 	bne	r8,zero,a160 <__subdf3+0x560>
    a0f4:	0005883a 	mov	r2,zero
    a0f8:	0009883a 	mov	r4,zero
    a0fc:	0021883a 	mov	r16,zero
    a100:	003f4906 	br	9e28 <_gp+0xffff3df8>
    a104:	010007c4 	movi	r4,31
    a108:	20803a16 	blt	r4,r2,a1f4 <__subdf3+0x5f4>
    a10c:	01000804 	movi	r4,32
    a110:	2089c83a 	sub	r4,r4,r2
    a114:	2912983a 	sll	r9,r5,r4
    a118:	3090d83a 	srl	r8,r6,r2
    a11c:	3108983a 	sll	r4,r6,r4
    a120:	2884d83a 	srl	r2,r5,r2
    a124:	4a12b03a 	or	r9,r9,r8
    a128:	2008c03a 	cmpne	r4,r4,zero
    a12c:	4912b03a 	or	r9,r9,r4
    a130:	003f4e06 	br	9e6c <_gp+0xffff3e3c>
    a134:	1c48b03a 	or	r4,r3,r17
    a138:	20003c26 	beq	r4,zero,a22c <__subdf3+0x62c>
    a13c:	0084303a 	nor	r2,zero,r2
    a140:	1000381e 	bne	r2,zero,a224 <__subdf3+0x624>
    a144:	3463c83a 	sub	r17,r6,r17
    a148:	28c5c83a 	sub	r2,r5,r3
    a14c:	344d803a 	cmpltu	r6,r6,r17
    a150:	1187c83a 	sub	r3,r2,r6
    a154:	4821883a 	mov	r16,r9
    a158:	3825883a 	mov	r18,r7
    a15c:	003f0606 	br	9d78 <_gp+0xffff3d48>
    a160:	2023883a 	mov	r17,r4
    a164:	003f0906 	br	9d8c <_gp+0xffff3d5c>
    a168:	0101ffc4 	movi	r4,2047
    a16c:	813f3a1e 	bne	r16,r4,9e58 <_gp+0xffff3e28>
    a170:	003ec406 	br	9c84 <_gp+0xffff3c54>
    a174:	0005883a 	mov	r2,zero
    a178:	003fb106 	br	a040 <_gp+0xffff4010>
    a17c:	0005883a 	mov	r2,zero
    a180:	003fbc06 	br	a074 <_gp+0xffff4044>
    a184:	1c44b03a 	or	r2,r3,r17
    a188:	80008e1e 	bne	r16,zero,a3c4 <__subdf3+0x7c4>
    a18c:	1000c826 	beq	r2,zero,a4b0 <__subdf3+0x8b0>
    a190:	2984b03a 	or	r2,r5,r6
    a194:	103ebb26 	beq	r2,zero,9c84 <_gp+0xffff3c54>
    a198:	8989883a 	add	r4,r17,r6
    a19c:	1945883a 	add	r2,r3,r5
    a1a0:	2447803a 	cmpltu	r3,r4,r17
    a1a4:	1887883a 	add	r3,r3,r2
    a1a8:	1880202c 	andhi	r2,r3,128
    a1ac:	2023883a 	mov	r17,r4
    a1b0:	103f1626 	beq	r2,zero,9e0c <_gp+0xffff3ddc>
    a1b4:	00bfe034 	movhi	r2,65408
    a1b8:	10bfffc4 	addi	r2,r2,-1
    a1bc:	5021883a 	mov	r16,r10
    a1c0:	1886703a 	and	r3,r3,r2
    a1c4:	003eaf06 	br	9c84 <_gp+0xffff3c54>
    a1c8:	3825883a 	mov	r18,r7
    a1cc:	003f0f06 	br	9e0c <_gp+0xffff3ddc>
    a1d0:	1c44b03a 	or	r2,r3,r17
    a1d4:	8000251e 	bne	r16,zero,a26c <__subdf3+0x66c>
    a1d8:	1000661e 	bne	r2,zero,a374 <__subdf3+0x774>
    a1dc:	2990b03a 	or	r8,r5,r6
    a1e0:	40009626 	beq	r8,zero,a43c <__subdf3+0x83c>
    a1e4:	2807883a 	mov	r3,r5
    a1e8:	3023883a 	mov	r17,r6
    a1ec:	3825883a 	mov	r18,r7
    a1f0:	003ea406 	br	9c84 <_gp+0xffff3c54>
    a1f4:	127ff804 	addi	r9,r2,-32
    a1f8:	01000804 	movi	r4,32
    a1fc:	2a52d83a 	srl	r9,r5,r9
    a200:	11008c26 	beq	r2,r4,a434 <__subdf3+0x834>
    a204:	01001004 	movi	r4,64
    a208:	2085c83a 	sub	r2,r4,r2
    a20c:	2884983a 	sll	r2,r5,r2
    a210:	118cb03a 	or	r6,r2,r6
    a214:	300cc03a 	cmpne	r6,r6,zero
    a218:	4992b03a 	or	r9,r9,r6
    a21c:	0005883a 	mov	r2,zero
    a220:	003f1206 	br	9e6c <_gp+0xffff3e3c>
    a224:	0101ffc4 	movi	r4,2047
    a228:	493f9c1e 	bne	r9,r4,a09c <_gp+0xffff406c>
    a22c:	2807883a 	mov	r3,r5
    a230:	3023883a 	mov	r17,r6
    a234:	4821883a 	mov	r16,r9
    a238:	3825883a 	mov	r18,r7
    a23c:	003e9106 	br	9c84 <_gp+0xffff3c54>
    a240:	80001f1e 	bne	r16,zero,a2c0 <__subdf3+0x6c0>
    a244:	1c48b03a 	or	r4,r3,r17
    a248:	20005a26 	beq	r4,zero,a3b4 <__subdf3+0x7b4>
    a24c:	0084303a 	nor	r2,zero,r2
    a250:	1000561e 	bne	r2,zero,a3ac <__subdf3+0x7ac>
    a254:	89a3883a 	add	r17,r17,r6
    a258:	1945883a 	add	r2,r3,r5
    a25c:	898d803a 	cmpltu	r6,r17,r6
    a260:	3087883a 	add	r3,r6,r2
    a264:	4821883a 	mov	r16,r9
    a268:	003f0506 	br	9e80 <_gp+0xffff3e50>
    a26c:	10002b1e 	bne	r2,zero,a31c <__subdf3+0x71c>
    a270:	2984b03a 	or	r2,r5,r6
    a274:	10008026 	beq	r2,zero,a478 <__subdf3+0x878>
    a278:	2807883a 	mov	r3,r5
    a27c:	3023883a 	mov	r17,r6
    a280:	3825883a 	mov	r18,r7
    a284:	0401ffc4 	movi	r16,2047
    a288:	003e7e06 	br	9c84 <_gp+0xffff3c54>
    a28c:	3809883a 	mov	r4,r7
    a290:	0011883a 	mov	r8,zero
    a294:	0005883a 	mov	r2,zero
    a298:	003ee306 	br	9e28 <_gp+0xffff3df8>
    a29c:	1c62b03a 	or	r17,r3,r17
    a2a0:	8822c03a 	cmpne	r17,r17,zero
    a2a4:	0005883a 	mov	r2,zero
    a2a8:	003f8906 	br	a0d0 <_gp+0xffff40a0>
    a2ac:	3809883a 	mov	r4,r7
    a2b0:	4821883a 	mov	r16,r9
    a2b4:	0011883a 	mov	r8,zero
    a2b8:	0005883a 	mov	r2,zero
    a2bc:	003eda06 	br	9e28 <_gp+0xffff3df8>
    a2c0:	0101ffc4 	movi	r4,2047
    a2c4:	49003b26 	beq	r9,r4,a3b4 <__subdf3+0x7b4>
    a2c8:	0085c83a 	sub	r2,zero,r2
    a2cc:	18c02034 	orhi	r3,r3,128
    a2d0:	01000e04 	movi	r4,56
    a2d4:	20806e16 	blt	r4,r2,a490 <__subdf3+0x890>
    a2d8:	010007c4 	movi	r4,31
    a2dc:	20807716 	blt	r4,r2,a4bc <__subdf3+0x8bc>
    a2e0:	01000804 	movi	r4,32
    a2e4:	2089c83a 	sub	r4,r4,r2
    a2e8:	1914983a 	sll	r10,r3,r4
    a2ec:	8890d83a 	srl	r8,r17,r2
    a2f0:	8908983a 	sll	r4,r17,r4
    a2f4:	1884d83a 	srl	r2,r3,r2
    a2f8:	5222b03a 	or	r17,r10,r8
    a2fc:	2006c03a 	cmpne	r3,r4,zero
    a300:	88e2b03a 	or	r17,r17,r3
    a304:	89a3883a 	add	r17,r17,r6
    a308:	1145883a 	add	r2,r2,r5
    a30c:	898d803a 	cmpltu	r6,r17,r6
    a310:	3087883a 	add	r3,r6,r2
    a314:	4821883a 	mov	r16,r9
    a318:	003ed906 	br	9e80 <_gp+0xffff3e50>
    a31c:	2984b03a 	or	r2,r5,r6
    a320:	10004226 	beq	r2,zero,a42c <__subdf3+0x82c>
    a324:	1808d0fa 	srli	r4,r3,3
    a328:	8822d0fa 	srli	r17,r17,3
    a32c:	1806977a 	slli	r3,r3,29
    a330:	2080022c 	andhi	r2,r4,8
    a334:	1c62b03a 	or	r17,r3,r17
    a338:	10000826 	beq	r2,zero,a35c <__subdf3+0x75c>
    a33c:	2812d0fa 	srli	r9,r5,3
    a340:	4880022c 	andhi	r2,r9,8
    a344:	1000051e 	bne	r2,zero,a35c <__subdf3+0x75c>
    a348:	300cd0fa 	srli	r6,r6,3
    a34c:	2804977a 	slli	r2,r5,29
    a350:	4809883a 	mov	r4,r9
    a354:	3825883a 	mov	r18,r7
    a358:	11a2b03a 	or	r17,r2,r6
    a35c:	8806d77a 	srli	r3,r17,29
    a360:	200890fa 	slli	r4,r4,3
    a364:	882290fa 	slli	r17,r17,3
    a368:	0401ffc4 	movi	r16,2047
    a36c:	1906b03a 	or	r3,r3,r4
    a370:	003e4406 	br	9c84 <_gp+0xffff3c54>
    a374:	2984b03a 	or	r2,r5,r6
    a378:	103e4226 	beq	r2,zero,9c84 <_gp+0xffff3c54>
    a37c:	8989c83a 	sub	r4,r17,r6
    a380:	8911803a 	cmpltu	r8,r17,r4
    a384:	1945c83a 	sub	r2,r3,r5
    a388:	1205c83a 	sub	r2,r2,r8
    a38c:	1200202c 	andhi	r8,r2,128
    a390:	403e9a26 	beq	r8,zero,9dfc <_gp+0xffff3dcc>
    a394:	3463c83a 	sub	r17,r6,r17
    a398:	28c5c83a 	sub	r2,r5,r3
    a39c:	344d803a 	cmpltu	r6,r6,r17
    a3a0:	1187c83a 	sub	r3,r2,r6
    a3a4:	3825883a 	mov	r18,r7
    a3a8:	003e3606 	br	9c84 <_gp+0xffff3c54>
    a3ac:	0101ffc4 	movi	r4,2047
    a3b0:	493fc71e 	bne	r9,r4,a2d0 <_gp+0xffff42a0>
    a3b4:	2807883a 	mov	r3,r5
    a3b8:	3023883a 	mov	r17,r6
    a3bc:	4821883a 	mov	r16,r9
    a3c0:	003e3006 	br	9c84 <_gp+0xffff3c54>
    a3c4:	10003626 	beq	r2,zero,a4a0 <__subdf3+0x8a0>
    a3c8:	2984b03a 	or	r2,r5,r6
    a3cc:	10001726 	beq	r2,zero,a42c <__subdf3+0x82c>
    a3d0:	1808d0fa 	srli	r4,r3,3
    a3d4:	8822d0fa 	srli	r17,r17,3
    a3d8:	1806977a 	slli	r3,r3,29
    a3dc:	2080022c 	andhi	r2,r4,8
    a3e0:	1c62b03a 	or	r17,r3,r17
    a3e4:	10000726 	beq	r2,zero,a404 <__subdf3+0x804>
    a3e8:	2812d0fa 	srli	r9,r5,3
    a3ec:	4880022c 	andhi	r2,r9,8
    a3f0:	1000041e 	bne	r2,zero,a404 <__subdf3+0x804>
    a3f4:	300cd0fa 	srli	r6,r6,3
    a3f8:	2804977a 	slli	r2,r5,29
    a3fc:	4809883a 	mov	r4,r9
    a400:	11a2b03a 	or	r17,r2,r6
    a404:	8806d77a 	srli	r3,r17,29
    a408:	200890fa 	slli	r4,r4,3
    a40c:	882290fa 	slli	r17,r17,3
    a410:	3825883a 	mov	r18,r7
    a414:	1906b03a 	or	r3,r3,r4
    a418:	0401ffc4 	movi	r16,2047
    a41c:	003e1906 	br	9c84 <_gp+0xffff3c54>
    a420:	000b883a 	mov	r5,zero
    a424:	0005883a 	mov	r2,zero
    a428:	003e2e06 	br	9ce4 <_gp+0xffff3cb4>
    a42c:	0401ffc4 	movi	r16,2047
    a430:	003e1406 	br	9c84 <_gp+0xffff3c54>
    a434:	0005883a 	mov	r2,zero
    a438:	003f7506 	br	a210 <_gp+0xffff41e0>
    a43c:	0005883a 	mov	r2,zero
    a440:	0009883a 	mov	r4,zero
    a444:	003e7806 	br	9e28 <_gp+0xffff3df8>
    a448:	123ff804 	addi	r8,r2,-32
    a44c:	01000804 	movi	r4,32
    a450:	1a10d83a 	srl	r8,r3,r8
    a454:	11002526 	beq	r2,r4,a4ec <__subdf3+0x8ec>
    a458:	01001004 	movi	r4,64
    a45c:	2085c83a 	sub	r2,r4,r2
    a460:	1884983a 	sll	r2,r3,r2
    a464:	1444b03a 	or	r2,r2,r17
    a468:	1004c03a 	cmpne	r2,r2,zero
    a46c:	40a2b03a 	or	r17,r8,r2
    a470:	0005883a 	mov	r2,zero
    a474:	003f1606 	br	a0d0 <_gp+0xffff40a0>
    a478:	02000434 	movhi	r8,16
    a47c:	0009883a 	mov	r4,zero
    a480:	423fffc4 	addi	r8,r8,-1
    a484:	00bfffc4 	movi	r2,-1
    a488:	0401ffc4 	movi	r16,2047
    a48c:	003e6606 	br	9e28 <_gp+0xffff3df8>
    a490:	1c62b03a 	or	r17,r3,r17
    a494:	8822c03a 	cmpne	r17,r17,zero
    a498:	0005883a 	mov	r2,zero
    a49c:	003f9906 	br	a304 <_gp+0xffff42d4>
    a4a0:	2807883a 	mov	r3,r5
    a4a4:	3023883a 	mov	r17,r6
    a4a8:	0401ffc4 	movi	r16,2047
    a4ac:	003df506 	br	9c84 <_gp+0xffff3c54>
    a4b0:	2807883a 	mov	r3,r5
    a4b4:	3023883a 	mov	r17,r6
    a4b8:	003df206 	br	9c84 <_gp+0xffff3c54>
    a4bc:	123ff804 	addi	r8,r2,-32
    a4c0:	01000804 	movi	r4,32
    a4c4:	1a10d83a 	srl	r8,r3,r8
    a4c8:	11000a26 	beq	r2,r4,a4f4 <__subdf3+0x8f4>
    a4cc:	01001004 	movi	r4,64
    a4d0:	2085c83a 	sub	r2,r4,r2
    a4d4:	1884983a 	sll	r2,r3,r2
    a4d8:	1444b03a 	or	r2,r2,r17
    a4dc:	1004c03a 	cmpne	r2,r2,zero
    a4e0:	40a2b03a 	or	r17,r8,r2
    a4e4:	0005883a 	mov	r2,zero
    a4e8:	003f8606 	br	a304 <_gp+0xffff42d4>
    a4ec:	0005883a 	mov	r2,zero
    a4f0:	003fdc06 	br	a464 <_gp+0xffff4434>
    a4f4:	0005883a 	mov	r2,zero
    a4f8:	003ff706 	br	a4d8 <_gp+0xffff44a8>

0000a4fc <__fixdfsi>:
    a4fc:	280cd53a 	srli	r6,r5,20
    a500:	00c00434 	movhi	r3,16
    a504:	18ffffc4 	addi	r3,r3,-1
    a508:	3181ffcc 	andi	r6,r6,2047
    a50c:	01c0ff84 	movi	r7,1022
    a510:	28c6703a 	and	r3,r5,r3
    a514:	280ad7fa 	srli	r5,r5,31
    a518:	3980120e 	bge	r7,r6,a564 <__fixdfsi+0x68>
    a51c:	00810744 	movi	r2,1053
    a520:	11800c16 	blt	r2,r6,a554 <__fixdfsi+0x58>
    a524:	00810cc4 	movi	r2,1075
    a528:	1185c83a 	sub	r2,r2,r6
    a52c:	01c007c4 	movi	r7,31
    a530:	18c00434 	orhi	r3,r3,16
    a534:	38800d16 	blt	r7,r2,a56c <__fixdfsi+0x70>
    a538:	31befb44 	addi	r6,r6,-1043
    a53c:	2084d83a 	srl	r2,r4,r2
    a540:	1986983a 	sll	r3,r3,r6
    a544:	1884b03a 	or	r2,r3,r2
    a548:	28000726 	beq	r5,zero,a568 <__fixdfsi+0x6c>
    a54c:	0085c83a 	sub	r2,zero,r2
    a550:	f800283a 	ret
    a554:	00a00034 	movhi	r2,32768
    a558:	10bfffc4 	addi	r2,r2,-1
    a55c:	2885883a 	add	r2,r5,r2
    a560:	f800283a 	ret
    a564:	0005883a 	mov	r2,zero
    a568:	f800283a 	ret
    a56c:	008104c4 	movi	r2,1043
    a570:	1185c83a 	sub	r2,r2,r6
    a574:	1884d83a 	srl	r2,r3,r2
    a578:	003ff306 	br	a548 <_gp+0xffff4518>

0000a57c <__floatsidf>:
    a57c:	defffd04 	addi	sp,sp,-12
    a580:	dfc00215 	stw	ra,8(sp)
    a584:	dc400115 	stw	r17,4(sp)
    a588:	dc000015 	stw	r16,0(sp)
    a58c:	20002b26 	beq	r4,zero,a63c <__floatsidf+0xc0>
    a590:	2023883a 	mov	r17,r4
    a594:	2020d7fa 	srli	r16,r4,31
    a598:	20002d16 	blt	r4,zero,a650 <__floatsidf+0xd4>
    a59c:	8809883a 	mov	r4,r17
    a5a0:	000a6580 	call	a658 <__clzsi2>
    a5a4:	01410784 	movi	r5,1054
    a5a8:	288bc83a 	sub	r5,r5,r2
    a5ac:	01010cc4 	movi	r4,1075
    a5b0:	2149c83a 	sub	r4,r4,r5
    a5b4:	00c007c4 	movi	r3,31
    a5b8:	1900160e 	bge	r3,r4,a614 <__floatsidf+0x98>
    a5bc:	00c104c4 	movi	r3,1043
    a5c0:	1947c83a 	sub	r3,r3,r5
    a5c4:	88c6983a 	sll	r3,r17,r3
    a5c8:	00800434 	movhi	r2,16
    a5cc:	10bfffc4 	addi	r2,r2,-1
    a5d0:	1886703a 	and	r3,r3,r2
    a5d4:	2941ffcc 	andi	r5,r5,2047
    a5d8:	800d883a 	mov	r6,r16
    a5dc:	0005883a 	mov	r2,zero
    a5e0:	280a953a 	slli	r5,r5,20
    a5e4:	31803fcc 	andi	r6,r6,255
    a5e8:	01000434 	movhi	r4,16
    a5ec:	300c97fa 	slli	r6,r6,31
    a5f0:	213fffc4 	addi	r4,r4,-1
    a5f4:	1906703a 	and	r3,r3,r4
    a5f8:	1946b03a 	or	r3,r3,r5
    a5fc:	1986b03a 	or	r3,r3,r6
    a600:	dfc00217 	ldw	ra,8(sp)
    a604:	dc400117 	ldw	r17,4(sp)
    a608:	dc000017 	ldw	r16,0(sp)
    a60c:	dec00304 	addi	sp,sp,12
    a610:	f800283a 	ret
    a614:	00c002c4 	movi	r3,11
    a618:	1887c83a 	sub	r3,r3,r2
    a61c:	88c6d83a 	srl	r3,r17,r3
    a620:	8904983a 	sll	r2,r17,r4
    a624:	01000434 	movhi	r4,16
    a628:	213fffc4 	addi	r4,r4,-1
    a62c:	2941ffcc 	andi	r5,r5,2047
    a630:	1906703a 	and	r3,r3,r4
    a634:	800d883a 	mov	r6,r16
    a638:	003fe906 	br	a5e0 <_gp+0xffff45b0>
    a63c:	000d883a 	mov	r6,zero
    a640:	000b883a 	mov	r5,zero
    a644:	0007883a 	mov	r3,zero
    a648:	0005883a 	mov	r2,zero
    a64c:	003fe406 	br	a5e0 <_gp+0xffff45b0>
    a650:	0123c83a 	sub	r17,zero,r4
    a654:	003fd106 	br	a59c <_gp+0xffff456c>

0000a658 <__clzsi2>:
    a658:	00bfffd4 	movui	r2,65535
    a65c:	11000536 	bltu	r2,r4,a674 <__clzsi2+0x1c>
    a660:	00803fc4 	movi	r2,255
    a664:	11000f36 	bltu	r2,r4,a6a4 <__clzsi2+0x4c>
    a668:	00800804 	movi	r2,32
    a66c:	0007883a 	mov	r3,zero
    a670:	00000506 	br	a688 <__clzsi2+0x30>
    a674:	00804034 	movhi	r2,256
    a678:	10bfffc4 	addi	r2,r2,-1
    a67c:	11000c2e 	bgeu	r2,r4,a6b0 <__clzsi2+0x58>
    a680:	00800204 	movi	r2,8
    a684:	00c00604 	movi	r3,24
    a688:	20c8d83a 	srl	r4,r4,r3
    a68c:	00c00074 	movhi	r3,1
    a690:	18f23304 	addi	r3,r3,-14132
    a694:	1909883a 	add	r4,r3,r4
    a698:	20c00003 	ldbu	r3,0(r4)
    a69c:	10c5c83a 	sub	r2,r2,r3
    a6a0:	f800283a 	ret
    a6a4:	00800604 	movi	r2,24
    a6a8:	00c00204 	movi	r3,8
    a6ac:	003ff606 	br	a688 <_gp+0xffff4658>
    a6b0:	00800404 	movi	r2,16
    a6b4:	1007883a 	mov	r3,r2
    a6b8:	003ff306 	br	a688 <_gp+0xffff4658>

0000a6bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a6bc:	defff904 	addi	sp,sp,-28
    a6c0:	dfc00615 	stw	ra,24(sp)
    a6c4:	df000515 	stw	fp,20(sp)
    a6c8:	df000504 	addi	fp,sp,20
    a6cc:	e13ffc15 	stw	r4,-16(fp)
    a6d0:	e17ffd15 	stw	r5,-12(fp)
    a6d4:	e1bffe15 	stw	r6,-8(fp)
    a6d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    a6dc:	e0800217 	ldw	r2,8(fp)
    a6e0:	d8800015 	stw	r2,0(sp)
    a6e4:	e1ffff17 	ldw	r7,-4(fp)
    a6e8:	e1bffe17 	ldw	r6,-8(fp)
    a6ec:	e17ffd17 	ldw	r5,-12(fp)
    a6f0:	e13ffc17 	ldw	r4,-16(fp)
    a6f4:	000a86c0 	call	a86c <alt_iic_isr_register>
}  
    a6f8:	e037883a 	mov	sp,fp
    a6fc:	dfc00117 	ldw	ra,4(sp)
    a700:	df000017 	ldw	fp,0(sp)
    a704:	dec00204 	addi	sp,sp,8
    a708:	f800283a 	ret

0000a70c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    a70c:	defff904 	addi	sp,sp,-28
    a710:	df000615 	stw	fp,24(sp)
    a714:	df000604 	addi	fp,sp,24
    a718:	e13ffe15 	stw	r4,-8(fp)
    a71c:	e17fff15 	stw	r5,-4(fp)
    a720:	e0bfff17 	ldw	r2,-4(fp)
    a724:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a728:	0005303a 	rdctl	r2,status
    a72c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a730:	e0fffb17 	ldw	r3,-20(fp)
    a734:	00bfff84 	movi	r2,-2
    a738:	1884703a 	and	r2,r3,r2
    a73c:	1001703a 	wrctl	status,r2
  
  return context;
    a740:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a744:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    a748:	00c00044 	movi	r3,1
    a74c:	e0bffa17 	ldw	r2,-24(fp)
    a750:	1884983a 	sll	r2,r3,r2
    a754:	1007883a 	mov	r3,r2
    a758:	d0a5b917 	ldw	r2,-26908(gp)
    a75c:	1884b03a 	or	r2,r3,r2
    a760:	d0a5b915 	stw	r2,-26908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a764:	d0a5b917 	ldw	r2,-26908(gp)
    a768:	100170fa 	wrctl	ienable,r2
    a76c:	e0bffc17 	ldw	r2,-16(fp)
    a770:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a774:	e0bffd17 	ldw	r2,-12(fp)
    a778:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a77c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    a780:	0001883a 	nop
}
    a784:	e037883a 	mov	sp,fp
    a788:	df000017 	ldw	fp,0(sp)
    a78c:	dec00104 	addi	sp,sp,4
    a790:	f800283a 	ret

0000a794 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    a794:	defff904 	addi	sp,sp,-28
    a798:	df000615 	stw	fp,24(sp)
    a79c:	df000604 	addi	fp,sp,24
    a7a0:	e13ffe15 	stw	r4,-8(fp)
    a7a4:	e17fff15 	stw	r5,-4(fp)
    a7a8:	e0bfff17 	ldw	r2,-4(fp)
    a7ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a7b0:	0005303a 	rdctl	r2,status
    a7b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a7b8:	e0fffb17 	ldw	r3,-20(fp)
    a7bc:	00bfff84 	movi	r2,-2
    a7c0:	1884703a 	and	r2,r3,r2
    a7c4:	1001703a 	wrctl	status,r2
  
  return context;
    a7c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    a7cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    a7d0:	00c00044 	movi	r3,1
    a7d4:	e0bffa17 	ldw	r2,-24(fp)
    a7d8:	1884983a 	sll	r2,r3,r2
    a7dc:	0084303a 	nor	r2,zero,r2
    a7e0:	1007883a 	mov	r3,r2
    a7e4:	d0a5b917 	ldw	r2,-26908(gp)
    a7e8:	1884703a 	and	r2,r3,r2
    a7ec:	d0a5b915 	stw	r2,-26908(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    a7f0:	d0a5b917 	ldw	r2,-26908(gp)
    a7f4:	100170fa 	wrctl	ienable,r2
    a7f8:	e0bffc17 	ldw	r2,-16(fp)
    a7fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a800:	e0bffd17 	ldw	r2,-12(fp)
    a804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    a808:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    a80c:	0001883a 	nop
}
    a810:	e037883a 	mov	sp,fp
    a814:	df000017 	ldw	fp,0(sp)
    a818:	dec00104 	addi	sp,sp,4
    a81c:	f800283a 	ret

0000a820 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    a820:	defffc04 	addi	sp,sp,-16
    a824:	df000315 	stw	fp,12(sp)
    a828:	df000304 	addi	fp,sp,12
    a82c:	e13ffe15 	stw	r4,-8(fp)
    a830:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    a834:	000530fa 	rdctl	r2,ienable
    a838:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    a83c:	00c00044 	movi	r3,1
    a840:	e0bfff17 	ldw	r2,-4(fp)
    a844:	1884983a 	sll	r2,r3,r2
    a848:	1007883a 	mov	r3,r2
    a84c:	e0bffd17 	ldw	r2,-12(fp)
    a850:	1884703a 	and	r2,r3,r2
    a854:	1004c03a 	cmpne	r2,r2,zero
    a858:	10803fcc 	andi	r2,r2,255
}
    a85c:	e037883a 	mov	sp,fp
    a860:	df000017 	ldw	fp,0(sp)
    a864:	dec00104 	addi	sp,sp,4
    a868:	f800283a 	ret

0000a86c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    a86c:	defff504 	addi	sp,sp,-44
    a870:	dfc00a15 	stw	ra,40(sp)
    a874:	df000915 	stw	fp,36(sp)
    a878:	df000904 	addi	fp,sp,36
    a87c:	e13ffc15 	stw	r4,-16(fp)
    a880:	e17ffd15 	stw	r5,-12(fp)
    a884:	e1bffe15 	stw	r6,-8(fp)
    a888:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    a88c:	00bffa84 	movi	r2,-22
    a890:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    a894:	e0bffd17 	ldw	r2,-12(fp)
    a898:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    a89c:	e0bff817 	ldw	r2,-32(fp)
    a8a0:	10800808 	cmpgei	r2,r2,32
    a8a4:	1000271e 	bne	r2,zero,a944 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a8a8:	0005303a 	rdctl	r2,status
    a8ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8b0:	e0fffb17 	ldw	r3,-20(fp)
    a8b4:	00bfff84 	movi	r2,-2
    a8b8:	1884703a 	and	r2,r3,r2
    a8bc:	1001703a 	wrctl	status,r2
  
  return context;
    a8c0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    a8c4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    a8c8:	00800074 	movhi	r2,1
    a8cc:	10bdcd04 	addi	r2,r2,-2252
    a8d0:	e0fff817 	ldw	r3,-32(fp)
    a8d4:	180690fa 	slli	r3,r3,3
    a8d8:	10c5883a 	add	r2,r2,r3
    a8dc:	e0fffe17 	ldw	r3,-8(fp)
    a8e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    a8e4:	00800074 	movhi	r2,1
    a8e8:	10bdcd04 	addi	r2,r2,-2252
    a8ec:	e0fff817 	ldw	r3,-32(fp)
    a8f0:	180690fa 	slli	r3,r3,3
    a8f4:	10c5883a 	add	r2,r2,r3
    a8f8:	10800104 	addi	r2,r2,4
    a8fc:	e0ffff17 	ldw	r3,-4(fp)
    a900:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    a904:	e0bffe17 	ldw	r2,-8(fp)
    a908:	10000526 	beq	r2,zero,a920 <alt_iic_isr_register+0xb4>
    a90c:	e0bff817 	ldw	r2,-32(fp)
    a910:	100b883a 	mov	r5,r2
    a914:	e13ffc17 	ldw	r4,-16(fp)
    a918:	000a70c0 	call	a70c <alt_ic_irq_enable>
    a91c:	00000406 	br	a930 <alt_iic_isr_register+0xc4>
    a920:	e0bff817 	ldw	r2,-32(fp)
    a924:	100b883a 	mov	r5,r2
    a928:	e13ffc17 	ldw	r4,-16(fp)
    a92c:	000a7940 	call	a794 <alt_ic_irq_disable>
    a930:	e0bff715 	stw	r2,-36(fp)
    a934:	e0bffa17 	ldw	r2,-24(fp)
    a938:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a93c:	e0bff917 	ldw	r2,-28(fp)
    a940:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    a944:	e0bff717 	ldw	r2,-36(fp)
}
    a948:	e037883a 	mov	sp,fp
    a94c:	dfc00117 	ldw	ra,4(sp)
    a950:	df000017 	ldw	fp,0(sp)
    a954:	dec00204 	addi	sp,sp,8
    a958:	f800283a 	ret

0000a95c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a95c:	defffc04 	addi	sp,sp,-16
    a960:	df000315 	stw	fp,12(sp)
    a964:	df000304 	addi	fp,sp,12
    a968:	e13ffd15 	stw	r4,-12(fp)
    a96c:	e17ffe15 	stw	r5,-8(fp)
    a970:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a974:	e0fffe17 	ldw	r3,-8(fp)
    a978:	e0bffd17 	ldw	r2,-12(fp)
    a97c:	18800c26 	beq	r3,r2,a9b0 <alt_load_section+0x54>
  {
    while( to != end )
    a980:	00000806 	br	a9a4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    a984:	e0bffe17 	ldw	r2,-8(fp)
    a988:	10c00104 	addi	r3,r2,4
    a98c:	e0fffe15 	stw	r3,-8(fp)
    a990:	e0fffd17 	ldw	r3,-12(fp)
    a994:	19000104 	addi	r4,r3,4
    a998:	e13ffd15 	stw	r4,-12(fp)
    a99c:	18c00017 	ldw	r3,0(r3)
    a9a0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a9a4:	e0fffe17 	ldw	r3,-8(fp)
    a9a8:	e0bfff17 	ldw	r2,-4(fp)
    a9ac:	18bff51e 	bne	r3,r2,a984 <_gp+0xffff4954>
    {
      *to++ = *from++;
    }
  }
}
    a9b0:	0001883a 	nop
    a9b4:	e037883a 	mov	sp,fp
    a9b8:	df000017 	ldw	fp,0(sp)
    a9bc:	dec00104 	addi	sp,sp,4
    a9c0:	f800283a 	ret

0000a9c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a9c4:	defffe04 	addi	sp,sp,-8
    a9c8:	dfc00115 	stw	ra,4(sp)
    a9cc:	df000015 	stw	fp,0(sp)
    a9d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a9d4:	01800074 	movhi	r6,1
    a9d8:	31b82104 	addi	r6,r6,-8060
    a9dc:	01400074 	movhi	r5,1
    a9e0:	29728104 	addi	r5,r5,-13820
    a9e4:	01000074 	movhi	r4,1
    a9e8:	21382104 	addi	r4,r4,-8060
    a9ec:	000a95c0 	call	a95c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a9f0:	01800074 	movhi	r6,1
    a9f4:	31a08c04 	addi	r6,r6,-32208
    a9f8:	01400074 	movhi	r5,1
    a9fc:	29600804 	addi	r5,r5,-32736
    aa00:	01000074 	movhi	r4,1
    aa04:	21200804 	addi	r4,r4,-32736
    aa08:	000a95c0 	call	a95c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    aa0c:	01800074 	movhi	r6,1
    aa10:	31b28104 	addi	r6,r6,-13820
    aa14:	01400074 	movhi	r5,1
    aa18:	29723304 	addi	r5,r5,-14132
    aa1c:	01000074 	movhi	r4,1
    aa20:	21323304 	addi	r4,r4,-14132
    aa24:	000a95c0 	call	a95c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    aa28:	000b8240 	call	b824 <alt_dcache_flush_all>
  alt_icache_flush_all();
    aa2c:	000ba100 	call	ba10 <alt_icache_flush_all>
}
    aa30:	0001883a 	nop
    aa34:	e037883a 	mov	sp,fp
    aa38:	dfc00117 	ldw	ra,4(sp)
    aa3c:	df000017 	ldw	fp,0(sp)
    aa40:	dec00204 	addi	sp,sp,8
    aa44:	f800283a 	ret

0000aa48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    aa48:	defffd04 	addi	sp,sp,-12
    aa4c:	dfc00215 	stw	ra,8(sp)
    aa50:	df000115 	stw	fp,4(sp)
    aa54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    aa58:	0009883a 	mov	r4,zero
    aa5c:	000aaf80 	call	aaf8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    aa60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    aa64:	000ab300 	call	ab30 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    aa68:	01800074 	movhi	r6,1
    aa6c:	31b27304 	addi	r6,r6,-13876
    aa70:	01400074 	movhi	r5,1
    aa74:	29727304 	addi	r5,r5,-13876
    aa78:	01000074 	movhi	r4,1
    aa7c:	21327304 	addi	r4,r4,-13876
    aa80:	000bbb00 	call	bbb0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    aa84:	000b9500 	call	b950 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    aa88:	01000074 	movhi	r4,1
    aa8c:	212e6c04 	addi	r4,r4,-18000
    aa90:	000c3580 	call	c358 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    aa94:	d0a5ba17 	ldw	r2,-26904(gp)
    aa98:	d0e5bb17 	ldw	r3,-26900(gp)
    aa9c:	d125bc17 	ldw	r4,-26896(gp)
    aaa0:	200d883a 	mov	r6,r4
    aaa4:	180b883a 	mov	r5,r3
    aaa8:	1009883a 	mov	r4,r2
    aaac:	00085c40 	call	85c4 <main>
    aab0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    aab4:	01000044 	movi	r4,1
    aab8:	000b74c0 	call	b74c <close>
  exit (result);
    aabc:	e13fff17 	ldw	r4,-4(fp)
    aac0:	000c36c0 	call	c36c <exit>

0000aac4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    aac4:	defffd04 	addi	sp,sp,-12
    aac8:	dfc00215 	stw	ra,8(sp)
    aacc:	df000115 	stw	fp,4(sp)
    aad0:	df000104 	addi	fp,sp,4
    aad4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    aad8:	d1600d04 	addi	r5,gp,-32716
    aadc:	e13fff17 	ldw	r4,-4(fp)
    aae0:	000b8ac0 	call	b8ac <alt_dev_llist_insert>
}
    aae4:	e037883a 	mov	sp,fp
    aae8:	dfc00117 	ldw	ra,4(sp)
    aaec:	df000017 	ldw	fp,0(sp)
    aaf0:	dec00204 	addi	sp,sp,8
    aaf4:	f800283a 	ret

0000aaf8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    aaf8:	defffd04 	addi	sp,sp,-12
    aafc:	dfc00215 	stw	ra,8(sp)
    ab00:	df000115 	stw	fp,4(sp)
    ab04:	df000104 	addi	fp,sp,4
    ab08:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ab0c:	000c0d80 	call	c0d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ab10:	00800044 	movi	r2,1
    ab14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ab18:	0001883a 	nop
    ab1c:	e037883a 	mov	sp,fp
    ab20:	dfc00117 	ldw	ra,4(sp)
    ab24:	df000017 	ldw	fp,0(sp)
    ab28:	dec00204 	addi	sp,sp,8
    ab2c:	f800283a 	ret

0000ab30 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ab30:	defffe04 	addi	sp,sp,-8
    ab34:	dfc00115 	stw	ra,4(sp)
    ab38:	df000015 	stw	fp,0(sp)
    ab3c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ab40:	01800084 	movi	r6,2
    ab44:	000b883a 	mov	r5,zero
    ab48:	01000074 	movhi	r4,1
    ab4c:	21328b04 	addi	r4,r4,-13780
    ab50:	000ace00 	call	ace0 <altera_avalon_jtag_uart_init>
    ab54:	01000074 	movhi	r4,1
    ab58:	21328104 	addi	r4,r4,-13820
    ab5c:	000aac40 	call	aac4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ab60:	0001883a 	nop
}
    ab64:	0001883a 	nop
    ab68:	e037883a 	mov	sp,fp
    ab6c:	dfc00117 	ldw	ra,4(sp)
    ab70:	df000017 	ldw	fp,0(sp)
    ab74:	dec00204 	addi	sp,sp,8
    ab78:	f800283a 	ret

0000ab7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    ab7c:	defffa04 	addi	sp,sp,-24
    ab80:	dfc00515 	stw	ra,20(sp)
    ab84:	df000415 	stw	fp,16(sp)
    ab88:	df000404 	addi	fp,sp,16
    ab8c:	e13ffd15 	stw	r4,-12(fp)
    ab90:	e17ffe15 	stw	r5,-8(fp)
    ab94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ab98:	e0bffd17 	ldw	r2,-12(fp)
    ab9c:	10800017 	ldw	r2,0(r2)
    aba0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    aba4:	e0bffc17 	ldw	r2,-16(fp)
    aba8:	10c00a04 	addi	r3,r2,40
    abac:	e0bffd17 	ldw	r2,-12(fp)
    abb0:	10800217 	ldw	r2,8(r2)
    abb4:	100f883a 	mov	r7,r2
    abb8:	e1bfff17 	ldw	r6,-4(fp)
    abbc:	e17ffe17 	ldw	r5,-8(fp)
    abc0:	1809883a 	mov	r4,r3
    abc4:	000b1a40 	call	b1a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    abc8:	e037883a 	mov	sp,fp
    abcc:	dfc00117 	ldw	ra,4(sp)
    abd0:	df000017 	ldw	fp,0(sp)
    abd4:	dec00204 	addi	sp,sp,8
    abd8:	f800283a 	ret

0000abdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    abdc:	defffa04 	addi	sp,sp,-24
    abe0:	dfc00515 	stw	ra,20(sp)
    abe4:	df000415 	stw	fp,16(sp)
    abe8:	df000404 	addi	fp,sp,16
    abec:	e13ffd15 	stw	r4,-12(fp)
    abf0:	e17ffe15 	stw	r5,-8(fp)
    abf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    abf8:	e0bffd17 	ldw	r2,-12(fp)
    abfc:	10800017 	ldw	r2,0(r2)
    ac00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ac04:	e0bffc17 	ldw	r2,-16(fp)
    ac08:	10c00a04 	addi	r3,r2,40
    ac0c:	e0bffd17 	ldw	r2,-12(fp)
    ac10:	10800217 	ldw	r2,8(r2)
    ac14:	100f883a 	mov	r7,r2
    ac18:	e1bfff17 	ldw	r6,-4(fp)
    ac1c:	e17ffe17 	ldw	r5,-8(fp)
    ac20:	1809883a 	mov	r4,r3
    ac24:	000b3c00 	call	b3c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ac28:	e037883a 	mov	sp,fp
    ac2c:	dfc00117 	ldw	ra,4(sp)
    ac30:	df000017 	ldw	fp,0(sp)
    ac34:	dec00204 	addi	sp,sp,8
    ac38:	f800283a 	ret

0000ac3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ac3c:	defffc04 	addi	sp,sp,-16
    ac40:	dfc00315 	stw	ra,12(sp)
    ac44:	df000215 	stw	fp,8(sp)
    ac48:	df000204 	addi	fp,sp,8
    ac4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ac50:	e0bfff17 	ldw	r2,-4(fp)
    ac54:	10800017 	ldw	r2,0(r2)
    ac58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ac5c:	e0bffe17 	ldw	r2,-8(fp)
    ac60:	10c00a04 	addi	r3,r2,40
    ac64:	e0bfff17 	ldw	r2,-4(fp)
    ac68:	10800217 	ldw	r2,8(r2)
    ac6c:	100b883a 	mov	r5,r2
    ac70:	1809883a 	mov	r4,r3
    ac74:	000b04c0 	call	b04c <altera_avalon_jtag_uart_close>
}
    ac78:	e037883a 	mov	sp,fp
    ac7c:	dfc00117 	ldw	ra,4(sp)
    ac80:	df000017 	ldw	fp,0(sp)
    ac84:	dec00204 	addi	sp,sp,8
    ac88:	f800283a 	ret

0000ac8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ac8c:	defffa04 	addi	sp,sp,-24
    ac90:	dfc00515 	stw	ra,20(sp)
    ac94:	df000415 	stw	fp,16(sp)
    ac98:	df000404 	addi	fp,sp,16
    ac9c:	e13ffd15 	stw	r4,-12(fp)
    aca0:	e17ffe15 	stw	r5,-8(fp)
    aca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    aca8:	e0bffd17 	ldw	r2,-12(fp)
    acac:	10800017 	ldw	r2,0(r2)
    acb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    acb4:	e0bffc17 	ldw	r2,-16(fp)
    acb8:	10800a04 	addi	r2,r2,40
    acbc:	e1bfff17 	ldw	r6,-4(fp)
    acc0:	e17ffe17 	ldw	r5,-8(fp)
    acc4:	1009883a 	mov	r4,r2
    acc8:	000b0b40 	call	b0b4 <altera_avalon_jtag_uart_ioctl>
}
    accc:	e037883a 	mov	sp,fp
    acd0:	dfc00117 	ldw	ra,4(sp)
    acd4:	df000017 	ldw	fp,0(sp)
    acd8:	dec00204 	addi	sp,sp,8
    acdc:	f800283a 	ret

0000ace0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ace0:	defffa04 	addi	sp,sp,-24
    ace4:	dfc00515 	stw	ra,20(sp)
    ace8:	df000415 	stw	fp,16(sp)
    acec:	df000404 	addi	fp,sp,16
    acf0:	e13ffd15 	stw	r4,-12(fp)
    acf4:	e17ffe15 	stw	r5,-8(fp)
    acf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    acfc:	e0bffd17 	ldw	r2,-12(fp)
    ad00:	00c00044 	movi	r3,1
    ad04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ad08:	e0bffd17 	ldw	r2,-12(fp)
    ad0c:	10800017 	ldw	r2,0(r2)
    ad10:	10800104 	addi	r2,r2,4
    ad14:	1007883a 	mov	r3,r2
    ad18:	e0bffd17 	ldw	r2,-12(fp)
    ad1c:	10800817 	ldw	r2,32(r2)
    ad20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ad24:	e0bffe17 	ldw	r2,-8(fp)
    ad28:	e0ffff17 	ldw	r3,-4(fp)
    ad2c:	d8000015 	stw	zero,0(sp)
    ad30:	e1fffd17 	ldw	r7,-12(fp)
    ad34:	01800074 	movhi	r6,1
    ad38:	31ab6804 	addi	r6,r6,-21088
    ad3c:	180b883a 	mov	r5,r3
    ad40:	1009883a 	mov	r4,r2
    ad44:	000a6bc0 	call	a6bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ad48:	e0bffd17 	ldw	r2,-12(fp)
    ad4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ad50:	e0bffd17 	ldw	r2,-12(fp)
    ad54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ad58:	d0e5be17 	ldw	r3,-26888(gp)
    ad5c:	e1fffd17 	ldw	r7,-12(fp)
    ad60:	01800074 	movhi	r6,1
    ad64:	31abeb04 	addi	r6,r6,-20564
    ad68:	180b883a 	mov	r5,r3
    ad6c:	1009883a 	mov	r4,r2
    ad70:	000b5e40 	call	b5e4 <alt_alarm_start>
    ad74:	1000040e 	bge	r2,zero,ad88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ad78:	e0fffd17 	ldw	r3,-12(fp)
    ad7c:	00a00034 	movhi	r2,32768
    ad80:	10bfffc4 	addi	r2,r2,-1
    ad84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ad88:	0001883a 	nop
    ad8c:	e037883a 	mov	sp,fp
    ad90:	dfc00117 	ldw	ra,4(sp)
    ad94:	df000017 	ldw	fp,0(sp)
    ad98:	dec00204 	addi	sp,sp,8
    ad9c:	f800283a 	ret

0000ada0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ada0:	defff804 	addi	sp,sp,-32
    ada4:	df000715 	stw	fp,28(sp)
    ada8:	df000704 	addi	fp,sp,28
    adac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    adb0:	e0bfff17 	ldw	r2,-4(fp)
    adb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    adb8:	e0bffb17 	ldw	r2,-20(fp)
    adbc:	10800017 	ldw	r2,0(r2)
    adc0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    adc4:	e0bffc17 	ldw	r2,-16(fp)
    adc8:	10800104 	addi	r2,r2,4
    adcc:	10800037 	ldwio	r2,0(r2)
    add0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    add4:	e0bffd17 	ldw	r2,-12(fp)
    add8:	1080c00c 	andi	r2,r2,768
    addc:	10006d26 	beq	r2,zero,af94 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ade0:	e0bffd17 	ldw	r2,-12(fp)
    ade4:	1080400c 	andi	r2,r2,256
    ade8:	10003526 	beq	r2,zero,aec0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    adec:	00800074 	movhi	r2,1
    adf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    adf4:	e0bffb17 	ldw	r2,-20(fp)
    adf8:	10800a17 	ldw	r2,40(r2)
    adfc:	10800044 	addi	r2,r2,1
    ae00:	1081ffcc 	andi	r2,r2,2047
    ae04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    ae08:	e0bffb17 	ldw	r2,-20(fp)
    ae0c:	10c00b17 	ldw	r3,44(r2)
    ae10:	e0bffe17 	ldw	r2,-8(fp)
    ae14:	18801526 	beq	r3,r2,ae6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ae18:	e0bffc17 	ldw	r2,-16(fp)
    ae1c:	10800037 	ldwio	r2,0(r2)
    ae20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ae24:	e0bff917 	ldw	r2,-28(fp)
    ae28:	10a0000c 	andi	r2,r2,32768
    ae2c:	10001126 	beq	r2,zero,ae74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ae30:	e0bffb17 	ldw	r2,-20(fp)
    ae34:	10800a17 	ldw	r2,40(r2)
    ae38:	e0fff917 	ldw	r3,-28(fp)
    ae3c:	1809883a 	mov	r4,r3
    ae40:	e0fffb17 	ldw	r3,-20(fp)
    ae44:	1885883a 	add	r2,r3,r2
    ae48:	10800e04 	addi	r2,r2,56
    ae4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ae50:	e0bffb17 	ldw	r2,-20(fp)
    ae54:	10800a17 	ldw	r2,40(r2)
    ae58:	10800044 	addi	r2,r2,1
    ae5c:	10c1ffcc 	andi	r3,r2,2047
    ae60:	e0bffb17 	ldw	r2,-20(fp)
    ae64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ae68:	003fe206 	br	adf4 <_gp+0xffff4dc4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ae6c:	0001883a 	nop
    ae70:	00000106 	br	ae78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ae74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ae78:	e0bff917 	ldw	r2,-28(fp)
    ae7c:	10bfffec 	andhi	r2,r2,65535
    ae80:	10000f26 	beq	r2,zero,aec0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ae84:	e0bffb17 	ldw	r2,-20(fp)
    ae88:	10c00817 	ldw	r3,32(r2)
    ae8c:	00bfff84 	movi	r2,-2
    ae90:	1886703a 	and	r3,r3,r2
    ae94:	e0bffb17 	ldw	r2,-20(fp)
    ae98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ae9c:	e0bffc17 	ldw	r2,-16(fp)
    aea0:	10800104 	addi	r2,r2,4
    aea4:	1007883a 	mov	r3,r2
    aea8:	e0bffb17 	ldw	r2,-20(fp)
    aeac:	10800817 	ldw	r2,32(r2)
    aeb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    aeb4:	e0bffc17 	ldw	r2,-16(fp)
    aeb8:	10800104 	addi	r2,r2,4
    aebc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    aec0:	e0bffd17 	ldw	r2,-12(fp)
    aec4:	1080800c 	andi	r2,r2,512
    aec8:	103fbe26 	beq	r2,zero,adc4 <_gp+0xffff4d94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    aecc:	e0bffd17 	ldw	r2,-12(fp)
    aed0:	1004d43a 	srli	r2,r2,16
    aed4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    aed8:	00001406 	br	af2c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    aedc:	e0bffc17 	ldw	r2,-16(fp)
    aee0:	e0fffb17 	ldw	r3,-20(fp)
    aee4:	18c00d17 	ldw	r3,52(r3)
    aee8:	e13ffb17 	ldw	r4,-20(fp)
    aeec:	20c7883a 	add	r3,r4,r3
    aef0:	18c20e04 	addi	r3,r3,2104
    aef4:	18c00003 	ldbu	r3,0(r3)
    aef8:	18c03fcc 	andi	r3,r3,255
    aefc:	18c0201c 	xori	r3,r3,128
    af00:	18ffe004 	addi	r3,r3,-128
    af04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    af08:	e0bffb17 	ldw	r2,-20(fp)
    af0c:	10800d17 	ldw	r2,52(r2)
    af10:	10800044 	addi	r2,r2,1
    af14:	10c1ffcc 	andi	r3,r2,2047
    af18:	e0bffb17 	ldw	r2,-20(fp)
    af1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    af20:	e0bffa17 	ldw	r2,-24(fp)
    af24:	10bfffc4 	addi	r2,r2,-1
    af28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    af2c:	e0bffa17 	ldw	r2,-24(fp)
    af30:	10000526 	beq	r2,zero,af48 <altera_avalon_jtag_uart_irq+0x1a8>
    af34:	e0bffb17 	ldw	r2,-20(fp)
    af38:	10c00d17 	ldw	r3,52(r2)
    af3c:	e0bffb17 	ldw	r2,-20(fp)
    af40:	10800c17 	ldw	r2,48(r2)
    af44:	18bfe51e 	bne	r3,r2,aedc <_gp+0xffff4eac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    af48:	e0bffa17 	ldw	r2,-24(fp)
    af4c:	103f9d26 	beq	r2,zero,adc4 <_gp+0xffff4d94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    af50:	e0bffb17 	ldw	r2,-20(fp)
    af54:	10c00817 	ldw	r3,32(r2)
    af58:	00bfff44 	movi	r2,-3
    af5c:	1886703a 	and	r3,r3,r2
    af60:	e0bffb17 	ldw	r2,-20(fp)
    af64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    af68:	e0bffb17 	ldw	r2,-20(fp)
    af6c:	10800017 	ldw	r2,0(r2)
    af70:	10800104 	addi	r2,r2,4
    af74:	1007883a 	mov	r3,r2
    af78:	e0bffb17 	ldw	r2,-20(fp)
    af7c:	10800817 	ldw	r2,32(r2)
    af80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af84:	e0bffc17 	ldw	r2,-16(fp)
    af88:	10800104 	addi	r2,r2,4
    af8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    af90:	003f8c06 	br	adc4 <_gp+0xffff4d94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    af94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    af98:	0001883a 	nop
    af9c:	e037883a 	mov	sp,fp
    afa0:	df000017 	ldw	fp,0(sp)
    afa4:	dec00104 	addi	sp,sp,4
    afa8:	f800283a 	ret

0000afac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    afac:	defff804 	addi	sp,sp,-32
    afb0:	df000715 	stw	fp,28(sp)
    afb4:	df000704 	addi	fp,sp,28
    afb8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    afbc:	e0bffb17 	ldw	r2,-20(fp)
    afc0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    afc4:	e0bff917 	ldw	r2,-28(fp)
    afc8:	10800017 	ldw	r2,0(r2)
    afcc:	10800104 	addi	r2,r2,4
    afd0:	10800037 	ldwio	r2,0(r2)
    afd4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    afd8:	e0bffa17 	ldw	r2,-24(fp)
    afdc:	1081000c 	andi	r2,r2,1024
    afe0:	10000b26 	beq	r2,zero,b010 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    afe4:	e0bff917 	ldw	r2,-28(fp)
    afe8:	10800017 	ldw	r2,0(r2)
    afec:	10800104 	addi	r2,r2,4
    aff0:	1007883a 	mov	r3,r2
    aff4:	e0bff917 	ldw	r2,-28(fp)
    aff8:	10800817 	ldw	r2,32(r2)
    affc:	10810014 	ori	r2,r2,1024
    b000:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    b004:	e0bff917 	ldw	r2,-28(fp)
    b008:	10000915 	stw	zero,36(r2)
    b00c:	00000a06 	br	b038 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    b010:	e0bff917 	ldw	r2,-28(fp)
    b014:	10c00917 	ldw	r3,36(r2)
    b018:	00a00034 	movhi	r2,32768
    b01c:	10bfff04 	addi	r2,r2,-4
    b020:	10c00536 	bltu	r2,r3,b038 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    b024:	e0bff917 	ldw	r2,-28(fp)
    b028:	10800917 	ldw	r2,36(r2)
    b02c:	10c00044 	addi	r3,r2,1
    b030:	e0bff917 	ldw	r2,-28(fp)
    b034:	10c00915 	stw	r3,36(r2)
    b038:	d0a5be17 	ldw	r2,-26888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    b03c:	e037883a 	mov	sp,fp
    b040:	df000017 	ldw	fp,0(sp)
    b044:	dec00104 	addi	sp,sp,4
    b048:	f800283a 	ret

0000b04c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b04c:	defffd04 	addi	sp,sp,-12
    b050:	df000215 	stw	fp,8(sp)
    b054:	df000204 	addi	fp,sp,8
    b058:	e13ffe15 	stw	r4,-8(fp)
    b05c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b060:	00000506 	br	b078 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    b064:	e0bfff17 	ldw	r2,-4(fp)
    b068:	1090000c 	andi	r2,r2,16384
    b06c:	10000226 	beq	r2,zero,b078 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b070:	00bffd44 	movi	r2,-11
    b074:	00000b06 	br	b0a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b078:	e0bffe17 	ldw	r2,-8(fp)
    b07c:	10c00d17 	ldw	r3,52(r2)
    b080:	e0bffe17 	ldw	r2,-8(fp)
    b084:	10800c17 	ldw	r2,48(r2)
    b088:	18800526 	beq	r3,r2,b0a0 <altera_avalon_jtag_uart_close+0x54>
    b08c:	e0bffe17 	ldw	r2,-8(fp)
    b090:	10c00917 	ldw	r3,36(r2)
    b094:	e0bffe17 	ldw	r2,-8(fp)
    b098:	10800117 	ldw	r2,4(r2)
    b09c:	18bff136 	bltu	r3,r2,b064 <_gp+0xffff5034>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b0a0:	0005883a 	mov	r2,zero
}
    b0a4:	e037883a 	mov	sp,fp
    b0a8:	df000017 	ldw	fp,0(sp)
    b0ac:	dec00104 	addi	sp,sp,4
    b0b0:	f800283a 	ret

0000b0b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b0b4:	defffa04 	addi	sp,sp,-24
    b0b8:	df000515 	stw	fp,20(sp)
    b0bc:	df000504 	addi	fp,sp,20
    b0c0:	e13ffd15 	stw	r4,-12(fp)
    b0c4:	e17ffe15 	stw	r5,-8(fp)
    b0c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b0cc:	00bff9c4 	movi	r2,-25
    b0d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b0d4:	e0bffe17 	ldw	r2,-8(fp)
    b0d8:	10da8060 	cmpeqi	r3,r2,27137
    b0dc:	1800031e 	bne	r3,zero,b0ec <altera_avalon_jtag_uart_ioctl+0x38>
    b0e0:	109a80a0 	cmpeqi	r2,r2,27138
    b0e4:	1000181e 	bne	r2,zero,b148 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    b0e8:	00002906 	br	b190 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b0ec:	e0bffd17 	ldw	r2,-12(fp)
    b0f0:	10c00117 	ldw	r3,4(r2)
    b0f4:	00a00034 	movhi	r2,32768
    b0f8:	10bfffc4 	addi	r2,r2,-1
    b0fc:	18802126 	beq	r3,r2,b184 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    b100:	e0bfff17 	ldw	r2,-4(fp)
    b104:	10800017 	ldw	r2,0(r2)
    b108:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b10c:	e0bffc17 	ldw	r2,-16(fp)
    b110:	10800090 	cmplti	r2,r2,2
    b114:	1000061e 	bne	r2,zero,b130 <altera_avalon_jtag_uart_ioctl+0x7c>
    b118:	e0fffc17 	ldw	r3,-16(fp)
    b11c:	00a00034 	movhi	r2,32768
    b120:	10bfffc4 	addi	r2,r2,-1
    b124:	18800226 	beq	r3,r2,b130 <altera_avalon_jtag_uart_ioctl+0x7c>
    b128:	e0bffc17 	ldw	r2,-16(fp)
    b12c:	00000206 	br	b138 <altera_avalon_jtag_uart_ioctl+0x84>
    b130:	00a00034 	movhi	r2,32768
    b134:	10bfff84 	addi	r2,r2,-2
    b138:	e0fffd17 	ldw	r3,-12(fp)
    b13c:	18800115 	stw	r2,4(r3)
      rc = 0;
    b140:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b144:	00000f06 	br	b184 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b148:	e0bffd17 	ldw	r2,-12(fp)
    b14c:	10c00117 	ldw	r3,4(r2)
    b150:	00a00034 	movhi	r2,32768
    b154:	10bfffc4 	addi	r2,r2,-1
    b158:	18800c26 	beq	r3,r2,b18c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b15c:	e0bffd17 	ldw	r2,-12(fp)
    b160:	10c00917 	ldw	r3,36(r2)
    b164:	e0bffd17 	ldw	r2,-12(fp)
    b168:	10800117 	ldw	r2,4(r2)
    b16c:	1885803a 	cmpltu	r2,r3,r2
    b170:	10c03fcc 	andi	r3,r2,255
    b174:	e0bfff17 	ldw	r2,-4(fp)
    b178:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b17c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b180:	00000206 	br	b18c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b184:	0001883a 	nop
    b188:	00000106 	br	b190 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b18c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b190:	e0bffb17 	ldw	r2,-20(fp)
}
    b194:	e037883a 	mov	sp,fp
    b198:	df000017 	ldw	fp,0(sp)
    b19c:	dec00104 	addi	sp,sp,4
    b1a0:	f800283a 	ret

0000b1a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b1a4:	defff304 	addi	sp,sp,-52
    b1a8:	dfc00c15 	stw	ra,48(sp)
    b1ac:	df000b15 	stw	fp,44(sp)
    b1b0:	df000b04 	addi	fp,sp,44
    b1b4:	e13ffc15 	stw	r4,-16(fp)
    b1b8:	e17ffd15 	stw	r5,-12(fp)
    b1bc:	e1bffe15 	stw	r6,-8(fp)
    b1c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b1c4:	e0bffd17 	ldw	r2,-12(fp)
    b1c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b1cc:	00004706 	br	b2ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b1d0:	e0bffc17 	ldw	r2,-16(fp)
    b1d4:	10800a17 	ldw	r2,40(r2)
    b1d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b1dc:	e0bffc17 	ldw	r2,-16(fp)
    b1e0:	10800b17 	ldw	r2,44(r2)
    b1e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    b1e8:	e0fff717 	ldw	r3,-36(fp)
    b1ec:	e0bff817 	ldw	r2,-32(fp)
    b1f0:	18800536 	bltu	r3,r2,b208 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b1f4:	e0fff717 	ldw	r3,-36(fp)
    b1f8:	e0bff817 	ldw	r2,-32(fp)
    b1fc:	1885c83a 	sub	r2,r3,r2
    b200:	e0bff615 	stw	r2,-40(fp)
    b204:	00000406 	br	b218 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b208:	00c20004 	movi	r3,2048
    b20c:	e0bff817 	ldw	r2,-32(fp)
    b210:	1885c83a 	sub	r2,r3,r2
    b214:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b218:	e0bff617 	ldw	r2,-40(fp)
    b21c:	10001e26 	beq	r2,zero,b298 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    b220:	e0fffe17 	ldw	r3,-8(fp)
    b224:	e0bff617 	ldw	r2,-40(fp)
    b228:	1880022e 	bgeu	r3,r2,b234 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    b22c:	e0bffe17 	ldw	r2,-8(fp)
    b230:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b234:	e0bffc17 	ldw	r2,-16(fp)
    b238:	10c00e04 	addi	r3,r2,56
    b23c:	e0bff817 	ldw	r2,-32(fp)
    b240:	1885883a 	add	r2,r3,r2
    b244:	e1bff617 	ldw	r6,-40(fp)
    b248:	100b883a 	mov	r5,r2
    b24c:	e13ff517 	ldw	r4,-44(fp)
    b250:	000c4200 	call	c420 <memcpy>
      ptr   += n;
    b254:	e0fff517 	ldw	r3,-44(fp)
    b258:	e0bff617 	ldw	r2,-40(fp)
    b25c:	1885883a 	add	r2,r3,r2
    b260:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    b264:	e0fffe17 	ldw	r3,-8(fp)
    b268:	e0bff617 	ldw	r2,-40(fp)
    b26c:	1885c83a 	sub	r2,r3,r2
    b270:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b274:	e0fff817 	ldw	r3,-32(fp)
    b278:	e0bff617 	ldw	r2,-40(fp)
    b27c:	1885883a 	add	r2,r3,r2
    b280:	10c1ffcc 	andi	r3,r2,2047
    b284:	e0bffc17 	ldw	r2,-16(fp)
    b288:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b28c:	e0bffe17 	ldw	r2,-8(fp)
    b290:	00bfcf16 	blt	zero,r2,b1d0 <_gp+0xffff51a0>
    b294:	00000106 	br	b29c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b298:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b29c:	e0fff517 	ldw	r3,-44(fp)
    b2a0:	e0bffd17 	ldw	r2,-12(fp)
    b2a4:	1880141e 	bne	r3,r2,b2f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b2a8:	e0bfff17 	ldw	r2,-4(fp)
    b2ac:	1090000c 	andi	r2,r2,16384
    b2b0:	1000131e 	bne	r2,zero,b300 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b2b4:	0001883a 	nop
    b2b8:	e0bffc17 	ldw	r2,-16(fp)
    b2bc:	10c00a17 	ldw	r3,40(r2)
    b2c0:	e0bff717 	ldw	r2,-36(fp)
    b2c4:	1880051e 	bne	r3,r2,b2dc <altera_avalon_jtag_uart_read+0x138>
    b2c8:	e0bffc17 	ldw	r2,-16(fp)
    b2cc:	10c00917 	ldw	r3,36(r2)
    b2d0:	e0bffc17 	ldw	r2,-16(fp)
    b2d4:	10800117 	ldw	r2,4(r2)
    b2d8:	18bff736 	bltu	r3,r2,b2b8 <_gp+0xffff5288>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b2dc:	e0bffc17 	ldw	r2,-16(fp)
    b2e0:	10c00a17 	ldw	r3,40(r2)
    b2e4:	e0bff717 	ldw	r2,-36(fp)
    b2e8:	18800726 	beq	r3,r2,b308 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b2ec:	e0bffe17 	ldw	r2,-8(fp)
    b2f0:	00bfb716 	blt	zero,r2,b1d0 <_gp+0xffff51a0>
    b2f4:	00000506 	br	b30c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b2f8:	0001883a 	nop
    b2fc:	00000306 	br	b30c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b300:	0001883a 	nop
    b304:	00000106 	br	b30c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b308:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b30c:	e0fff517 	ldw	r3,-44(fp)
    b310:	e0bffd17 	ldw	r2,-12(fp)
    b314:	18801826 	beq	r3,r2,b378 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b318:	0005303a 	rdctl	r2,status
    b31c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b320:	e0fffb17 	ldw	r3,-20(fp)
    b324:	00bfff84 	movi	r2,-2
    b328:	1884703a 	and	r2,r3,r2
    b32c:	1001703a 	wrctl	status,r2
  
  return context;
    b330:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b334:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b338:	e0bffc17 	ldw	r2,-16(fp)
    b33c:	10800817 	ldw	r2,32(r2)
    b340:	10c00054 	ori	r3,r2,1
    b344:	e0bffc17 	ldw	r2,-16(fp)
    b348:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b34c:	e0bffc17 	ldw	r2,-16(fp)
    b350:	10800017 	ldw	r2,0(r2)
    b354:	10800104 	addi	r2,r2,4
    b358:	1007883a 	mov	r3,r2
    b35c:	e0bffc17 	ldw	r2,-16(fp)
    b360:	10800817 	ldw	r2,32(r2)
    b364:	18800035 	stwio	r2,0(r3)
    b368:	e0bffa17 	ldw	r2,-24(fp)
    b36c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b370:	e0bff917 	ldw	r2,-28(fp)
    b374:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b378:	e0fff517 	ldw	r3,-44(fp)
    b37c:	e0bffd17 	ldw	r2,-12(fp)
    b380:	18800426 	beq	r3,r2,b394 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    b384:	e0fff517 	ldw	r3,-44(fp)
    b388:	e0bffd17 	ldw	r2,-12(fp)
    b38c:	1885c83a 	sub	r2,r3,r2
    b390:	00000606 	br	b3ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    b394:	e0bfff17 	ldw	r2,-4(fp)
    b398:	1090000c 	andi	r2,r2,16384
    b39c:	10000226 	beq	r2,zero,b3a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b3a0:	00bffd44 	movi	r2,-11
    b3a4:	00000106 	br	b3ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    b3a8:	00bffec4 	movi	r2,-5
}
    b3ac:	e037883a 	mov	sp,fp
    b3b0:	dfc00117 	ldw	ra,4(sp)
    b3b4:	df000017 	ldw	fp,0(sp)
    b3b8:	dec00204 	addi	sp,sp,8
    b3bc:	f800283a 	ret

0000b3c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b3c0:	defff304 	addi	sp,sp,-52
    b3c4:	dfc00c15 	stw	ra,48(sp)
    b3c8:	df000b15 	stw	fp,44(sp)
    b3cc:	df000b04 	addi	fp,sp,44
    b3d0:	e13ffc15 	stw	r4,-16(fp)
    b3d4:	e17ffd15 	stw	r5,-12(fp)
    b3d8:	e1bffe15 	stw	r6,-8(fp)
    b3dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b3e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b3e4:	e0bffd17 	ldw	r2,-12(fp)
    b3e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b3ec:	00003706 	br	b4cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b3f0:	e0bffc17 	ldw	r2,-16(fp)
    b3f4:	10800c17 	ldw	r2,48(r2)
    b3f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    b3fc:	e0bffc17 	ldw	r2,-16(fp)
    b400:	10800d17 	ldw	r2,52(r2)
    b404:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    b408:	e0fff917 	ldw	r3,-28(fp)
    b40c:	e0bff517 	ldw	r2,-44(fp)
    b410:	1880062e 	bgeu	r3,r2,b42c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b414:	e0fff517 	ldw	r3,-44(fp)
    b418:	e0bff917 	ldw	r2,-28(fp)
    b41c:	1885c83a 	sub	r2,r3,r2
    b420:	10bfffc4 	addi	r2,r2,-1
    b424:	e0bff615 	stw	r2,-40(fp)
    b428:	00000b06 	br	b458 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    b42c:	e0bff517 	ldw	r2,-44(fp)
    b430:	10000526 	beq	r2,zero,b448 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b434:	00c20004 	movi	r3,2048
    b438:	e0bff917 	ldw	r2,-28(fp)
    b43c:	1885c83a 	sub	r2,r3,r2
    b440:	e0bff615 	stw	r2,-40(fp)
    b444:	00000406 	br	b458 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b448:	00c1ffc4 	movi	r3,2047
    b44c:	e0bff917 	ldw	r2,-28(fp)
    b450:	1885c83a 	sub	r2,r3,r2
    b454:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    b458:	e0bff617 	ldw	r2,-40(fp)
    b45c:	10001e26 	beq	r2,zero,b4d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    b460:	e0fffe17 	ldw	r3,-8(fp)
    b464:	e0bff617 	ldw	r2,-40(fp)
    b468:	1880022e 	bgeu	r3,r2,b474 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    b46c:	e0bffe17 	ldw	r2,-8(fp)
    b470:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b474:	e0bffc17 	ldw	r2,-16(fp)
    b478:	10c20e04 	addi	r3,r2,2104
    b47c:	e0bff917 	ldw	r2,-28(fp)
    b480:	1885883a 	add	r2,r3,r2
    b484:	e1bff617 	ldw	r6,-40(fp)
    b488:	e17ffd17 	ldw	r5,-12(fp)
    b48c:	1009883a 	mov	r4,r2
    b490:	000c4200 	call	c420 <memcpy>
      ptr   += n;
    b494:	e0fffd17 	ldw	r3,-12(fp)
    b498:	e0bff617 	ldw	r2,-40(fp)
    b49c:	1885883a 	add	r2,r3,r2
    b4a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b4a4:	e0fffe17 	ldw	r3,-8(fp)
    b4a8:	e0bff617 	ldw	r2,-40(fp)
    b4ac:	1885c83a 	sub	r2,r3,r2
    b4b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b4b4:	e0fff917 	ldw	r3,-28(fp)
    b4b8:	e0bff617 	ldw	r2,-40(fp)
    b4bc:	1885883a 	add	r2,r3,r2
    b4c0:	10c1ffcc 	andi	r3,r2,2047
    b4c4:	e0bffc17 	ldw	r2,-16(fp)
    b4c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b4cc:	e0bffe17 	ldw	r2,-8(fp)
    b4d0:	00bfc716 	blt	zero,r2,b3f0 <_gp+0xffff53c0>
    b4d4:	00000106 	br	b4dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b4d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b4dc:	0005303a 	rdctl	r2,status
    b4e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b4e4:	e0fffb17 	ldw	r3,-20(fp)
    b4e8:	00bfff84 	movi	r2,-2
    b4ec:	1884703a 	and	r2,r3,r2
    b4f0:	1001703a 	wrctl	status,r2
  
  return context;
    b4f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b4f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b4fc:	e0bffc17 	ldw	r2,-16(fp)
    b500:	10800817 	ldw	r2,32(r2)
    b504:	10c00094 	ori	r3,r2,2
    b508:	e0bffc17 	ldw	r2,-16(fp)
    b50c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b510:	e0bffc17 	ldw	r2,-16(fp)
    b514:	10800017 	ldw	r2,0(r2)
    b518:	10800104 	addi	r2,r2,4
    b51c:	1007883a 	mov	r3,r2
    b520:	e0bffc17 	ldw	r2,-16(fp)
    b524:	10800817 	ldw	r2,32(r2)
    b528:	18800035 	stwio	r2,0(r3)
    b52c:	e0bffa17 	ldw	r2,-24(fp)
    b530:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b534:	e0bff817 	ldw	r2,-32(fp)
    b538:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b53c:	e0bffe17 	ldw	r2,-8(fp)
    b540:	0080100e 	bge	zero,r2,b584 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    b544:	e0bfff17 	ldw	r2,-4(fp)
    b548:	1090000c 	andi	r2,r2,16384
    b54c:	1000101e 	bne	r2,zero,b590 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b550:	0001883a 	nop
    b554:	e0bffc17 	ldw	r2,-16(fp)
    b558:	10c00d17 	ldw	r3,52(r2)
    b55c:	e0bff517 	ldw	r2,-44(fp)
    b560:	1880051e 	bne	r3,r2,b578 <altera_avalon_jtag_uart_write+0x1b8>
    b564:	e0bffc17 	ldw	r2,-16(fp)
    b568:	10c00917 	ldw	r3,36(r2)
    b56c:	e0bffc17 	ldw	r2,-16(fp)
    b570:	10800117 	ldw	r2,4(r2)
    b574:	18bff736 	bltu	r3,r2,b554 <_gp+0xffff5524>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b578:	e0bffc17 	ldw	r2,-16(fp)
    b57c:	10800917 	ldw	r2,36(r2)
    b580:	1000051e 	bne	r2,zero,b598 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    b584:	e0bffe17 	ldw	r2,-8(fp)
    b588:	00bfd016 	blt	zero,r2,b4cc <_gp+0xffff549c>
    b58c:	00000306 	br	b59c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b590:	0001883a 	nop
    b594:	00000106 	br	b59c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    b598:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b59c:	e0fffd17 	ldw	r3,-12(fp)
    b5a0:	e0bff717 	ldw	r2,-36(fp)
    b5a4:	18800426 	beq	r3,r2,b5b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    b5a8:	e0fffd17 	ldw	r3,-12(fp)
    b5ac:	e0bff717 	ldw	r2,-36(fp)
    b5b0:	1885c83a 	sub	r2,r3,r2
    b5b4:	00000606 	br	b5d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    b5b8:	e0bfff17 	ldw	r2,-4(fp)
    b5bc:	1090000c 	andi	r2,r2,16384
    b5c0:	10000226 	beq	r2,zero,b5cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    b5c4:	00bffd44 	movi	r2,-11
    b5c8:	00000106 	br	b5d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b5cc:	00bffec4 	movi	r2,-5
}
    b5d0:	e037883a 	mov	sp,fp
    b5d4:	dfc00117 	ldw	ra,4(sp)
    b5d8:	df000017 	ldw	fp,0(sp)
    b5dc:	dec00204 	addi	sp,sp,8
    b5e0:	f800283a 	ret

0000b5e4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b5e4:	defff504 	addi	sp,sp,-44
    b5e8:	df000a15 	stw	fp,40(sp)
    b5ec:	df000a04 	addi	fp,sp,40
    b5f0:	e13ffc15 	stw	r4,-16(fp)
    b5f4:	e17ffd15 	stw	r5,-12(fp)
    b5f8:	e1bffe15 	stw	r6,-8(fp)
    b5fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b600:	e03ff615 	stw	zero,-40(fp)
    b604:	d0a5be17 	ldw	r2,-26888(gp)
  
  if (alt_ticks_per_second ())
    b608:	10003c26 	beq	r2,zero,b6fc <alt_alarm_start+0x118>
  {
    if (alarm)
    b60c:	e0bffc17 	ldw	r2,-16(fp)
    b610:	10003826 	beq	r2,zero,b6f4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b614:	e0bffc17 	ldw	r2,-16(fp)
    b618:	e0fffe17 	ldw	r3,-8(fp)
    b61c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b620:	e0bffc17 	ldw	r2,-16(fp)
    b624:	e0ffff17 	ldw	r3,-4(fp)
    b628:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b62c:	0005303a 	rdctl	r2,status
    b630:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b634:	e0fff917 	ldw	r3,-28(fp)
    b638:	00bfff84 	movi	r2,-2
    b63c:	1884703a 	and	r2,r3,r2
    b640:	1001703a 	wrctl	status,r2
  
  return context;
    b644:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b648:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b64c:	d0a5bf17 	ldw	r2,-26884(gp)
      
      current_nticks = alt_nticks();
    b650:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b654:	e0fffd17 	ldw	r3,-12(fp)
    b658:	e0bff617 	ldw	r2,-40(fp)
    b65c:	1885883a 	add	r2,r3,r2
    b660:	10c00044 	addi	r3,r2,1
    b664:	e0bffc17 	ldw	r2,-16(fp)
    b668:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b66c:	e0bffc17 	ldw	r2,-16(fp)
    b670:	10c00217 	ldw	r3,8(r2)
    b674:	e0bff617 	ldw	r2,-40(fp)
    b678:	1880042e 	bgeu	r3,r2,b68c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b67c:	e0bffc17 	ldw	r2,-16(fp)
    b680:	00c00044 	movi	r3,1
    b684:	10c00405 	stb	r3,16(r2)
    b688:	00000206 	br	b694 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b68c:	e0bffc17 	ldw	r2,-16(fp)
    b690:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b694:	e0bffc17 	ldw	r2,-16(fp)
    b698:	d0e01104 	addi	r3,gp,-32700
    b69c:	e0fffa15 	stw	r3,-24(fp)
    b6a0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b6a4:	e0bffb17 	ldw	r2,-20(fp)
    b6a8:	e0fffa17 	ldw	r3,-24(fp)
    b6ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b6b0:	e0bffa17 	ldw	r2,-24(fp)
    b6b4:	10c00017 	ldw	r3,0(r2)
    b6b8:	e0bffb17 	ldw	r2,-20(fp)
    b6bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b6c0:	e0bffa17 	ldw	r2,-24(fp)
    b6c4:	10800017 	ldw	r2,0(r2)
    b6c8:	e0fffb17 	ldw	r3,-20(fp)
    b6cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b6d0:	e0bffa17 	ldw	r2,-24(fp)
    b6d4:	e0fffb17 	ldw	r3,-20(fp)
    b6d8:	10c00015 	stw	r3,0(r2)
    b6dc:	e0bff817 	ldw	r2,-32(fp)
    b6e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b6e4:	e0bff717 	ldw	r2,-36(fp)
    b6e8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b6ec:	0005883a 	mov	r2,zero
    b6f0:	00000306 	br	b700 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b6f4:	00bffa84 	movi	r2,-22
    b6f8:	00000106 	br	b700 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b6fc:	00bfde84 	movi	r2,-134
  }
}
    b700:	e037883a 	mov	sp,fp
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00104 	addi	sp,sp,4
    b70c:	f800283a 	ret

0000b710 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b710:	defffe04 	addi	sp,sp,-8
    b714:	dfc00115 	stw	ra,4(sp)
    b718:	df000015 	stw	fp,0(sp)
    b71c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b720:	d0a01017 	ldw	r2,-32704(gp)
    b724:	10000326 	beq	r2,zero,b734 <alt_get_errno+0x24>
    b728:	d0a01017 	ldw	r2,-32704(gp)
    b72c:	103ee83a 	callr	r2
    b730:	00000106 	br	b738 <alt_get_errno+0x28>
    b734:	d0a5c004 	addi	r2,gp,-26880
}
    b738:	e037883a 	mov	sp,fp
    b73c:	dfc00117 	ldw	ra,4(sp)
    b740:	df000017 	ldw	fp,0(sp)
    b744:	dec00204 	addi	sp,sp,8
    b748:	f800283a 	ret

0000b74c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b74c:	defffb04 	addi	sp,sp,-20
    b750:	dfc00415 	stw	ra,16(sp)
    b754:	df000315 	stw	fp,12(sp)
    b758:	df000304 	addi	fp,sp,12
    b75c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b760:	e0bfff17 	ldw	r2,-4(fp)
    b764:	10000816 	blt	r2,zero,b788 <close+0x3c>
    b768:	01400304 	movi	r5,12
    b76c:	e13fff17 	ldw	r4,-4(fp)
    b770:	00089e40 	call	89e4 <__mulsi3>
    b774:	1007883a 	mov	r3,r2
    b778:	00800074 	movhi	r2,1
    b77c:	10b6a304 	addi	r2,r2,-9588
    b780:	1885883a 	add	r2,r3,r2
    b784:	00000106 	br	b78c <close+0x40>
    b788:	0005883a 	mov	r2,zero
    b78c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    b790:	e0bffd17 	ldw	r2,-12(fp)
    b794:	10001926 	beq	r2,zero,b7fc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b798:	e0bffd17 	ldw	r2,-12(fp)
    b79c:	10800017 	ldw	r2,0(r2)
    b7a0:	10800417 	ldw	r2,16(r2)
    b7a4:	10000626 	beq	r2,zero,b7c0 <close+0x74>
    b7a8:	e0bffd17 	ldw	r2,-12(fp)
    b7ac:	10800017 	ldw	r2,0(r2)
    b7b0:	10800417 	ldw	r2,16(r2)
    b7b4:	e13ffd17 	ldw	r4,-12(fp)
    b7b8:	103ee83a 	callr	r2
    b7bc:	00000106 	br	b7c4 <close+0x78>
    b7c0:	0005883a 	mov	r2,zero
    b7c4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b7c8:	e13fff17 	ldw	r4,-4(fp)
    b7cc:	000beb00 	call	beb0 <alt_release_fd>
    if (rval < 0)
    b7d0:	e0bffe17 	ldw	r2,-8(fp)
    b7d4:	1000070e 	bge	r2,zero,b7f4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    b7d8:	000b7100 	call	b710 <alt_get_errno>
    b7dc:	1007883a 	mov	r3,r2
    b7e0:	e0bffe17 	ldw	r2,-8(fp)
    b7e4:	0085c83a 	sub	r2,zero,r2
    b7e8:	18800015 	stw	r2,0(r3)
      return -1;
    b7ec:	00bfffc4 	movi	r2,-1
    b7f0:	00000706 	br	b810 <close+0xc4>
    }
    return 0;
    b7f4:	0005883a 	mov	r2,zero
    b7f8:	00000506 	br	b810 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b7fc:	000b7100 	call	b710 <alt_get_errno>
    b800:	1007883a 	mov	r3,r2
    b804:	00801444 	movi	r2,81
    b808:	18800015 	stw	r2,0(r3)
    return -1;
    b80c:	00bfffc4 	movi	r2,-1
  }
}
    b810:	e037883a 	mov	sp,fp
    b814:	dfc00117 	ldw	ra,4(sp)
    b818:	df000017 	ldw	fp,0(sp)
    b81c:	dec00204 	addi	sp,sp,8
    b820:	f800283a 	ret

0000b824 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b824:	deffff04 	addi	sp,sp,-4
    b828:	df000015 	stw	fp,0(sp)
    b82c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b830:	0001883a 	nop
    b834:	e037883a 	mov	sp,fp
    b838:	df000017 	ldw	fp,0(sp)
    b83c:	dec00104 	addi	sp,sp,4
    b840:	f800283a 	ret

0000b844 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b844:	defffc04 	addi	sp,sp,-16
    b848:	df000315 	stw	fp,12(sp)
    b84c:	df000304 	addi	fp,sp,12
    b850:	e13ffd15 	stw	r4,-12(fp)
    b854:	e17ffe15 	stw	r5,-8(fp)
    b858:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b85c:	e0bfff17 	ldw	r2,-4(fp)
}
    b860:	e037883a 	mov	sp,fp
    b864:	df000017 	ldw	fp,0(sp)
    b868:	dec00104 	addi	sp,sp,4
    b86c:	f800283a 	ret

0000b870 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b870:	defffe04 	addi	sp,sp,-8
    b874:	dfc00115 	stw	ra,4(sp)
    b878:	df000015 	stw	fp,0(sp)
    b87c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b880:	d0a01017 	ldw	r2,-32704(gp)
    b884:	10000326 	beq	r2,zero,b894 <alt_get_errno+0x24>
    b888:	d0a01017 	ldw	r2,-32704(gp)
    b88c:	103ee83a 	callr	r2
    b890:	00000106 	br	b898 <alt_get_errno+0x28>
    b894:	d0a5c004 	addi	r2,gp,-26880
}
    b898:	e037883a 	mov	sp,fp
    b89c:	dfc00117 	ldw	ra,4(sp)
    b8a0:	df000017 	ldw	fp,0(sp)
    b8a4:	dec00204 	addi	sp,sp,8
    b8a8:	f800283a 	ret

0000b8ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    b8ac:	defffa04 	addi	sp,sp,-24
    b8b0:	dfc00515 	stw	ra,20(sp)
    b8b4:	df000415 	stw	fp,16(sp)
    b8b8:	df000404 	addi	fp,sp,16
    b8bc:	e13ffe15 	stw	r4,-8(fp)
    b8c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    b8c4:	e0bffe17 	ldw	r2,-8(fp)
    b8c8:	10000326 	beq	r2,zero,b8d8 <alt_dev_llist_insert+0x2c>
    b8cc:	e0bffe17 	ldw	r2,-8(fp)
    b8d0:	10800217 	ldw	r2,8(r2)
    b8d4:	1000061e 	bne	r2,zero,b8f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    b8d8:	000b8700 	call	b870 <alt_get_errno>
    b8dc:	1007883a 	mov	r3,r2
    b8e0:	00800584 	movi	r2,22
    b8e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    b8e8:	00bffa84 	movi	r2,-22
    b8ec:	00001306 	br	b93c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    b8f0:	e0bffe17 	ldw	r2,-8(fp)
    b8f4:	e0ffff17 	ldw	r3,-4(fp)
    b8f8:	e0fffc15 	stw	r3,-16(fp)
    b8fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b900:	e0bffd17 	ldw	r2,-12(fp)
    b904:	e0fffc17 	ldw	r3,-16(fp)
    b908:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b90c:	e0bffc17 	ldw	r2,-16(fp)
    b910:	10c00017 	ldw	r3,0(r2)
    b914:	e0bffd17 	ldw	r2,-12(fp)
    b918:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b91c:	e0bffc17 	ldw	r2,-16(fp)
    b920:	10800017 	ldw	r2,0(r2)
    b924:	e0fffd17 	ldw	r3,-12(fp)
    b928:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b92c:	e0bffc17 	ldw	r2,-16(fp)
    b930:	e0fffd17 	ldw	r3,-12(fp)
    b934:	10c00015 	stw	r3,0(r2)

  return 0;  
    b938:	0005883a 	mov	r2,zero
}
    b93c:	e037883a 	mov	sp,fp
    b940:	dfc00117 	ldw	ra,4(sp)
    b944:	df000017 	ldw	fp,0(sp)
    b948:	dec00204 	addi	sp,sp,8
    b94c:	f800283a 	ret

0000b950 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    b950:	defffd04 	addi	sp,sp,-12
    b954:	dfc00215 	stw	ra,8(sp)
    b958:	df000115 	stw	fp,4(sp)
    b95c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b960:	00800074 	movhi	r2,1
    b964:	10b23204 	addi	r2,r2,-14136
    b968:	e0bfff15 	stw	r2,-4(fp)
    b96c:	00000606 	br	b988 <_do_ctors+0x38>
        (*ctor) (); 
    b970:	e0bfff17 	ldw	r2,-4(fp)
    b974:	10800017 	ldw	r2,0(r2)
    b978:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    b97c:	e0bfff17 	ldw	r2,-4(fp)
    b980:	10bfff04 	addi	r2,r2,-4
    b984:	e0bfff15 	stw	r2,-4(fp)
    b988:	e0ffff17 	ldw	r3,-4(fp)
    b98c:	00800074 	movhi	r2,1
    b990:	10b23304 	addi	r2,r2,-14132
    b994:	18bff62e 	bgeu	r3,r2,b970 <_gp+0xffff5940>
        (*ctor) (); 
}
    b998:	0001883a 	nop
    b99c:	e037883a 	mov	sp,fp
    b9a0:	dfc00117 	ldw	ra,4(sp)
    b9a4:	df000017 	ldw	fp,0(sp)
    b9a8:	dec00204 	addi	sp,sp,8
    b9ac:	f800283a 	ret

0000b9b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    b9b0:	defffd04 	addi	sp,sp,-12
    b9b4:	dfc00215 	stw	ra,8(sp)
    b9b8:	df000115 	stw	fp,4(sp)
    b9bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b9c0:	00800074 	movhi	r2,1
    b9c4:	10b23204 	addi	r2,r2,-14136
    b9c8:	e0bfff15 	stw	r2,-4(fp)
    b9cc:	00000606 	br	b9e8 <_do_dtors+0x38>
        (*dtor) (); 
    b9d0:	e0bfff17 	ldw	r2,-4(fp)
    b9d4:	10800017 	ldw	r2,0(r2)
    b9d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    b9dc:	e0bfff17 	ldw	r2,-4(fp)
    b9e0:	10bfff04 	addi	r2,r2,-4
    b9e4:	e0bfff15 	stw	r2,-4(fp)
    b9e8:	e0ffff17 	ldw	r3,-4(fp)
    b9ec:	00800074 	movhi	r2,1
    b9f0:	10b23304 	addi	r2,r2,-14132
    b9f4:	18bff62e 	bgeu	r3,r2,b9d0 <_gp+0xffff59a0>
        (*dtor) (); 
}
    b9f8:	0001883a 	nop
    b9fc:	e037883a 	mov	sp,fp
    ba00:	dfc00117 	ldw	ra,4(sp)
    ba04:	df000017 	ldw	fp,0(sp)
    ba08:	dec00204 	addi	sp,sp,8
    ba0c:	f800283a 	ret

0000ba10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ba10:	deffff04 	addi	sp,sp,-4
    ba14:	df000015 	stw	fp,0(sp)
    ba18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    ba1c:	0001883a 	nop
    ba20:	e037883a 	mov	sp,fp
    ba24:	df000017 	ldw	fp,0(sp)
    ba28:	dec00104 	addi	sp,sp,4
    ba2c:	f800283a 	ret

0000ba30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    ba30:	defffe04 	addi	sp,sp,-8
    ba34:	df000115 	stw	fp,4(sp)
    ba38:	df000104 	addi	fp,sp,4
    ba3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    ba40:	e0bfff17 	ldw	r2,-4(fp)
    ba44:	10bffe84 	addi	r2,r2,-6
    ba48:	10c00428 	cmpgeui	r3,r2,16
    ba4c:	18001a1e 	bne	r3,zero,bab8 <alt_exception_cause_generated_bad_addr+0x88>
    ba50:	100690ba 	slli	r3,r2,2
    ba54:	00800074 	movhi	r2,1
    ba58:	10ae9a04 	addi	r2,r2,-17816
    ba5c:	1885883a 	add	r2,r3,r2
    ba60:	10800017 	ldw	r2,0(r2)
    ba64:	1000683a 	jmp	r2
    ba68:	0000baa8 	cmpgeui	zero,zero,746
    ba6c:	0000baa8 	cmpgeui	zero,zero,746
    ba70:	0000bab8 	rdprs	zero,zero,746
    ba74:	0000bab8 	rdprs	zero,zero,746
    ba78:	0000bab8 	rdprs	zero,zero,746
    ba7c:	0000baa8 	cmpgeui	zero,zero,746
    ba80:	0000bab0 	cmpltui	zero,zero,746
    ba84:	0000bab8 	rdprs	zero,zero,746
    ba88:	0000baa8 	cmpgeui	zero,zero,746
    ba8c:	0000baa8 	cmpgeui	zero,zero,746
    ba90:	0000bab8 	rdprs	zero,zero,746
    ba94:	0000baa8 	cmpgeui	zero,zero,746
    ba98:	0000bab0 	cmpltui	zero,zero,746
    ba9c:	0000bab8 	rdprs	zero,zero,746
    baa0:	0000bab8 	rdprs	zero,zero,746
    baa4:	0000baa8 	cmpgeui	zero,zero,746
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    baa8:	00800044 	movi	r2,1
    baac:	00000306 	br	babc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    bab0:	0005883a 	mov	r2,zero
    bab4:	00000106 	br	babc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    bab8:	0005883a 	mov	r2,zero
  }
}
    babc:	e037883a 	mov	sp,fp
    bac0:	df000017 	ldw	fp,0(sp)
    bac4:	dec00104 	addi	sp,sp,4
    bac8:	f800283a 	ret

0000bacc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bacc:	defff804 	addi	sp,sp,-32
    bad0:	dfc00715 	stw	ra,28(sp)
    bad4:	df000615 	stw	fp,24(sp)
    bad8:	dc000515 	stw	r16,20(sp)
    badc:	df000604 	addi	fp,sp,24
    bae0:	e13ffb15 	stw	r4,-20(fp)
    bae4:	e17ffc15 	stw	r5,-16(fp)
    bae8:	e1bffd15 	stw	r6,-12(fp)
    baec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    baf0:	e1bffe17 	ldw	r6,-8(fp)
    baf4:	e17ffd17 	ldw	r5,-12(fp)
    baf8:	e13ffc17 	ldw	r4,-16(fp)
    bafc:	000bd540 	call	bd54 <open>
    bb00:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    bb04:	e0bffa17 	ldw	r2,-24(fp)
    bb08:	10002216 	blt	r2,zero,bb94 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bb0c:	04000074 	movhi	r16,1
    bb10:	8436a304 	addi	r16,r16,-9588
    bb14:	e0bffa17 	ldw	r2,-24(fp)
    bb18:	01400304 	movi	r5,12
    bb1c:	1009883a 	mov	r4,r2
    bb20:	00089e40 	call	89e4 <__mulsi3>
    bb24:	8085883a 	add	r2,r16,r2
    bb28:	10c00017 	ldw	r3,0(r2)
    bb2c:	e0bffb17 	ldw	r2,-20(fp)
    bb30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    bb34:	04000074 	movhi	r16,1
    bb38:	8436a304 	addi	r16,r16,-9588
    bb3c:	e0bffa17 	ldw	r2,-24(fp)
    bb40:	01400304 	movi	r5,12
    bb44:	1009883a 	mov	r4,r2
    bb48:	00089e40 	call	89e4 <__mulsi3>
    bb4c:	8085883a 	add	r2,r16,r2
    bb50:	10800104 	addi	r2,r2,4
    bb54:	10c00017 	ldw	r3,0(r2)
    bb58:	e0bffb17 	ldw	r2,-20(fp)
    bb5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bb60:	04000074 	movhi	r16,1
    bb64:	8436a304 	addi	r16,r16,-9588
    bb68:	e0bffa17 	ldw	r2,-24(fp)
    bb6c:	01400304 	movi	r5,12
    bb70:	1009883a 	mov	r4,r2
    bb74:	00089e40 	call	89e4 <__mulsi3>
    bb78:	8085883a 	add	r2,r16,r2
    bb7c:	10800204 	addi	r2,r2,8
    bb80:	10c00017 	ldw	r3,0(r2)
    bb84:	e0bffb17 	ldw	r2,-20(fp)
    bb88:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bb8c:	e13ffa17 	ldw	r4,-24(fp)
    bb90:	000beb00 	call	beb0 <alt_release_fd>
  }
} 
    bb94:	0001883a 	nop
    bb98:	e6ffff04 	addi	sp,fp,-4
    bb9c:	dfc00217 	ldw	ra,8(sp)
    bba0:	df000117 	ldw	fp,4(sp)
    bba4:	dc000017 	ldw	r16,0(sp)
    bba8:	dec00304 	addi	sp,sp,12
    bbac:	f800283a 	ret

0000bbb0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bbb0:	defffb04 	addi	sp,sp,-20
    bbb4:	dfc00415 	stw	ra,16(sp)
    bbb8:	df000315 	stw	fp,12(sp)
    bbbc:	df000304 	addi	fp,sp,12
    bbc0:	e13ffd15 	stw	r4,-12(fp)
    bbc4:	e17ffe15 	stw	r5,-8(fp)
    bbc8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bbcc:	01c07fc4 	movi	r7,511
    bbd0:	01800044 	movi	r6,1
    bbd4:	e17ffd17 	ldw	r5,-12(fp)
    bbd8:	01000074 	movhi	r4,1
    bbdc:	2136a604 	addi	r4,r4,-9576
    bbe0:	000bacc0 	call	bacc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bbe4:	01c07fc4 	movi	r7,511
    bbe8:	000d883a 	mov	r6,zero
    bbec:	e17ffe17 	ldw	r5,-8(fp)
    bbf0:	01000074 	movhi	r4,1
    bbf4:	2136a304 	addi	r4,r4,-9588
    bbf8:	000bacc0 	call	bacc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bbfc:	01c07fc4 	movi	r7,511
    bc00:	01800044 	movi	r6,1
    bc04:	e17fff17 	ldw	r5,-4(fp)
    bc08:	01000074 	movhi	r4,1
    bc0c:	2136a904 	addi	r4,r4,-9564
    bc10:	000bacc0 	call	bacc <alt_open_fd>
}  
    bc14:	0001883a 	nop
    bc18:	e037883a 	mov	sp,fp
    bc1c:	dfc00117 	ldw	ra,4(sp)
    bc20:	df000017 	ldw	fp,0(sp)
    bc24:	dec00204 	addi	sp,sp,8
    bc28:	f800283a 	ret

0000bc2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bc2c:	defffe04 	addi	sp,sp,-8
    bc30:	dfc00115 	stw	ra,4(sp)
    bc34:	df000015 	stw	fp,0(sp)
    bc38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bc3c:	d0a01017 	ldw	r2,-32704(gp)
    bc40:	10000326 	beq	r2,zero,bc50 <alt_get_errno+0x24>
    bc44:	d0a01017 	ldw	r2,-32704(gp)
    bc48:	103ee83a 	callr	r2
    bc4c:	00000106 	br	bc54 <alt_get_errno+0x28>
    bc50:	d0a5c004 	addi	r2,gp,-26880
}
    bc54:	e037883a 	mov	sp,fp
    bc58:	dfc00117 	ldw	ra,4(sp)
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00204 	addi	sp,sp,8
    bc64:	f800283a 	ret

0000bc68 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bc68:	defffb04 	addi	sp,sp,-20
    bc6c:	dfc00415 	stw	ra,16(sp)
    bc70:	df000315 	stw	fp,12(sp)
    bc74:	dc000215 	stw	r16,8(sp)
    bc78:	df000304 	addi	fp,sp,12
    bc7c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bc80:	e0bffe17 	ldw	r2,-8(fp)
    bc84:	10800217 	ldw	r2,8(r2)
    bc88:	10d00034 	orhi	r3,r2,16384
    bc8c:	e0bffe17 	ldw	r2,-8(fp)
    bc90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bc94:	e03ffd15 	stw	zero,-12(fp)
    bc98:	00002306 	br	bd28 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bc9c:	04000074 	movhi	r16,1
    bca0:	8436a304 	addi	r16,r16,-9588
    bca4:	e0bffd17 	ldw	r2,-12(fp)
    bca8:	01400304 	movi	r5,12
    bcac:	1009883a 	mov	r4,r2
    bcb0:	00089e40 	call	89e4 <__mulsi3>
    bcb4:	8085883a 	add	r2,r16,r2
    bcb8:	10c00017 	ldw	r3,0(r2)
    bcbc:	e0bffe17 	ldw	r2,-8(fp)
    bcc0:	10800017 	ldw	r2,0(r2)
    bcc4:	1880151e 	bne	r3,r2,bd1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bcc8:	04000074 	movhi	r16,1
    bccc:	8436a304 	addi	r16,r16,-9588
    bcd0:	e0bffd17 	ldw	r2,-12(fp)
    bcd4:	01400304 	movi	r5,12
    bcd8:	1009883a 	mov	r4,r2
    bcdc:	00089e40 	call	89e4 <__mulsi3>
    bce0:	8085883a 	add	r2,r16,r2
    bce4:	10800204 	addi	r2,r2,8
    bce8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bcec:	10000b0e 	bge	r2,zero,bd1c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bcf0:	01400304 	movi	r5,12
    bcf4:	e13ffd17 	ldw	r4,-12(fp)
    bcf8:	00089e40 	call	89e4 <__mulsi3>
    bcfc:	1007883a 	mov	r3,r2
    bd00:	00800074 	movhi	r2,1
    bd04:	10b6a304 	addi	r2,r2,-9588
    bd08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bd0c:	e0bffe17 	ldw	r2,-8(fp)
    bd10:	18800226 	beq	r3,r2,bd1c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bd14:	00bffcc4 	movi	r2,-13
    bd18:	00000806 	br	bd3c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bd1c:	e0bffd17 	ldw	r2,-12(fp)
    bd20:	10800044 	addi	r2,r2,1
    bd24:	e0bffd15 	stw	r2,-12(fp)
    bd28:	d0a00f17 	ldw	r2,-32708(gp)
    bd2c:	1007883a 	mov	r3,r2
    bd30:	e0bffd17 	ldw	r2,-12(fp)
    bd34:	18bfd92e 	bgeu	r3,r2,bc9c <_gp+0xffff5c6c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    bd38:	0005883a 	mov	r2,zero
}
    bd3c:	e6ffff04 	addi	sp,fp,-4
    bd40:	dfc00217 	ldw	ra,8(sp)
    bd44:	df000117 	ldw	fp,4(sp)
    bd48:	dc000017 	ldw	r16,0(sp)
    bd4c:	dec00304 	addi	sp,sp,12
    bd50:	f800283a 	ret

0000bd54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    bd54:	defff604 	addi	sp,sp,-40
    bd58:	dfc00915 	stw	ra,36(sp)
    bd5c:	df000815 	stw	fp,32(sp)
    bd60:	df000804 	addi	fp,sp,32
    bd64:	e13ffd15 	stw	r4,-12(fp)
    bd68:	e17ffe15 	stw	r5,-8(fp)
    bd6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    bd70:	00bfffc4 	movi	r2,-1
    bd74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    bd78:	00bffb44 	movi	r2,-19
    bd7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    bd80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    bd84:	d1600d04 	addi	r5,gp,-32716
    bd88:	e13ffd17 	ldw	r4,-12(fp)
    bd8c:	000c0fc0 	call	c0fc <alt_find_dev>
    bd90:	e0bff815 	stw	r2,-32(fp)
    bd94:	e0bff817 	ldw	r2,-32(fp)
    bd98:	1000051e 	bne	r2,zero,bdb0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    bd9c:	e13ffd17 	ldw	r4,-12(fp)
    bda0:	000c18c0 	call	c18c <alt_find_file>
    bda4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    bda8:	00800044 	movi	r2,1
    bdac:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    bdb0:	e0bff817 	ldw	r2,-32(fp)
    bdb4:	10002b26 	beq	r2,zero,be64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    bdb8:	e13ff817 	ldw	r4,-32(fp)
    bdbc:	000c2940 	call	c294 <alt_get_fd>
    bdc0:	e0bff915 	stw	r2,-28(fp)
    bdc4:	e0bff917 	ldw	r2,-28(fp)
    bdc8:	1000030e 	bge	r2,zero,bdd8 <open+0x84>
    {
      status = index;
    bdcc:	e0bff917 	ldw	r2,-28(fp)
    bdd0:	e0bffa15 	stw	r2,-24(fp)
    bdd4:	00002506 	br	be6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    bdd8:	01400304 	movi	r5,12
    bddc:	e13ff917 	ldw	r4,-28(fp)
    bde0:	00089e40 	call	89e4 <__mulsi3>
    bde4:	1007883a 	mov	r3,r2
    bde8:	00800074 	movhi	r2,1
    bdec:	10b6a304 	addi	r2,r2,-9588
    bdf0:	1885883a 	add	r2,r3,r2
    bdf4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    bdf8:	e0fffe17 	ldw	r3,-8(fp)
    bdfc:	00900034 	movhi	r2,16384
    be00:	10bfffc4 	addi	r2,r2,-1
    be04:	1886703a 	and	r3,r3,r2
    be08:	e0bffc17 	ldw	r2,-16(fp)
    be0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    be10:	e0bffb17 	ldw	r2,-20(fp)
    be14:	1000051e 	bne	r2,zero,be2c <open+0xd8>
    be18:	e13ffc17 	ldw	r4,-16(fp)
    be1c:	000bc680 	call	bc68 <alt_file_locked>
    be20:	e0bffa15 	stw	r2,-24(fp)
    be24:	e0bffa17 	ldw	r2,-24(fp)
    be28:	10001016 	blt	r2,zero,be6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    be2c:	e0bff817 	ldw	r2,-32(fp)
    be30:	10800317 	ldw	r2,12(r2)
    be34:	10000826 	beq	r2,zero,be58 <open+0x104>
    be38:	e0bff817 	ldw	r2,-32(fp)
    be3c:	10800317 	ldw	r2,12(r2)
    be40:	e1ffff17 	ldw	r7,-4(fp)
    be44:	e1bffe17 	ldw	r6,-8(fp)
    be48:	e17ffd17 	ldw	r5,-12(fp)
    be4c:	e13ffc17 	ldw	r4,-16(fp)
    be50:	103ee83a 	callr	r2
    be54:	00000106 	br	be5c <open+0x108>
    be58:	0005883a 	mov	r2,zero
    be5c:	e0bffa15 	stw	r2,-24(fp)
    be60:	00000206 	br	be6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    be64:	00bffb44 	movi	r2,-19
    be68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    be6c:	e0bffa17 	ldw	r2,-24(fp)
    be70:	1000090e 	bge	r2,zero,be98 <open+0x144>
  {
    alt_release_fd (index);  
    be74:	e13ff917 	ldw	r4,-28(fp)
    be78:	000beb00 	call	beb0 <alt_release_fd>
    ALT_ERRNO = -status;
    be7c:	000bc2c0 	call	bc2c <alt_get_errno>
    be80:	1007883a 	mov	r3,r2
    be84:	e0bffa17 	ldw	r2,-24(fp)
    be88:	0085c83a 	sub	r2,zero,r2
    be8c:	18800015 	stw	r2,0(r3)
    return -1;
    be90:	00bfffc4 	movi	r2,-1
    be94:	00000106 	br	be9c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    be98:	e0bff917 	ldw	r2,-28(fp)
}
    be9c:	e037883a 	mov	sp,fp
    bea0:	dfc00117 	ldw	ra,4(sp)
    bea4:	df000017 	ldw	fp,0(sp)
    bea8:	dec00204 	addi	sp,sp,8
    beac:	f800283a 	ret

0000beb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    beb0:	defffc04 	addi	sp,sp,-16
    beb4:	dfc00315 	stw	ra,12(sp)
    beb8:	df000215 	stw	fp,8(sp)
    bebc:	dc000115 	stw	r16,4(sp)
    bec0:	df000204 	addi	fp,sp,8
    bec4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    bec8:	e0bffe17 	ldw	r2,-8(fp)
    becc:	108000d0 	cmplti	r2,r2,3
    bed0:	1000111e 	bne	r2,zero,bf18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    bed4:	04000074 	movhi	r16,1
    bed8:	8436a304 	addi	r16,r16,-9588
    bedc:	e0bffe17 	ldw	r2,-8(fp)
    bee0:	01400304 	movi	r5,12
    bee4:	1009883a 	mov	r4,r2
    bee8:	00089e40 	call	89e4 <__mulsi3>
    beec:	8085883a 	add	r2,r16,r2
    bef0:	10800204 	addi	r2,r2,8
    bef4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    bef8:	04000074 	movhi	r16,1
    befc:	8436a304 	addi	r16,r16,-9588
    bf00:	e0bffe17 	ldw	r2,-8(fp)
    bf04:	01400304 	movi	r5,12
    bf08:	1009883a 	mov	r4,r2
    bf0c:	00089e40 	call	89e4 <__mulsi3>
    bf10:	8085883a 	add	r2,r16,r2
    bf14:	10000015 	stw	zero,0(r2)
  }
}
    bf18:	0001883a 	nop
    bf1c:	e6ffff04 	addi	sp,fp,-4
    bf20:	dfc00217 	ldw	ra,8(sp)
    bf24:	df000117 	ldw	fp,4(sp)
    bf28:	dc000017 	ldw	r16,0(sp)
    bf2c:	dec00304 	addi	sp,sp,12
    bf30:	f800283a 	ret

0000bf34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    bf34:	defffa04 	addi	sp,sp,-24
    bf38:	df000515 	stw	fp,20(sp)
    bf3c:	df000504 	addi	fp,sp,20
    bf40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf44:	0005303a 	rdctl	r2,status
    bf48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf4c:	e0fffc17 	ldw	r3,-16(fp)
    bf50:	00bfff84 	movi	r2,-2
    bf54:	1884703a 	and	r2,r3,r2
    bf58:	1001703a 	wrctl	status,r2
  
  return context;
    bf5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bf60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    bf64:	e0bfff17 	ldw	r2,-4(fp)
    bf68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bf6c:	e0bffd17 	ldw	r2,-12(fp)
    bf70:	10800017 	ldw	r2,0(r2)
    bf74:	e0fffd17 	ldw	r3,-12(fp)
    bf78:	18c00117 	ldw	r3,4(r3)
    bf7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    bf80:	e0bffd17 	ldw	r2,-12(fp)
    bf84:	10800117 	ldw	r2,4(r2)
    bf88:	e0fffd17 	ldw	r3,-12(fp)
    bf8c:	18c00017 	ldw	r3,0(r3)
    bf90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    bf94:	e0bffd17 	ldw	r2,-12(fp)
    bf98:	e0fffd17 	ldw	r3,-12(fp)
    bf9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	e0fffd17 	ldw	r3,-12(fp)
    bfa8:	10c00015 	stw	r3,0(r2)
    bfac:	e0bffb17 	ldw	r2,-20(fp)
    bfb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bfb4:	e0bffe17 	ldw	r2,-8(fp)
    bfb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bfbc:	0001883a 	nop
    bfc0:	e037883a 	mov	sp,fp
    bfc4:	df000017 	ldw	fp,0(sp)
    bfc8:	dec00104 	addi	sp,sp,4
    bfcc:	f800283a 	ret

0000bfd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bfd0:	defffb04 	addi	sp,sp,-20
    bfd4:	dfc00415 	stw	ra,16(sp)
    bfd8:	df000315 	stw	fp,12(sp)
    bfdc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bfe0:	d0a01117 	ldw	r2,-32700(gp)
    bfe4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bfe8:	d0a5bf17 	ldw	r2,-26884(gp)
    bfec:	10800044 	addi	r2,r2,1
    bff0:	d0a5bf15 	stw	r2,-26884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bff4:	00002e06 	br	c0b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    bff8:	e0bffd17 	ldw	r2,-12(fp)
    bffc:	10800017 	ldw	r2,0(r2)
    c000:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c004:	e0bffd17 	ldw	r2,-12(fp)
    c008:	10800403 	ldbu	r2,16(r2)
    c00c:	10803fcc 	andi	r2,r2,255
    c010:	10000426 	beq	r2,zero,c024 <alt_tick+0x54>
    c014:	d0a5bf17 	ldw	r2,-26884(gp)
    c018:	1000021e 	bne	r2,zero,c024 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c01c:	e0bffd17 	ldw	r2,-12(fp)
    c020:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c024:	e0bffd17 	ldw	r2,-12(fp)
    c028:	10800217 	ldw	r2,8(r2)
    c02c:	d0e5bf17 	ldw	r3,-26884(gp)
    c030:	18801d36 	bltu	r3,r2,c0a8 <alt_tick+0xd8>
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	10800403 	ldbu	r2,16(r2)
    c03c:	10803fcc 	andi	r2,r2,255
    c040:	1000191e 	bne	r2,zero,c0a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c044:	e0bffd17 	ldw	r2,-12(fp)
    c048:	10800317 	ldw	r2,12(r2)
    c04c:	e0fffd17 	ldw	r3,-12(fp)
    c050:	18c00517 	ldw	r3,20(r3)
    c054:	1809883a 	mov	r4,r3
    c058:	103ee83a 	callr	r2
    c05c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c060:	e0bfff17 	ldw	r2,-4(fp)
    c064:	1000031e 	bne	r2,zero,c074 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c068:	e13ffd17 	ldw	r4,-12(fp)
    c06c:	000bf340 	call	bf34 <alt_alarm_stop>
    c070:	00000d06 	br	c0a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c074:	e0bffd17 	ldw	r2,-12(fp)
    c078:	10c00217 	ldw	r3,8(r2)
    c07c:	e0bfff17 	ldw	r2,-4(fp)
    c080:	1887883a 	add	r3,r3,r2
    c084:	e0bffd17 	ldw	r2,-12(fp)
    c088:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c08c:	e0bffd17 	ldw	r2,-12(fp)
    c090:	10c00217 	ldw	r3,8(r2)
    c094:	d0a5bf17 	ldw	r2,-26884(gp)
    c098:	1880032e 	bgeu	r3,r2,c0a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c09c:	e0bffd17 	ldw	r2,-12(fp)
    c0a0:	00c00044 	movi	r3,1
    c0a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c0a8:	e0bffe17 	ldw	r2,-8(fp)
    c0ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c0b0:	e0fffd17 	ldw	r3,-12(fp)
    c0b4:	d0a01104 	addi	r2,gp,-32700
    c0b8:	18bfcf1e 	bne	r3,r2,bff8 <_gp+0xffff5fc8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c0bc:	0001883a 	nop
}
    c0c0:	0001883a 	nop
    c0c4:	e037883a 	mov	sp,fp
    c0c8:	dfc00117 	ldw	ra,4(sp)
    c0cc:	df000017 	ldw	fp,0(sp)
    c0d0:	dec00204 	addi	sp,sp,8
    c0d4:	f800283a 	ret

0000c0d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c0d8:	deffff04 	addi	sp,sp,-4
    c0dc:	df000015 	stw	fp,0(sp)
    c0e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c0e4:	000170fa 	wrctl	ienable,zero
}
    c0e8:	0001883a 	nop
    c0ec:	e037883a 	mov	sp,fp
    c0f0:	df000017 	ldw	fp,0(sp)
    c0f4:	dec00104 	addi	sp,sp,4
    c0f8:	f800283a 	ret

0000c0fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c0fc:	defffa04 	addi	sp,sp,-24
    c100:	dfc00515 	stw	ra,20(sp)
    c104:	df000415 	stw	fp,16(sp)
    c108:	df000404 	addi	fp,sp,16
    c10c:	e13ffe15 	stw	r4,-8(fp)
    c110:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c114:	e0bfff17 	ldw	r2,-4(fp)
    c118:	10800017 	ldw	r2,0(r2)
    c11c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c120:	e13ffe17 	ldw	r4,-8(fp)
    c124:	000c5680 	call	c568 <strlen>
    c128:	10800044 	addi	r2,r2,1
    c12c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c130:	00000d06 	br	c168 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c134:	e0bffc17 	ldw	r2,-16(fp)
    c138:	10800217 	ldw	r2,8(r2)
    c13c:	e0fffd17 	ldw	r3,-12(fp)
    c140:	180d883a 	mov	r6,r3
    c144:	e17ffe17 	ldw	r5,-8(fp)
    c148:	1009883a 	mov	r4,r2
    c14c:	000c3a40 	call	c3a4 <memcmp>
    c150:	1000021e 	bne	r2,zero,c15c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c154:	e0bffc17 	ldw	r2,-16(fp)
    c158:	00000706 	br	c178 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c15c:	e0bffc17 	ldw	r2,-16(fp)
    c160:	10800017 	ldw	r2,0(r2)
    c164:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c168:	e0fffc17 	ldw	r3,-16(fp)
    c16c:	e0bfff17 	ldw	r2,-4(fp)
    c170:	18bff01e 	bne	r3,r2,c134 <_gp+0xffff6104>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c174:	0005883a 	mov	r2,zero
}
    c178:	e037883a 	mov	sp,fp
    c17c:	dfc00117 	ldw	ra,4(sp)
    c180:	df000017 	ldw	fp,0(sp)
    c184:	dec00204 	addi	sp,sp,8
    c188:	f800283a 	ret

0000c18c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c18c:	defffb04 	addi	sp,sp,-20
    c190:	dfc00415 	stw	ra,16(sp)
    c194:	df000315 	stw	fp,12(sp)
    c198:	df000304 	addi	fp,sp,12
    c19c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c1a0:	d0a00b17 	ldw	r2,-32724(gp)
    c1a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c1a8:	00003106 	br	c270 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c1ac:	e0bffd17 	ldw	r2,-12(fp)
    c1b0:	10800217 	ldw	r2,8(r2)
    c1b4:	1009883a 	mov	r4,r2
    c1b8:	000c5680 	call	c568 <strlen>
    c1bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c1c0:	e0bffd17 	ldw	r2,-12(fp)
    c1c4:	10c00217 	ldw	r3,8(r2)
    c1c8:	e0bffe17 	ldw	r2,-8(fp)
    c1cc:	10bfffc4 	addi	r2,r2,-1
    c1d0:	1885883a 	add	r2,r3,r2
    c1d4:	10800003 	ldbu	r2,0(r2)
    c1d8:	10803fcc 	andi	r2,r2,255
    c1dc:	1080201c 	xori	r2,r2,128
    c1e0:	10bfe004 	addi	r2,r2,-128
    c1e4:	10800bd8 	cmpnei	r2,r2,47
    c1e8:	1000031e 	bne	r2,zero,c1f8 <alt_find_file+0x6c>
    {
      len -= 1;
    c1ec:	e0bffe17 	ldw	r2,-8(fp)
    c1f0:	10bfffc4 	addi	r2,r2,-1
    c1f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c1f8:	e0bffe17 	ldw	r2,-8(fp)
    c1fc:	e0ffff17 	ldw	r3,-4(fp)
    c200:	1885883a 	add	r2,r3,r2
    c204:	10800003 	ldbu	r2,0(r2)
    c208:	10803fcc 	andi	r2,r2,255
    c20c:	1080201c 	xori	r2,r2,128
    c210:	10bfe004 	addi	r2,r2,-128
    c214:	10800be0 	cmpeqi	r2,r2,47
    c218:	1000081e 	bne	r2,zero,c23c <alt_find_file+0xb0>
    c21c:	e0bffe17 	ldw	r2,-8(fp)
    c220:	e0ffff17 	ldw	r3,-4(fp)
    c224:	1885883a 	add	r2,r3,r2
    c228:	10800003 	ldbu	r2,0(r2)
    c22c:	10803fcc 	andi	r2,r2,255
    c230:	1080201c 	xori	r2,r2,128
    c234:	10bfe004 	addi	r2,r2,-128
    c238:	10000a1e 	bne	r2,zero,c264 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c23c:	e0bffd17 	ldw	r2,-12(fp)
    c240:	10800217 	ldw	r2,8(r2)
    c244:	e0fffe17 	ldw	r3,-8(fp)
    c248:	180d883a 	mov	r6,r3
    c24c:	e17fff17 	ldw	r5,-4(fp)
    c250:	1009883a 	mov	r4,r2
    c254:	000c3a40 	call	c3a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c258:	1000021e 	bne	r2,zero,c264 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c25c:	e0bffd17 	ldw	r2,-12(fp)
    c260:	00000706 	br	c280 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c264:	e0bffd17 	ldw	r2,-12(fp)
    c268:	10800017 	ldw	r2,0(r2)
    c26c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c270:	e0fffd17 	ldw	r3,-12(fp)
    c274:	d0a00b04 	addi	r2,gp,-32724
    c278:	18bfcc1e 	bne	r3,r2,c1ac <_gp+0xffff617c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c27c:	0005883a 	mov	r2,zero
}
    c280:	e037883a 	mov	sp,fp
    c284:	dfc00117 	ldw	ra,4(sp)
    c288:	df000017 	ldw	fp,0(sp)
    c28c:	dec00204 	addi	sp,sp,8
    c290:	f800283a 	ret

0000c294 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c294:	defffa04 	addi	sp,sp,-24
    c298:	dfc00515 	stw	ra,20(sp)
    c29c:	df000415 	stw	fp,16(sp)
    c2a0:	dc000315 	stw	r16,12(sp)
    c2a4:	df000404 	addi	fp,sp,16
    c2a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c2ac:	00bffa04 	movi	r2,-24
    c2b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c2b4:	e03ffc15 	stw	zero,-16(fp)
    c2b8:	00001d06 	br	c330 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    c2bc:	04000074 	movhi	r16,1
    c2c0:	8436a304 	addi	r16,r16,-9588
    c2c4:	e0bffc17 	ldw	r2,-16(fp)
    c2c8:	01400304 	movi	r5,12
    c2cc:	1009883a 	mov	r4,r2
    c2d0:	00089e40 	call	89e4 <__mulsi3>
    c2d4:	8085883a 	add	r2,r16,r2
    c2d8:	10800017 	ldw	r2,0(r2)
    c2dc:	1000111e 	bne	r2,zero,c324 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    c2e0:	04000074 	movhi	r16,1
    c2e4:	8436a304 	addi	r16,r16,-9588
    c2e8:	e0bffc17 	ldw	r2,-16(fp)
    c2ec:	01400304 	movi	r5,12
    c2f0:	1009883a 	mov	r4,r2
    c2f4:	00089e40 	call	89e4 <__mulsi3>
    c2f8:	8085883a 	add	r2,r16,r2
    c2fc:	e0fffe17 	ldw	r3,-8(fp)
    c300:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c304:	d0e00f17 	ldw	r3,-32708(gp)
    c308:	e0bffc17 	ldw	r2,-16(fp)
    c30c:	1880020e 	bge	r3,r2,c318 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    c310:	e0bffc17 	ldw	r2,-16(fp)
    c314:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
    c318:	e0bffc17 	ldw	r2,-16(fp)
    c31c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    c320:	00000606 	br	c33c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c324:	e0bffc17 	ldw	r2,-16(fp)
    c328:	10800044 	addi	r2,r2,1
    c32c:	e0bffc15 	stw	r2,-16(fp)
    c330:	e0bffc17 	ldw	r2,-16(fp)
    c334:	10800810 	cmplti	r2,r2,32
    c338:	103fe01e 	bne	r2,zero,c2bc <_gp+0xffff628c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c33c:	e0bffd17 	ldw	r2,-12(fp)
}
    c340:	e6ffff04 	addi	sp,fp,-4
    c344:	dfc00217 	ldw	ra,8(sp)
    c348:	df000117 	ldw	fp,4(sp)
    c34c:	dc000017 	ldw	r16,0(sp)
    c350:	dec00304 	addi	sp,sp,12
    c354:	f800283a 	ret

0000c358 <atexit>:
    c358:	200b883a 	mov	r5,r4
    c35c:	000f883a 	mov	r7,zero
    c360:	000d883a 	mov	r6,zero
    c364:	0009883a 	mov	r4,zero
    c368:	000c6001 	jmpi	c600 <__register_exitproc>

0000c36c <exit>:
    c36c:	defffe04 	addi	sp,sp,-8
    c370:	000b883a 	mov	r5,zero
    c374:	dc000015 	stw	r16,0(sp)
    c378:	dfc00115 	stw	ra,4(sp)
    c37c:	2021883a 	mov	r16,r4
    c380:	000c7180 	call	c718 <__call_exitprocs>
    c384:	00800074 	movhi	r2,1
    c388:	10b81f04 	addi	r2,r2,-8068
    c38c:	11000017 	ldw	r4,0(r2)
    c390:	20800f17 	ldw	r2,60(r4)
    c394:	10000126 	beq	r2,zero,c39c <exit+0x30>
    c398:	103ee83a 	callr	r2
    c39c:	8009883a 	mov	r4,r16
    c3a0:	000c8980 	call	c898 <_exit>

0000c3a4 <memcmp>:
    c3a4:	01c000c4 	movi	r7,3
    c3a8:	3980192e 	bgeu	r7,r6,c410 <memcmp+0x6c>
    c3ac:	2144b03a 	or	r2,r4,r5
    c3b0:	11c4703a 	and	r2,r2,r7
    c3b4:	10000f26 	beq	r2,zero,c3f4 <memcmp+0x50>
    c3b8:	20800003 	ldbu	r2,0(r4)
    c3bc:	28c00003 	ldbu	r3,0(r5)
    c3c0:	10c0151e 	bne	r2,r3,c418 <memcmp+0x74>
    c3c4:	31bfff84 	addi	r6,r6,-2
    c3c8:	01ffffc4 	movi	r7,-1
    c3cc:	00000406 	br	c3e0 <memcmp+0x3c>
    c3d0:	20800003 	ldbu	r2,0(r4)
    c3d4:	28c00003 	ldbu	r3,0(r5)
    c3d8:	31bfffc4 	addi	r6,r6,-1
    c3dc:	10c00e1e 	bne	r2,r3,c418 <memcmp+0x74>
    c3e0:	21000044 	addi	r4,r4,1
    c3e4:	29400044 	addi	r5,r5,1
    c3e8:	31fff91e 	bne	r6,r7,c3d0 <_gp+0xffff63a0>
    c3ec:	0005883a 	mov	r2,zero
    c3f0:	f800283a 	ret
    c3f4:	20c00017 	ldw	r3,0(r4)
    c3f8:	28800017 	ldw	r2,0(r5)
    c3fc:	18bfee1e 	bne	r3,r2,c3b8 <_gp+0xffff6388>
    c400:	31bfff04 	addi	r6,r6,-4
    c404:	21000104 	addi	r4,r4,4
    c408:	29400104 	addi	r5,r5,4
    c40c:	39bff936 	bltu	r7,r6,c3f4 <_gp+0xffff63c4>
    c410:	303fe91e 	bne	r6,zero,c3b8 <_gp+0xffff6388>
    c414:	003ff506 	br	c3ec <_gp+0xffff63bc>
    c418:	10c5c83a 	sub	r2,r2,r3
    c41c:	f800283a 	ret

0000c420 <memcpy>:
    c420:	defffd04 	addi	sp,sp,-12
    c424:	dfc00215 	stw	ra,8(sp)
    c428:	dc400115 	stw	r17,4(sp)
    c42c:	dc000015 	stw	r16,0(sp)
    c430:	00c003c4 	movi	r3,15
    c434:	2005883a 	mov	r2,r4
    c438:	1980452e 	bgeu	r3,r6,c550 <memcpy+0x130>
    c43c:	2906b03a 	or	r3,r5,r4
    c440:	18c000cc 	andi	r3,r3,3
    c444:	1800441e 	bne	r3,zero,c558 <memcpy+0x138>
    c448:	347ffc04 	addi	r17,r6,-16
    c44c:	8822d13a 	srli	r17,r17,4
    c450:	28c00104 	addi	r3,r5,4
    c454:	23400104 	addi	r13,r4,4
    c458:	8820913a 	slli	r16,r17,4
    c45c:	2b000204 	addi	r12,r5,8
    c460:	22c00204 	addi	r11,r4,8
    c464:	84000504 	addi	r16,r16,20
    c468:	2a800304 	addi	r10,r5,12
    c46c:	22400304 	addi	r9,r4,12
    c470:	2c21883a 	add	r16,r5,r16
    c474:	2811883a 	mov	r8,r5
    c478:	200f883a 	mov	r7,r4
    c47c:	41000017 	ldw	r4,0(r8)
    c480:	1fc00017 	ldw	ra,0(r3)
    c484:	63c00017 	ldw	r15,0(r12)
    c488:	39000015 	stw	r4,0(r7)
    c48c:	53800017 	ldw	r14,0(r10)
    c490:	6fc00015 	stw	ra,0(r13)
    c494:	5bc00015 	stw	r15,0(r11)
    c498:	4b800015 	stw	r14,0(r9)
    c49c:	18c00404 	addi	r3,r3,16
    c4a0:	39c00404 	addi	r7,r7,16
    c4a4:	42000404 	addi	r8,r8,16
    c4a8:	6b400404 	addi	r13,r13,16
    c4ac:	63000404 	addi	r12,r12,16
    c4b0:	5ac00404 	addi	r11,r11,16
    c4b4:	52800404 	addi	r10,r10,16
    c4b8:	4a400404 	addi	r9,r9,16
    c4bc:	1c3fef1e 	bne	r3,r16,c47c <_gp+0xffff644c>
    c4c0:	89c00044 	addi	r7,r17,1
    c4c4:	380e913a 	slli	r7,r7,4
    c4c8:	310003cc 	andi	r4,r6,15
    c4cc:	02c000c4 	movi	r11,3
    c4d0:	11c7883a 	add	r3,r2,r7
    c4d4:	29cb883a 	add	r5,r5,r7
    c4d8:	5900212e 	bgeu	r11,r4,c560 <memcpy+0x140>
    c4dc:	1813883a 	mov	r9,r3
    c4e0:	2811883a 	mov	r8,r5
    c4e4:	200f883a 	mov	r7,r4
    c4e8:	42800017 	ldw	r10,0(r8)
    c4ec:	4a400104 	addi	r9,r9,4
    c4f0:	39ffff04 	addi	r7,r7,-4
    c4f4:	4abfff15 	stw	r10,-4(r9)
    c4f8:	42000104 	addi	r8,r8,4
    c4fc:	59fffa36 	bltu	r11,r7,c4e8 <_gp+0xffff64b8>
    c500:	213fff04 	addi	r4,r4,-4
    c504:	2008d0ba 	srli	r4,r4,2
    c508:	318000cc 	andi	r6,r6,3
    c50c:	21000044 	addi	r4,r4,1
    c510:	2109883a 	add	r4,r4,r4
    c514:	2109883a 	add	r4,r4,r4
    c518:	1907883a 	add	r3,r3,r4
    c51c:	290b883a 	add	r5,r5,r4
    c520:	30000626 	beq	r6,zero,c53c <memcpy+0x11c>
    c524:	198d883a 	add	r6,r3,r6
    c528:	29c00003 	ldbu	r7,0(r5)
    c52c:	18c00044 	addi	r3,r3,1
    c530:	29400044 	addi	r5,r5,1
    c534:	19ffffc5 	stb	r7,-1(r3)
    c538:	19bffb1e 	bne	r3,r6,c528 <_gp+0xffff64f8>
    c53c:	dfc00217 	ldw	ra,8(sp)
    c540:	dc400117 	ldw	r17,4(sp)
    c544:	dc000017 	ldw	r16,0(sp)
    c548:	dec00304 	addi	sp,sp,12
    c54c:	f800283a 	ret
    c550:	2007883a 	mov	r3,r4
    c554:	003ff206 	br	c520 <_gp+0xffff64f0>
    c558:	2007883a 	mov	r3,r4
    c55c:	003ff106 	br	c524 <_gp+0xffff64f4>
    c560:	200d883a 	mov	r6,r4
    c564:	003fee06 	br	c520 <_gp+0xffff64f0>

0000c568 <strlen>:
    c568:	208000cc 	andi	r2,r4,3
    c56c:	10002026 	beq	r2,zero,c5f0 <strlen+0x88>
    c570:	20800007 	ldb	r2,0(r4)
    c574:	10002026 	beq	r2,zero,c5f8 <strlen+0x90>
    c578:	2005883a 	mov	r2,r4
    c57c:	00000206 	br	c588 <strlen+0x20>
    c580:	10c00007 	ldb	r3,0(r2)
    c584:	18001826 	beq	r3,zero,c5e8 <strlen+0x80>
    c588:	10800044 	addi	r2,r2,1
    c58c:	10c000cc 	andi	r3,r2,3
    c590:	183ffb1e 	bne	r3,zero,c580 <_gp+0xffff6550>
    c594:	10c00017 	ldw	r3,0(r2)
    c598:	01ffbff4 	movhi	r7,65279
    c59c:	39ffbfc4 	addi	r7,r7,-257
    c5a0:	00ca303a 	nor	r5,zero,r3
    c5a4:	01a02074 	movhi	r6,32897
    c5a8:	19c7883a 	add	r3,r3,r7
    c5ac:	31a02004 	addi	r6,r6,-32640
    c5b0:	1946703a 	and	r3,r3,r5
    c5b4:	1986703a 	and	r3,r3,r6
    c5b8:	1800091e 	bne	r3,zero,c5e0 <strlen+0x78>
    c5bc:	10800104 	addi	r2,r2,4
    c5c0:	10c00017 	ldw	r3,0(r2)
    c5c4:	19cb883a 	add	r5,r3,r7
    c5c8:	00c6303a 	nor	r3,zero,r3
    c5cc:	28c6703a 	and	r3,r5,r3
    c5d0:	1986703a 	and	r3,r3,r6
    c5d4:	183ff926 	beq	r3,zero,c5bc <_gp+0xffff658c>
    c5d8:	00000106 	br	c5e0 <strlen+0x78>
    c5dc:	10800044 	addi	r2,r2,1
    c5e0:	10c00007 	ldb	r3,0(r2)
    c5e4:	183ffd1e 	bne	r3,zero,c5dc <_gp+0xffff65ac>
    c5e8:	1105c83a 	sub	r2,r2,r4
    c5ec:	f800283a 	ret
    c5f0:	2005883a 	mov	r2,r4
    c5f4:	003fe706 	br	c594 <_gp+0xffff6564>
    c5f8:	0005883a 	mov	r2,zero
    c5fc:	f800283a 	ret

0000c600 <__register_exitproc>:
    c600:	defffa04 	addi	sp,sp,-24
    c604:	dc000315 	stw	r16,12(sp)
    c608:	04000074 	movhi	r16,1
    c60c:	84381f04 	addi	r16,r16,-8068
    c610:	80c00017 	ldw	r3,0(r16)
    c614:	dc400415 	stw	r17,16(sp)
    c618:	dfc00515 	stw	ra,20(sp)
    c61c:	18805217 	ldw	r2,328(r3)
    c620:	2023883a 	mov	r17,r4
    c624:	10003726 	beq	r2,zero,c704 <__register_exitproc+0x104>
    c628:	10c00117 	ldw	r3,4(r2)
    c62c:	010007c4 	movi	r4,31
    c630:	20c00e16 	blt	r4,r3,c66c <__register_exitproc+0x6c>
    c634:	1a000044 	addi	r8,r3,1
    c638:	8800221e 	bne	r17,zero,c6c4 <__register_exitproc+0xc4>
    c63c:	18c00084 	addi	r3,r3,2
    c640:	18c7883a 	add	r3,r3,r3
    c644:	18c7883a 	add	r3,r3,r3
    c648:	12000115 	stw	r8,4(r2)
    c64c:	10c7883a 	add	r3,r2,r3
    c650:	19400015 	stw	r5,0(r3)
    c654:	0005883a 	mov	r2,zero
    c658:	dfc00517 	ldw	ra,20(sp)
    c65c:	dc400417 	ldw	r17,16(sp)
    c660:	dc000317 	ldw	r16,12(sp)
    c664:	dec00604 	addi	sp,sp,24
    c668:	f800283a 	ret
    c66c:	00800034 	movhi	r2,0
    c670:	10800004 	addi	r2,r2,0
    c674:	10002626 	beq	r2,zero,c710 <__register_exitproc+0x110>
    c678:	01006404 	movi	r4,400
    c67c:	d9400015 	stw	r5,0(sp)
    c680:	d9800115 	stw	r6,4(sp)
    c684:	d9c00215 	stw	r7,8(sp)
    c688:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c68c:	d9400017 	ldw	r5,0(sp)
    c690:	d9800117 	ldw	r6,4(sp)
    c694:	d9c00217 	ldw	r7,8(sp)
    c698:	10001d26 	beq	r2,zero,c710 <__register_exitproc+0x110>
    c69c:	81000017 	ldw	r4,0(r16)
    c6a0:	10000115 	stw	zero,4(r2)
    c6a4:	02000044 	movi	r8,1
    c6a8:	22405217 	ldw	r9,328(r4)
    c6ac:	0007883a 	mov	r3,zero
    c6b0:	12400015 	stw	r9,0(r2)
    c6b4:	20805215 	stw	r2,328(r4)
    c6b8:	10006215 	stw	zero,392(r2)
    c6bc:	10006315 	stw	zero,396(r2)
    c6c0:	883fde26 	beq	r17,zero,c63c <_gp+0xffff660c>
    c6c4:	18c9883a 	add	r4,r3,r3
    c6c8:	2109883a 	add	r4,r4,r4
    c6cc:	1109883a 	add	r4,r2,r4
    c6d0:	21802215 	stw	r6,136(r4)
    c6d4:	01800044 	movi	r6,1
    c6d8:	12406217 	ldw	r9,392(r2)
    c6dc:	30cc983a 	sll	r6,r6,r3
    c6e0:	4992b03a 	or	r9,r9,r6
    c6e4:	12406215 	stw	r9,392(r2)
    c6e8:	21c04215 	stw	r7,264(r4)
    c6ec:	01000084 	movi	r4,2
    c6f0:	893fd21e 	bne	r17,r4,c63c <_gp+0xffff660c>
    c6f4:	11006317 	ldw	r4,396(r2)
    c6f8:	218cb03a 	or	r6,r4,r6
    c6fc:	11806315 	stw	r6,396(r2)
    c700:	003fce06 	br	c63c <_gp+0xffff660c>
    c704:	18805304 	addi	r2,r3,332
    c708:	18805215 	stw	r2,328(r3)
    c70c:	003fc606 	br	c628 <_gp+0xffff65f8>
    c710:	00bfffc4 	movi	r2,-1
    c714:	003fd006 	br	c658 <_gp+0xffff6628>

0000c718 <__call_exitprocs>:
    c718:	defff504 	addi	sp,sp,-44
    c71c:	df000915 	stw	fp,36(sp)
    c720:	dd400615 	stw	r21,24(sp)
    c724:	dc800315 	stw	r18,12(sp)
    c728:	dfc00a15 	stw	ra,40(sp)
    c72c:	ddc00815 	stw	r23,32(sp)
    c730:	dd800715 	stw	r22,28(sp)
    c734:	dd000515 	stw	r20,20(sp)
    c738:	dcc00415 	stw	r19,16(sp)
    c73c:	dc400215 	stw	r17,8(sp)
    c740:	dc000115 	stw	r16,4(sp)
    c744:	d9000015 	stw	r4,0(sp)
    c748:	2839883a 	mov	fp,r5
    c74c:	04800044 	movi	r18,1
    c750:	057fffc4 	movi	r21,-1
    c754:	00800074 	movhi	r2,1
    c758:	10b81f04 	addi	r2,r2,-8068
    c75c:	12000017 	ldw	r8,0(r2)
    c760:	45005217 	ldw	r20,328(r8)
    c764:	44c05204 	addi	r19,r8,328
    c768:	a0001c26 	beq	r20,zero,c7dc <__call_exitprocs+0xc4>
    c76c:	a0800117 	ldw	r2,4(r20)
    c770:	15ffffc4 	addi	r23,r2,-1
    c774:	b8000d16 	blt	r23,zero,c7ac <__call_exitprocs+0x94>
    c778:	14000044 	addi	r16,r2,1
    c77c:	8421883a 	add	r16,r16,r16
    c780:	8421883a 	add	r16,r16,r16
    c784:	84402004 	addi	r17,r16,128
    c788:	a463883a 	add	r17,r20,r17
    c78c:	a421883a 	add	r16,r20,r16
    c790:	e0001e26 	beq	fp,zero,c80c <__call_exitprocs+0xf4>
    c794:	80804017 	ldw	r2,256(r16)
    c798:	e0801c26 	beq	fp,r2,c80c <__call_exitprocs+0xf4>
    c79c:	bdffffc4 	addi	r23,r23,-1
    c7a0:	843fff04 	addi	r16,r16,-4
    c7a4:	8c7fff04 	addi	r17,r17,-4
    c7a8:	bd7ff91e 	bne	r23,r21,c790 <_gp+0xffff6760>
    c7ac:	00800034 	movhi	r2,0
    c7b0:	10800004 	addi	r2,r2,0
    c7b4:	10000926 	beq	r2,zero,c7dc <__call_exitprocs+0xc4>
    c7b8:	a0800117 	ldw	r2,4(r20)
    c7bc:	1000301e 	bne	r2,zero,c880 <__call_exitprocs+0x168>
    c7c0:	a0800017 	ldw	r2,0(r20)
    c7c4:	10003226 	beq	r2,zero,c890 <__call_exitprocs+0x178>
    c7c8:	a009883a 	mov	r4,r20
    c7cc:	98800015 	stw	r2,0(r19)
    c7d0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    c7d4:	9d000017 	ldw	r20,0(r19)
    c7d8:	a03fe41e 	bne	r20,zero,c76c <_gp+0xffff673c>
    c7dc:	dfc00a17 	ldw	ra,40(sp)
    c7e0:	df000917 	ldw	fp,36(sp)
    c7e4:	ddc00817 	ldw	r23,32(sp)
    c7e8:	dd800717 	ldw	r22,28(sp)
    c7ec:	dd400617 	ldw	r21,24(sp)
    c7f0:	dd000517 	ldw	r20,20(sp)
    c7f4:	dcc00417 	ldw	r19,16(sp)
    c7f8:	dc800317 	ldw	r18,12(sp)
    c7fc:	dc400217 	ldw	r17,8(sp)
    c800:	dc000117 	ldw	r16,4(sp)
    c804:	dec00b04 	addi	sp,sp,44
    c808:	f800283a 	ret
    c80c:	a0800117 	ldw	r2,4(r20)
    c810:	80c00017 	ldw	r3,0(r16)
    c814:	10bfffc4 	addi	r2,r2,-1
    c818:	15c01426 	beq	r2,r23,c86c <__call_exitprocs+0x154>
    c81c:	80000015 	stw	zero,0(r16)
    c820:	183fde26 	beq	r3,zero,c79c <_gp+0xffff676c>
    c824:	95c8983a 	sll	r4,r18,r23
    c828:	a0806217 	ldw	r2,392(r20)
    c82c:	a5800117 	ldw	r22,4(r20)
    c830:	2084703a 	and	r2,r4,r2
    c834:	10000b26 	beq	r2,zero,c864 <__call_exitprocs+0x14c>
    c838:	a0806317 	ldw	r2,396(r20)
    c83c:	2088703a 	and	r4,r4,r2
    c840:	20000c1e 	bne	r4,zero,c874 <__call_exitprocs+0x15c>
    c844:	89400017 	ldw	r5,0(r17)
    c848:	d9000017 	ldw	r4,0(sp)
    c84c:	183ee83a 	callr	r3
    c850:	a0800117 	ldw	r2,4(r20)
    c854:	15bfbf1e 	bne	r2,r22,c754 <_gp+0xffff6724>
    c858:	98800017 	ldw	r2,0(r19)
    c85c:	153fcf26 	beq	r2,r20,c79c <_gp+0xffff676c>
    c860:	003fbc06 	br	c754 <_gp+0xffff6724>
    c864:	183ee83a 	callr	r3
    c868:	003ff906 	br	c850 <_gp+0xffff6820>
    c86c:	a5c00115 	stw	r23,4(r20)
    c870:	003feb06 	br	c820 <_gp+0xffff67f0>
    c874:	89000017 	ldw	r4,0(r17)
    c878:	183ee83a 	callr	r3
    c87c:	003ff406 	br	c850 <_gp+0xffff6820>
    c880:	a0800017 	ldw	r2,0(r20)
    c884:	a027883a 	mov	r19,r20
    c888:	1029883a 	mov	r20,r2
    c88c:	003fb606 	br	c768 <_gp+0xffff6738>
    c890:	0005883a 	mov	r2,zero
    c894:	003ffb06 	br	c884 <_gp+0xffff6854>

0000c898 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c898:	defffd04 	addi	sp,sp,-12
    c89c:	df000215 	stw	fp,8(sp)
    c8a0:	df000204 	addi	fp,sp,8
    c8a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c8a8:	0001883a 	nop
    c8ac:	e0bfff17 	ldw	r2,-4(fp)
    c8b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c8b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c8b8:	10000226 	beq	r2,zero,c8c4 <_exit+0x2c>
    ALT_SIM_FAIL();
    c8bc:	002af070 	cmpltui	zero,zero,43969
    c8c0:	00000106 	br	c8c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    c8c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c8c8:	003fff06 	br	c8c8 <_gp+0xffff6898>
