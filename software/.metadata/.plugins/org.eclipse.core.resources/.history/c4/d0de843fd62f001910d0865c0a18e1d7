// 1. Write a NIOS II C program that does the following:
// 	a. Displays 0 on hex0
// 	b. Checks to see if key1 is pushed (active low)
// 			i. If SW0 is high, increments the value on hex0 ii. If SW0 is low, decrements the value on hex0
// 	c. Do not increment or decrement the value on hex0 until key1 is released
//
// 2. Open NIOS II Software Build Tools for Eclipse. Create a new App and BSP, generate the bsp,
// copy system.h to the app folder, move your C program to the app folder, build the project and choose Debug as NIOS II hardware.
// Click the run icon and verify your program works as expected.
// /* alt_types.h and sys/alt_irq.h need to be included for the interrupt
//   functions
//   system.h is necessary for the system constants
//   io.h has read and write functions

#include "io.h"
#include <stdio.h>
#include "system.h"
#include "alt_types.h"
#include "sys/alt_irq.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"

// create standard embedded type definitions
typedef   signed char   sint8;              // signed 8 bit values
typedef unsigned char   uint8;              // unsigned 8 bit values
typedef   signed short  sint16;             // signed 16 bit values
typedef unsigned short  uint16;             // unsigned 16 bit values
typedef   signed long   sint32;             // signed 32 bit values
typedef unsigned long   uint32;             // unsigned 32 bit values
typedef         float   real32;             // 32 bit real values

volatile uint32 *TimerPtr          = (uint32 *) 0x11000;
volatile uint32 *LedPtr           	= (uint32 *) 0x11020;
volatile uint32 *Hex0Ptr      	    = (uint32 *) 0x11030;
volatile uint32 *KeyPtr       	    = (uint32 *) 0x11040;
volatile uint32 *SwitchPtr        	= (uint32 *) 0x11050;

int main(void)
// ****************************************************************************/
// /* Main Program                                                              */
// /*   Enables interrupts then loops infinitely                                */
// ***************************************************************************
{

	int j = 0;
//	Set up the board and variables
	int current_Keyval; //will store the value of what ever is being read
//	   what is stored in the bucket
	char array_hexDisplay[] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x0, 0x18}; //array to hold the hex constants

	*Hex0Ptr = array_hexDisplay[j] ;

	 for(int i = 0; i<10;i++)
	 {
	 	*Hex0Ptr = array_hexDisplay [0];
	 	current_Keyval = *KeyPtr; //reading the current value of the key

	 if(current_Keyval == 13)
	 {
		 current_Keyval = *KeyPtr; //reading the current value of the key

		 if(current_Keyval == 15){
	 	j++; //increment the bucket of the array
	 	*(Hex0Ptr) = array_hexDisplay[i];
		 }
	 }
	 }
	
    return (0);
}


// #********This is the array that will hold the hex display values******************************************************#
//
// array_hexDisplay:
//
// 		.byte 0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x2, 0x78, 0x0, 0x18 #/* 0-9#
// 		#segments			 #00000000
// 		#1000000 - 0  = 0x40
// 		#1111001 - 1  = 0x79
// 		#0100100 - 2  = 0x24
// 		#0110000 - 3  = 0x30
// 		#0011001 - 4  = 0x19
// 		#0010010 - 5  = 0x12
// 		#0000010 - 6  = 0x2
// 		#1111000 - 7  = 0x78
// 		#0000000 - 8  = 0x0
// 		#0011000 - 9  = 0x18
//
// #*********************************************************************************************************************#
